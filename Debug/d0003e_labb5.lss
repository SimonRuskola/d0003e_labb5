
d0003e_labb5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00002504  00002598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800126  00800126  000025be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e22  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e6  00000000  00000000  000056c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001756  00000000  00000000  000067a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c78  00000000  00000000  00007f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b2  00000000  00000000  00008b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ba4  00000000  00000000  0000952a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000c0ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__vector_1>
       8:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_2>
       c:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__vector_3>
      10:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__vector_4>
      14:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__vector_9>
      28:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_10>
      2c:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__vector_11>
      30:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_12>
      34:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__vector_13>
      38:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__vector_14>
      3c:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__vector_15>
      40:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_16>
      44:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_17>
      48:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__vector_18>
      4c:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__vector_19>
      50:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_20>
      54:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__vector_21>
      58:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__vector_22>
      5c:	8f 00       	.word	0x008f	; ????
      5e:	71 00       	.word	0x0071	; ????
      60:	74 00       	.word	0x0074	; ????
      62:	77 00       	.word	0x0077	; ????
      64:	7a 00       	.word	0x007a	; ????
      66:	7d 00       	.word	0x007d	; ????
      68:	80 00       	.word	0x0080	; ????
      6a:	83 00       	.word	0x0083	; ????
      6c:	86 00       	.word	0x0086	; ????
      6e:	89 00       	.word	0x0089	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 e0       	ldi	r30, 0x04	; 4
      84:	f5 e2       	ldi	r31, 0x25	; 37
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a6 32       	cpi	r26, 0x26	; 38
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a6 e2       	ldi	r26, 0x26	; 38
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a1 38       	cpi	r26, 0x81	; 129
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 64 05 	call	0xac8	; 0xac8 <main>
      a6:	0c 94 80 12 	jmp	0x2500	; 0x2500 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:
#include "lcd.h"



void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
      b6:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      b8:	87 eb       	ldi	r24, 0xB7	; 183
      ba:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
      be:	87 e0       	ldi	r24, 0x07	; 7
      c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
      c4:	8f e0       	ldi	r24, 0x0F	; 15
      c6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
      ca:	80 ec       	ldi	r24, 0xC0	; 192
      cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
      d0:	08 95       	ret

000000d2 <getValueArray>:
}

int getValueArray(int i){

    switch (i)
      d2:	8a 30       	cpi	r24, 0x0A	; 10
      d4:	91 05       	cpc	r25, r1
      d6:	00 f5       	brcc	.+64     	; 0x118 <getValueArray+0x46>
      d8:	fc 01       	movw	r30, r24
      da:	e2 5d       	subi	r30, 0xD2	; 210
      dc:	ff 4f       	sbci	r31, 0xFF	; 255
      de:	0c 94 17 12 	jmp	0x242e	; 0x242e <__tablejump2__>
    {
    case 0:
        return ZeroValue;

    case 1:
        return OneValue;
      e2:	80 e8       	ldi	r24, 0x80	; 128
      e4:	90 e2       	ldi	r25, 0x20	; 32
      e6:	08 95       	ret
    
    case 2:
        return TwoValue;
      e8:	81 e1       	ldi	r24, 0x11	; 17
      ea:	9e e1       	ldi	r25, 0x1E	; 30
      ec:	08 95       	ret

    case 3:
        return ThreeValue;
      ee:	81 e1       	ldi	r24, 0x11	; 17
      f0:	9b e1       	ldi	r25, 0x1B	; 27
      f2:	08 95       	ret
    
    case 4:
        return FourValue;
      f4:	80 e5       	ldi	r24, 0x50	; 80
      f6:	9b e0       	ldi	r25, 0x0B	; 11
      f8:	08 95       	ret

    case 5:
        return FiveValue;
      fa:	81 e4       	ldi	r24, 0x41	; 65
      fc:	9b e1       	ldi	r25, 0x1B	; 27
      fe:	08 95       	ret
    
    case 6:
        return SixValue;
     100:	81 e4       	ldi	r24, 0x41	; 65
     102:	9f e1       	ldi	r25, 0x1F	; 31
     104:	08 95       	ret
    
    case 7:
        return SevenValue;
     106:	81 e1       	ldi	r24, 0x11	; 17
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
        
    case 8:
        return EightValue;
     10c:	81 e5       	ldi	r24, 0x51	; 81
     10e:	9f e1       	ldi	r25, 0x1F	; 31
     110:	08 95       	ret
    
    case 9:
        return NineValue;
     112:	81 e5       	ldi	r24, 0x51	; 81
     114:	9b e0       	ldi	r25, 0x0B	; 11
     116:	08 95       	ret
    
    default: // 10
        return BlankValue;
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
int getValueArray(int i){

    switch (i)
    {
    case 0:
        return ZeroValue;
     11e:	81 e5       	ldi	r24, 0x51	; 81
     120:	95 e1       	ldi	r25, 0x15	; 21
        return NineValue;
    
    default: // 10
        return BlankValue;
    }
}
     122:	08 95       	ret

00000124 <writeChar>:


void writeChar(char ch, int pos) {
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <writeChar+0xc>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62

	volatile int i = 0;
     134:	1a 82       	std	Y+2, r1	; 0x02
     136:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
     138:	66 30       	cpi	r22, 0x06	; 6
     13a:	71 05       	cpc	r23, r1
     13c:	08 f0       	brcs	.+2      	; 0x140 <writeChar+0x1c>
     13e:	fe c1       	rjmp	.+1020   	; 0x53c <__stack+0x3d>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
     140:	90 ed       	ldi	r25, 0xD0	; 208
     142:	98 0f       	add	r25, r24
     144:	9a 30       	cpi	r25, 0x0A	; 10
     146:	28 f0       	brcs	.+10     	; 0x152 <writeChar+0x2e>
		i=10;
     148:	8a e0       	ldi	r24, 0x0A	; 10
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	9a 83       	std	Y+2, r25	; 0x02
     14e:	89 83       	std	Y+1, r24	; 0x01
     150:	04 c0       	rjmp	.+8      	; 0x15a <writeChar+0x36>
	}else{
        i = ch - 48;
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	c0 97       	sbiw	r24, 0x30	; 48
     156:	9a 83       	std	Y+2, r25	; 0x02
     158:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
     15a:	61 15       	cp	r22, r1
     15c:	71 05       	cpc	r23, r1
     15e:	09 f0       	breq	.+2      	; 0x162 <writeChar+0x3e>
     160:	4e c0       	rjmp	.+156    	; 0x1fe <writeChar+0xda>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&getValueArray(i))<<0;
     162:	0f 2e       	mov	r0, r31
     164:	fc ee       	ldi	r31, 0xEC	; 236
     166:	ef 2e       	mov	r14, r31
     168:	f1 2c       	mov	r15, r1
     16a:	f0 2d       	mov	r31, r0
     16c:	f7 01       	movw	r30, r14
     16e:	10 81       	ld	r17, Z
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	9a 81       	ldd	r25, Y+2	; 0x02
     174:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     178:	10 7f       	andi	r17, 0xF0	; 240
     17a:	8f 70       	andi	r24, 0x0F	; 15
     17c:	81 2b       	or	r24, r17
     17e:	f7 01       	movw	r30, r14
     180:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     182:	0f 2e       	mov	r0, r31
     184:	f1 ef       	ldi	r31, 0xF1	; 241
     186:	ef 2e       	mov	r14, r31
     188:	f1 2c       	mov	r15, r1
     18a:	f0 2d       	mov	r31, r0
     18c:	f7 01       	movw	r30, r14
     18e:	10 81       	ld	r17, Z
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     198:	80 7f       	andi	r24, 0xF0	; 240
     19a:	99 27       	eor	r25, r25
     19c:	95 95       	asr	r25
     19e:	87 95       	ror	r24
     1a0:	95 95       	asr	r25
     1a2:	87 95       	ror	r24
     1a4:	95 95       	asr	r25
     1a6:	87 95       	ror	r24
     1a8:	95 95       	asr	r25
     1aa:	87 95       	ror	r24
     1ac:	10 7f       	andi	r17, 0xF0	; 240
     1ae:	81 2b       	or	r24, r17
     1b0:	f7 01       	movw	r30, r14
     1b2:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     1b4:	0f 2e       	mov	r0, r31
     1b6:	f6 ef       	ldi	r31, 0xF6	; 246
     1b8:	ef 2e       	mov	r14, r31
     1ba:	f1 2c       	mov	r15, r1
     1bc:	f0 2d       	mov	r31, r0
     1be:	f7 01       	movw	r30, r14
     1c0:	10 81       	ld	r17, Z
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     1ca:	88 27       	eor	r24, r24
     1cc:	9f 70       	andi	r25, 0x0F	; 15
     1ce:	10 7f       	andi	r17, 0xF0	; 240
     1d0:	19 2b       	or	r17, r25
     1d2:	f7 01       	movw	r30, r14
     1d4:	10 83       	st	Z, r17
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     1d6:	0f 2e       	mov	r0, r31
     1d8:	fb ef       	ldi	r31, 0xFB	; 251
     1da:	ef 2e       	mov	r14, r31
     1dc:	f1 2c       	mov	r15, r1
     1de:	f0 2d       	mov	r31, r0
     1e0:	f7 01       	movw	r30, r14
     1e2:	10 81       	ld	r17, Z
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     1ec:	10 7f       	andi	r17, 0xF0	; 240
     1ee:	95 95       	asr	r25
     1f0:	95 95       	asr	r25
     1f2:	95 95       	asr	r25
     1f4:	95 95       	asr	r25
     1f6:	91 2b       	or	r25, r17
     1f8:	f7 01       	movw	r30, r14
     1fa:	90 83       	st	Z, r25
     1fc:	9f c1       	rjmp	.+830    	; 0x53c <__stack+0x3d>
		
	} else if(pos==1){
     1fe:	61 30       	cpi	r22, 0x01	; 1
     200:	71 05       	cpc	r23, r1
     202:	09 f0       	breq	.+2      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
     204:	50 c0       	rjmp	.+160    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&getValueArray(i))<<4);
     206:	0f 2e       	mov	r0, r31
     208:	fc ee       	ldi	r31, 0xEC	; 236
     20a:	ef 2e       	mov	r14, r31
     20c:	f1 2c       	mov	r15, r1
     20e:	f0 2d       	mov	r31, r0
     210:	f7 01       	movw	r30, r14
     212:	10 81       	ld	r17, Z
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	9a 81       	ldd	r25, Y+2	; 0x02
     218:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     21c:	1f 70       	andi	r17, 0x0F	; 15
     21e:	82 95       	swap	r24
     220:	92 95       	swap	r25
     222:	90 7f       	andi	r25, 0xF0	; 240
     224:	98 27       	eor	r25, r24
     226:	80 7f       	andi	r24, 0xF0	; 240
     228:	98 27       	eor	r25, r24
     22a:	81 2b       	or	r24, r17
     22c:	f7 01       	movw	r30, r14
     22e:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     230:	0f 2e       	mov	r0, r31
     232:	f1 ef       	ldi	r31, 0xF1	; 241
     234:	ef 2e       	mov	r14, r31
     236:	f1 2c       	mov	r15, r1
     238:	f0 2d       	mov	r31, r0
     23a:	f7 01       	movw	r30, r14
     23c:	10 81       	ld	r17, Z
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     246:	1f 70       	andi	r17, 0x0F	; 15
     248:	80 7f       	andi	r24, 0xF0	; 240
     24a:	81 2b       	or	r24, r17
     24c:	f7 01       	movw	r30, r14
     24e:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     250:	0f 2e       	mov	r0, r31
     252:	f6 ef       	ldi	r31, 0xF6	; 246
     254:	ef 2e       	mov	r14, r31
     256:	f1 2c       	mov	r15, r1
     258:	f0 2d       	mov	r31, r0
     25a:	f7 01       	movw	r30, r14
     25c:	10 81       	ld	r17, Z
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     266:	88 27       	eor	r24, r24
     268:	9f 70       	andi	r25, 0x0F	; 15
     26a:	95 95       	asr	r25
     26c:	87 95       	ror	r24
     26e:	95 95       	asr	r25
     270:	87 95       	ror	r24
     272:	95 95       	asr	r25
     274:	87 95       	ror	r24
     276:	95 95       	asr	r25
     278:	87 95       	ror	r24
     27a:	1f 70       	andi	r17, 0x0F	; 15
     27c:	81 2b       	or	r24, r17
     27e:	f7 01       	movw	r30, r14
     280:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     282:	0f 2e       	mov	r0, r31
     284:	fb ef       	ldi	r31, 0xFB	; 251
     286:	ef 2e       	mov	r14, r31
     288:	f1 2c       	mov	r15, r1
     28a:	f0 2d       	mov	r31, r0
     28c:	f7 01       	movw	r30, r14
     28e:	10 81       	ld	r17, Z
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     298:	88 27       	eor	r24, r24
     29a:	90 7f       	andi	r25, 0xF0	; 240
     29c:	1f 70       	andi	r17, 0x0F	; 15
     29e:	19 2b       	or	r17, r25
     2a0:	f7 01       	movw	r30, r14
     2a2:	10 83       	st	Z, r17
     2a4:	4b c1       	rjmp	.+662    	; 0x53c <__stack+0x3d>
	} else if(pos==2){
     2a6:	62 30       	cpi	r22, 0x02	; 2
     2a8:	71 05       	cpc	r23, r1
     2aa:	09 f0       	breq	.+2      	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
     2ac:	4e c0       	rjmp	.+156    	; 0x34a <__EEPROM_REGION_LENGTH__+0x14a>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&getValueArray(i))<<0;
     2ae:	0f 2e       	mov	r0, r31
     2b0:	fd ee       	ldi	r31, 0xED	; 237
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f1 2c       	mov	r15, r1
     2b6:	f0 2d       	mov	r31, r0
     2b8:	f7 01       	movw	r30, r14
     2ba:	10 81       	ld	r17, Z
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
     2c0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     2c4:	10 7f       	andi	r17, 0xF0	; 240
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	81 2b       	or	r24, r17
     2ca:	f7 01       	movw	r30, r14
     2cc:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     2ce:	0f 2e       	mov	r0, r31
     2d0:	f2 ef       	ldi	r31, 0xF2	; 242
     2d2:	ef 2e       	mov	r14, r31
     2d4:	f1 2c       	mov	r15, r1
     2d6:	f0 2d       	mov	r31, r0
     2d8:	f7 01       	movw	r30, r14
     2da:	10 81       	ld	r17, Z
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     2e4:	80 7f       	andi	r24, 0xF0	; 240
     2e6:	99 27       	eor	r25, r25
     2e8:	95 95       	asr	r25
     2ea:	87 95       	ror	r24
     2ec:	95 95       	asr	r25
     2ee:	87 95       	ror	r24
     2f0:	95 95       	asr	r25
     2f2:	87 95       	ror	r24
     2f4:	95 95       	asr	r25
     2f6:	87 95       	ror	r24
     2f8:	10 7f       	andi	r17, 0xF0	; 240
     2fa:	81 2b       	or	r24, r17
     2fc:	f7 01       	movw	r30, r14
     2fe:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     300:	0f 2e       	mov	r0, r31
     302:	f7 ef       	ldi	r31, 0xF7	; 247
     304:	ef 2e       	mov	r14, r31
     306:	f1 2c       	mov	r15, r1
     308:	f0 2d       	mov	r31, r0
     30a:	f7 01       	movw	r30, r14
     30c:	10 81       	ld	r17, Z
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     316:	88 27       	eor	r24, r24
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	10 7f       	andi	r17, 0xF0	; 240
     31c:	19 2b       	or	r17, r25
     31e:	f7 01       	movw	r30, r14
     320:	10 83       	st	Z, r17
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     322:	0f 2e       	mov	r0, r31
     324:	fc ef       	ldi	r31, 0xFC	; 252
     326:	ef 2e       	mov	r14, r31
     328:	f1 2c       	mov	r15, r1
     32a:	f0 2d       	mov	r31, r0
     32c:	f7 01       	movw	r30, r14
     32e:	10 81       	ld	r17, Z
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	9a 81       	ldd	r25, Y+2	; 0x02
     334:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     338:	10 7f       	andi	r17, 0xF0	; 240
     33a:	95 95       	asr	r25
     33c:	95 95       	asr	r25
     33e:	95 95       	asr	r25
     340:	95 95       	asr	r25
     342:	91 2b       	or	r25, r17
     344:	f7 01       	movw	r30, r14
     346:	90 83       	st	Z, r25
     348:	f9 c0       	rjmp	.+498    	; 0x53c <__stack+0x3d>
		
	} else if(pos==3){
     34a:	63 30       	cpi	r22, 0x03	; 3
     34c:	71 05       	cpc	r23, r1
     34e:	09 f0       	breq	.+2      	; 0x352 <__EEPROM_REGION_LENGTH__+0x152>
     350:	50 c0       	rjmp	.+160    	; 0x3f2 <__EEPROM_REGION_LENGTH__+0x1f2>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&getValueArray(i))<<4);
     352:	0f 2e       	mov	r0, r31
     354:	fd ee       	ldi	r31, 0xED	; 237
     356:	ef 2e       	mov	r14, r31
     358:	f1 2c       	mov	r15, r1
     35a:	f0 2d       	mov	r31, r0
     35c:	f7 01       	movw	r30, r14
     35e:	10 81       	ld	r17, Z
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	9a 81       	ldd	r25, Y+2	; 0x02
     364:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     368:	1f 70       	andi	r17, 0x0F	; 15
     36a:	82 95       	swap	r24
     36c:	92 95       	swap	r25
     36e:	90 7f       	andi	r25, 0xF0	; 240
     370:	98 27       	eor	r25, r24
     372:	80 7f       	andi	r24, 0xF0	; 240
     374:	98 27       	eor	r25, r24
     376:	81 2b       	or	r24, r17
     378:	f7 01       	movw	r30, r14
     37a:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     37c:	0f 2e       	mov	r0, r31
     37e:	f2 ef       	ldi	r31, 0xF2	; 242
     380:	ef 2e       	mov	r14, r31
     382:	f1 2c       	mov	r15, r1
     384:	f0 2d       	mov	r31, r0
     386:	f7 01       	movw	r30, r14
     388:	10 81       	ld	r17, Z
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     392:	1f 70       	andi	r17, 0x0F	; 15
     394:	80 7f       	andi	r24, 0xF0	; 240
     396:	81 2b       	or	r24, r17
     398:	f7 01       	movw	r30, r14
     39a:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     39c:	0f 2e       	mov	r0, r31
     39e:	f7 ef       	ldi	r31, 0xF7	; 247
     3a0:	ef 2e       	mov	r14, r31
     3a2:	f1 2c       	mov	r15, r1
     3a4:	f0 2d       	mov	r31, r0
     3a6:	f7 01       	movw	r30, r14
     3a8:	10 81       	ld	r17, Z
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     3b2:	88 27       	eor	r24, r24
     3b4:	9f 70       	andi	r25, 0x0F	; 15
     3b6:	95 95       	asr	r25
     3b8:	87 95       	ror	r24
     3ba:	95 95       	asr	r25
     3bc:	87 95       	ror	r24
     3be:	95 95       	asr	r25
     3c0:	87 95       	ror	r24
     3c2:	95 95       	asr	r25
     3c4:	87 95       	ror	r24
     3c6:	1f 70       	andi	r17, 0x0F	; 15
     3c8:	81 2b       	or	r24, r17
     3ca:	f7 01       	movw	r30, r14
     3cc:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     3ce:	0f 2e       	mov	r0, r31
     3d0:	fc ef       	ldi	r31, 0xFC	; 252
     3d2:	ef 2e       	mov	r14, r31
     3d4:	f1 2c       	mov	r15, r1
     3d6:	f0 2d       	mov	r31, r0
     3d8:	f7 01       	movw	r30, r14
     3da:	10 81       	ld	r17, Z
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     3e4:	88 27       	eor	r24, r24
     3e6:	90 7f       	andi	r25, 0xF0	; 240
     3e8:	1f 70       	andi	r17, 0x0F	; 15
     3ea:	19 2b       	or	r17, r25
     3ec:	f7 01       	movw	r30, r14
     3ee:	10 83       	st	Z, r17
     3f0:	a5 c0       	rjmp	.+330    	; 0x53c <__stack+0x3d>
		
	} else if(pos==4){
     3f2:	64 30       	cpi	r22, 0x04	; 4
     3f4:	71 05       	cpc	r23, r1
     3f6:	09 f0       	breq	.+2      	; 0x3fa <__EEPROM_REGION_LENGTH__+0x1fa>
     3f8:	4e c0       	rjmp	.+156    	; 0x496 <__DATA_REGION_LENGTH__+0x96>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&getValueArray(i))<<0;
     3fa:	0f 2e       	mov	r0, r31
     3fc:	fe ee       	ldi	r31, 0xEE	; 238
     3fe:	ef 2e       	mov	r14, r31
     400:	f1 2c       	mov	r15, r1
     402:	f0 2d       	mov	r31, r0
     404:	f7 01       	movw	r30, r14
     406:	10 81       	ld	r17, Z
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	9a 81       	ldd	r25, Y+2	; 0x02
     40c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     410:	10 7f       	andi	r17, 0xF0	; 240
     412:	8f 70       	andi	r24, 0x0F	; 15
     414:	81 2b       	or	r24, r17
     416:	f7 01       	movw	r30, r14
     418:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     41a:	0f 2e       	mov	r0, r31
     41c:	f3 ef       	ldi	r31, 0xF3	; 243
     41e:	ef 2e       	mov	r14, r31
     420:	f1 2c       	mov	r15, r1
     422:	f0 2d       	mov	r31, r0
     424:	f7 01       	movw	r30, r14
     426:	10 81       	ld	r17, Z
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     430:	80 7f       	andi	r24, 0xF0	; 240
     432:	99 27       	eor	r25, r25
     434:	95 95       	asr	r25
     436:	87 95       	ror	r24
     438:	95 95       	asr	r25
     43a:	87 95       	ror	r24
     43c:	95 95       	asr	r25
     43e:	87 95       	ror	r24
     440:	95 95       	asr	r25
     442:	87 95       	ror	r24
     444:	10 7f       	andi	r17, 0xF0	; 240
     446:	81 2b       	or	r24, r17
     448:	f7 01       	movw	r30, r14
     44a:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     44c:	0f 2e       	mov	r0, r31
     44e:	f8 ef       	ldi	r31, 0xF8	; 248
     450:	ef 2e       	mov	r14, r31
     452:	f1 2c       	mov	r15, r1
     454:	f0 2d       	mov	r31, r0
     456:	f7 01       	movw	r30, r14
     458:	10 81       	ld	r17, Z
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     462:	88 27       	eor	r24, r24
     464:	9f 70       	andi	r25, 0x0F	; 15
     466:	10 7f       	andi	r17, 0xF0	; 240
     468:	19 2b       	or	r17, r25
     46a:	f7 01       	movw	r30, r14
     46c:	10 83       	st	Z, r17
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     46e:	0f 2e       	mov	r0, r31
     470:	fd ef       	ldi	r31, 0xFD	; 253
     472:	ef 2e       	mov	r14, r31
     474:	f1 2c       	mov	r15, r1
     476:	f0 2d       	mov	r31, r0
     478:	f7 01       	movw	r30, r14
     47a:	10 81       	ld	r17, Z
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	9a 81       	ldd	r25, Y+2	; 0x02
     480:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     484:	10 7f       	andi	r17, 0xF0	; 240
     486:	95 95       	asr	r25
     488:	95 95       	asr	r25
     48a:	95 95       	asr	r25
     48c:	95 95       	asr	r25
     48e:	91 2b       	or	r25, r17
     490:	f7 01       	movw	r30, r14
     492:	90 83       	st	Z, r25
     494:	53 c0       	rjmp	.+166    	; 0x53c <__stack+0x3d>
		
	} else if(pos==5){
     496:	65 30       	cpi	r22, 0x05	; 5
     498:	71 05       	cpc	r23, r1
     49a:	09 f0       	breq	.+2      	; 0x49e <__DATA_REGION_LENGTH__+0x9e>
     49c:	4f c0       	rjmp	.+158    	; 0x53c <__stack+0x3d>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&getValueArray(i))<<4);
     49e:	0f 2e       	mov	r0, r31
     4a0:	fe ee       	ldi	r31, 0xEE	; 238
     4a2:	ef 2e       	mov	r14, r31
     4a4:	f1 2c       	mov	r15, r1
     4a6:	f0 2d       	mov	r31, r0
     4a8:	f7 01       	movw	r30, r14
     4aa:	10 81       	ld	r17, Z
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4b4:	1f 70       	andi	r17, 0x0F	; 15
     4b6:	82 95       	swap	r24
     4b8:	92 95       	swap	r25
     4ba:	90 7f       	andi	r25, 0xF0	; 240
     4bc:	98 27       	eor	r25, r24
     4be:	80 7f       	andi	r24, 0xF0	; 240
     4c0:	98 27       	eor	r25, r24
     4c2:	81 2b       	or	r24, r17
     4c4:	f7 01       	movw	r30, r14
     4c6:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     4c8:	0f 2e       	mov	r0, r31
     4ca:	f3 ef       	ldi	r31, 0xF3	; 243
     4cc:	ef 2e       	mov	r14, r31
     4ce:	f1 2c       	mov	r15, r1
     4d0:	f0 2d       	mov	r31, r0
     4d2:	f7 01       	movw	r30, r14
     4d4:	10 81       	ld	r17, Z
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4de:	1f 70       	andi	r17, 0x0F	; 15
     4e0:	80 7f       	andi	r24, 0xF0	; 240
     4e2:	81 2b       	or	r24, r17
     4e4:	f7 01       	movw	r30, r14
     4e6:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     4e8:	0f 2e       	mov	r0, r31
     4ea:	f8 ef       	ldi	r31, 0xF8	; 248
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f1 2c       	mov	r15, r1
     4f0:	f0 2d       	mov	r31, r0
     4f2:	f7 01       	movw	r30, r14
     4f4:	10 81       	ld	r17, Z
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4fe:	88 27       	eor	r24, r24
     500:	9f 70       	andi	r25, 0x0F	; 15
     502:	95 95       	asr	r25
     504:	87 95       	ror	r24
     506:	95 95       	asr	r25
     508:	87 95       	ror	r24
     50a:	95 95       	asr	r25
     50c:	87 95       	ror	r24
     50e:	95 95       	asr	r25
     510:	87 95       	ror	r24
     512:	1f 70       	andi	r17, 0x0F	; 15
     514:	81 2b       	or	r24, r17
     516:	f7 01       	movw	r30, r14
     518:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     51a:	0f 2e       	mov	r0, r31
     51c:	fd ef       	ldi	r31, 0xFD	; 253
     51e:	ef 2e       	mov	r14, r31
     520:	f1 2c       	mov	r15, r1
     522:	f0 2d       	mov	r31, r0
     524:	f7 01       	movw	r30, r14
     526:	10 81       	ld	r17, Z
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     530:	88 27       	eor	r24, r24
     532:	90 7f       	andi	r25, 0xF0	; 240
     534:	1f 70       	andi	r17, 0x0F	; 15
     536:	19 2b       	or	r17, r25
     538:	f7 01       	movw	r30, r14
     53a:	10 83       	st	Z, r17
		
	}
	

}
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	08 95       	ret

0000054c <printAt>:

void printAt(long num, int pos) {
     54c:	8f 92       	push	r8
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	4b 01       	movw	r8, r22
     562:	5c 01       	movw	r10, r24
     564:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     566:	24 e6       	ldi	r18, 0x64	; 100
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__divmodsi4>
     572:	0f 2e       	mov	r0, r31
     574:	fa e0       	ldi	r31, 0x0A	; 10
     576:	cf 2e       	mov	r12, r31
     578:	d1 2c       	mov	r13, r1
     57a:	e1 2c       	mov	r14, r1
     57c:	f1 2c       	mov	r15, r1
     57e:	f0 2d       	mov	r31, r0
     580:	a7 01       	movw	r20, r14
     582:	96 01       	movw	r18, r12
     584:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__divmodsi4>
     588:	be 01       	movw	r22, r28
     58a:	80 e3       	ldi	r24, 0x30	; 48
     58c:	82 0f       	add	r24, r18
     58e:	0e 94 92 00 	call	0x124	; 0x124 <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     592:	21 96       	adiw	r28, 0x01	; 1
     594:	c5 01       	movw	r24, r10
     596:	b4 01       	movw	r22, r8
     598:	a7 01       	movw	r20, r14
     59a:	96 01       	movw	r18, r12
     59c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__divmodsi4>
     5a0:	86 2f       	mov	r24, r22
     5a2:	be 01       	movw	r22, r28
     5a4:	80 5d       	subi	r24, 0xD0	; 208
     5a6:	0e 94 92 00 	call	0x124	; 0x124 <writeChar>
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	08 95       	ret

000005c0 <carOffBridge>:
#include "light.h"
#include "TinyTimber.h"
#include "lcd.h"


void carOffBridge(lightsObject* self){
     5c0:	cf 92       	push	r12
     5c2:	df 92       	push	r13
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
    self->carsOnBridge--;
     5cc:	fc 01       	movw	r30, r24
     5ce:	26 81       	ldd	r18, Z+6	; 0x06
     5d0:	37 81       	ldd	r19, Z+7	; 0x07
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	31 09       	sbc	r19, r1
     5d6:	37 83       	std	Z+7, r19	; 0x07
     5d8:	26 83       	std	Z+6, r18	; 0x06
    ASYNC(self, updateLCD, NULL);
     5da:	c1 2c       	mov	r12, r1
     5dc:	d1 2c       	mov	r13, r1
     5de:	0f 2e       	mov	r0, r31
     5e0:	ff e0       	ldi	r31, 0x0F	; 15
     5e2:	ef 2e       	mov	r14, r31
     5e4:	f4 e0       	ldi	r31, 0x04	; 4
     5e6:	ff 2e       	mov	r15, r31
     5e8:	f0 2d       	mov	r31, r0
     5ea:	8c 01       	movw	r16, r24
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	a9 01       	movw	r20, r18
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	cb 01       	movw	r24, r22
     5f8:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
}
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	08 95       	ret

0000060a <openBridge>:

void openBridge(lightsObject* self){
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	fc 01       	movw	r30, r24
    LCDDR3 = !LCDDR3;
     618:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	91 11       	cpse	r25, r1
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    self->carsRow = 0;
     626:	13 8a       	std	Z+19, r1	; 0x13
     628:	12 8a       	std	Z+18, r1	; 0x12
    self->bridgeLock = 0; 
     62a:	15 8a       	std	Z+21, r1	; 0x15
     62c:	14 8a       	std	Z+20, r1	; 0x14
    if(self->direction == north && (self->carsSouth >= 1 )){
     62e:	80 89       	ldd	r24, Z+16	; 0x10
     630:	91 89       	ldd	r25, Z+17	; 0x11
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	91 05       	cpc	r25, r1
     636:	e9 f4       	brne	.+58     	; 0x672 <openBridge+0x68>
     638:	82 85       	ldd	r24, Z+10	; 0x0a
     63a:	93 85       	ldd	r25, Z+11	; 0x0b
     63c:	18 16       	cp	r1, r24
     63e:	19 06       	cpc	r1, r25
     640:	cc f5       	brge	.+114    	; 0x6b4 <openBridge+0xaa>
        self->direction = south;
     642:	11 8a       	std	Z+17, r1	; 0x11
     644:	10 8a       	std	Z+16, r1	; 0x10
        ASYNC(self->serial, USART_Transmit, 0x6);     // 0x6 = 0110 green south and red north on 
     646:	04 81       	ldd	r16, Z+4	; 0x04
     648:	15 81       	ldd	r17, Z+5	; 0x05
     64a:	0f 2e       	mov	r0, r31
     64c:	f6 e0       	ldi	r31, 0x06	; 6
     64e:	cf 2e       	mov	r12, r31
     650:	d1 2c       	mov	r13, r1
     652:	f0 2d       	mov	r31, r0
     654:	0f 2e       	mov	r0, r31
     656:	f0 ef       	ldi	r31, 0xF0	; 240
     658:	ef 2e       	mov	r14, r31
     65a:	f1 e1       	ldi	r31, 0x11	; 17
     65c:	ff 2e       	mov	r15, r31
     65e:	f0 2d       	mov	r31, r0
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	a9 01       	movw	r20, r18
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	cb 01       	movw	r24, r22
     66c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
     670:	25 c0       	rjmp	.+74     	; 0x6bc <openBridge+0xb2>

    } else if(self->direction == south && (self->carsNorth >= 1 )){
     672:	89 2b       	or	r24, r25
     674:	f9 f4       	brne	.+62     	; 0x6b4 <openBridge+0xaa>
     676:	80 85       	ldd	r24, Z+8	; 0x08
     678:	91 85       	ldd	r25, Z+9	; 0x09
     67a:	18 16       	cp	r1, r24
     67c:	19 06       	cpc	r1, r25
     67e:	d4 f4       	brge	.+52     	; 0x6b4 <openBridge+0xaa>
        self->direction = north;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	91 8b       	std	Z+17, r25	; 0x11
     686:	80 8b       	std	Z+16, r24	; 0x10
        ASYNC(self->serial, USART_Transmit, 0x9);  // 0x9 = 1001 green north and red south on
     688:	04 81       	ldd	r16, Z+4	; 0x04
     68a:	15 81       	ldd	r17, Z+5	; 0x05
     68c:	0f 2e       	mov	r0, r31
     68e:	f9 e0       	ldi	r31, 0x09	; 9
     690:	cf 2e       	mov	r12, r31
     692:	d1 2c       	mov	r13, r1
     694:	f0 2d       	mov	r31, r0
     696:	0f 2e       	mov	r0, r31
     698:	f0 ef       	ldi	r31, 0xF0	; 240
     69a:	ef 2e       	mov	r14, r31
     69c:	f1 e1       	ldi	r31, 0x11	; 17
     69e:	ff 2e       	mov	r15, r31
     6a0:	f0 2d       	mov	r31, r0
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	a9 01       	movw	r20, r18
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	cb 01       	movw	r24, r22
     6ae:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
     6b2:	04 c0       	rjmp	.+8      	; 0x6bc <openBridge+0xb2>
    }else{
        self->direction = noDirection;
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	91 8b       	std	Z+17, r25	; 0x11
     6ba:	80 8b       	std	Z+16, r24	; 0x10
    }

   
    //ASYNC(self,sensorRead, NULL);
}
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	08 95       	ret

000006ca <closeBridge>:



void closeBridge(lightsObject* self){
     6ca:	cf 92       	push	r12
     6cc:	df 92       	push	r13
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
    self->bridgeLock = 1; 
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	9d 8b       	std	Y+21, r25	; 0x15
     6e2:	8c 8b       	std	Y+20, r24	; 0x14
    ASYNC(self->serial, USART_Transmit, 0xA); // 0xA = 1010 all red on and green off
     6e4:	0c 81       	ldd	r16, Y+4	; 0x04
     6e6:	1d 81       	ldd	r17, Y+5	; 0x05
     6e8:	0f 2e       	mov	r0, r31
     6ea:	fa e0       	ldi	r31, 0x0A	; 10
     6ec:	cf 2e       	mov	r12, r31
     6ee:	d1 2c       	mov	r13, r1
     6f0:	f0 2d       	mov	r31, r0
     6f2:	0f 2e       	mov	r0, r31
     6f4:	f0 ef       	ldi	r31, 0xF0	; 240
     6f6:	ef 2e       	mov	r14, r31
     6f8:	f1 e1       	ldi	r31, 0x11	; 17
     6fa:	ff 2e       	mov	r15, r31
     6fc:	f0 2d       	mov	r31, r0
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	a9 01       	movw	r20, r18
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	cb 01       	movw	r24, r22
     70a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
    LCDDR18 =  !LCDDR18;
     70e:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	91 11       	cpse	r25, r1
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
    AFTER(MSEC(5000),self, openBridge, NULL);
     71c:	c1 2c       	mov	r12, r1
     71e:	d1 2c       	mov	r13, r1
     720:	0f 2e       	mov	r0, r31
     722:	f5 e0       	ldi	r31, 0x05	; 5
     724:	ef 2e       	mov	r14, r31
     726:	f3 e0       	ldi	r31, 0x03	; 3
     728:	ff 2e       	mov	r15, r31
     72a:	f0 2d       	mov	r31, r0
     72c:	8e 01       	movw	r16, r28
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	a9 01       	movw	r20, r18
     734:	6a e5       	ldi	r22, 0x5A	; 90
     736:	72 e6       	ldi	r23, 0x62	; 98
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
    

}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	df 90       	pop	r13
     74e:	cf 90       	pop	r12
     750:	08 95       	ret

00000752 <startCars>:

int startCars(lightsObject* self){
     752:	cf 92       	push	r12
     754:	df 92       	push	r13
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17

    if(self->bridgeLock == 1 ){
     75e:	fc 01       	movw	r30, r24
     760:	24 89       	ldd	r18, Z+20	; 0x14
     762:	35 89       	ldd	r19, Z+21	; 0x15
     764:	21 30       	cpi	r18, 0x01	; 1
     766:	31 05       	cpc	r19, r1
     768:	09 f4       	brne	.+2      	; 0x76c <startCars+0x1a>
     76a:	47 c0       	rjmp	.+142    	; 0x7fa <startCars+0xa8>
        return 0;
    }

    if(self->direction == noDirection && self->carsNorth >= self->carsSouth){ 
     76c:	20 89       	ldd	r18, Z+16	; 0x10
     76e:	31 89       	ldd	r19, Z+17	; 0x11
     770:	22 30       	cpi	r18, 0x02	; 2
     772:	31 05       	cpc	r19, r1
     774:	09 f0       	breq	.+2      	; 0x778 <startCars+0x26>
     776:	44 c0       	rjmp	.+136    	; 0x800 <startCars+0xae>
     778:	20 85       	ldd	r18, Z+8	; 0x08
     77a:	31 85       	ldd	r19, Z+9	; 0x09
     77c:	82 85       	ldd	r24, Z+10	; 0x0a
     77e:	93 85       	ldd	r25, Z+11	; 0x0b
     780:	28 17       	cp	r18, r24
     782:	39 07       	cpc	r19, r25
     784:	f4 f0       	brlt	.+60     	; 0x7c2 <startCars+0x70>
        if(self->carsNorth >= 0){
     786:	33 23       	and	r19, r19
     788:	f4 f1       	brlt	.+124    	; 0x806 <startCars+0xb4>
            self->direction = north;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	91 8b       	std	Z+17, r25	; 0x11
     790:	80 8b       	std	Z+16, r24	; 0x10
            ASYNC(self->serial, USART_Transmit, 0x9);    // 0x9 = 1001 green north and red south on
     792:	04 81       	ldd	r16, Z+4	; 0x04
     794:	15 81       	ldd	r17, Z+5	; 0x05
     796:	0f 2e       	mov	r0, r31
     798:	f9 e0       	ldi	r31, 0x09	; 9
     79a:	cf 2e       	mov	r12, r31
     79c:	d1 2c       	mov	r13, r1
     79e:	f0 2d       	mov	r31, r0
     7a0:	0f 2e       	mov	r0, r31
     7a2:	f0 ef       	ldi	r31, 0xF0	; 240
     7a4:	ef 2e       	mov	r14, r31
     7a6:	f1 e1       	ldi	r31, 0x11	; 17
     7a8:	ff 2e       	mov	r15, r31
     7aa:	f0 2d       	mov	r31, r0
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	a9 01       	movw	r20, r18
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	cb 01       	movw	r24, r22
     7b8:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
        
        self->direction = south;
        ASYNC(self->serial, USART_Transmit, 0x6);     // 0x6 = 0110 green south and red north on  
    }

    return 1;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	27 c0       	rjmp	.+78     	; 0x810 <startCars+0xbe>
            self->direction = north;
            ASYNC(self->serial, USART_Transmit, 0x9);    // 0x9 = 1001 green north and red south on
        }
        

    } else if(self->direction == noDirection && self->carsSouth >= 0){
     7c2:	99 23       	and	r25, r25
     7c4:	1c f1       	brlt	.+70     	; 0x80c <startCars+0xba>
        
        self->direction = south;
     7c6:	11 8a       	std	Z+17, r1	; 0x11
     7c8:	10 8a       	std	Z+16, r1	; 0x10
        ASYNC(self->serial, USART_Transmit, 0x6);     // 0x6 = 0110 green south and red north on  
     7ca:	04 81       	ldd	r16, Z+4	; 0x04
     7cc:	15 81       	ldd	r17, Z+5	; 0x05
     7ce:	0f 2e       	mov	r0, r31
     7d0:	f6 e0       	ldi	r31, 0x06	; 6
     7d2:	cf 2e       	mov	r12, r31
     7d4:	d1 2c       	mov	r13, r1
     7d6:	f0 2d       	mov	r31, r0
     7d8:	0f 2e       	mov	r0, r31
     7da:	f0 ef       	ldi	r31, 0xF0	; 240
     7dc:	ef 2e       	mov	r14, r31
     7de:	f1 e1       	ldi	r31, 0x11	; 17
     7e0:	ff 2e       	mov	r15, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	a9 01       	movw	r20, r18
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	cb 01       	movw	r24, r22
     7f0:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
    }

    return 1;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0b c0       	rjmp	.+22     	; 0x810 <startCars+0xbe>
}

int startCars(lightsObject* self){

    if(self->bridgeLock == 1 ){
        return 0;
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	08 c0       	rjmp	.+16     	; 0x810 <startCars+0xbe>
        
        self->direction = south;
        ASYNC(self->serial, USART_Transmit, 0x6);     // 0x6 = 0110 green south and red north on  
    }

    return 1;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	05 c0       	rjmp	.+10     	; 0x810 <startCars+0xbe>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	02 c0       	rjmp	.+4      	; 0x810 <startCars+0xbe>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0

    //self->direction = noDirection;

}
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	08 95       	ret

0000081e <updateLCD>:
    
}
*/


void updateLCD(lightsObject* self){
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
    printAt(self->carsNorth,0);
     824:	68 85       	ldd	r22, Y+8	; 0x08
     826:	79 85       	ldd	r23, Y+9	; 0x09
     828:	07 2e       	mov	r0, r23
     82a:	00 0c       	add	r0, r0
     82c:	88 0b       	sbc	r24, r24
     82e:	99 0b       	sbc	r25, r25
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	0e 94 a6 02 	call	0x54c	; 0x54c <printAt>
    printAt(self->carsOnBridge,2);
     838:	6e 81       	ldd	r22, Y+6	; 0x06
     83a:	7f 81       	ldd	r23, Y+7	; 0x07
     83c:	07 2e       	mov	r0, r23
     83e:	00 0c       	add	r0, r0
     840:	88 0b       	sbc	r24, r24
     842:	99 0b       	sbc	r25, r25
     844:	42 e0       	ldi	r20, 0x02	; 2
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	0e 94 a6 02 	call	0x54c	; 0x54c <printAt>
    printAt(self->carsSouth,4);
     84c:	6a 85       	ldd	r22, Y+10	; 0x0a
     84e:	7b 85       	ldd	r23, Y+11	; 0x0b
     850:	07 2e       	mov	r0, r23
     852:	00 0c       	add	r0, r0
     854:	88 0b       	sbc	r24, r24
     856:	99 0b       	sbc	r25, r25
     858:	44 e0       	ldi	r20, 0x04	; 4
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	0e 94 a6 02 	call	0x54c	; 0x54c <printAt>
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <sensorRead>:
    //self->direction = noDirection;

}


void sensorRead(lightsObject* self){
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
    SYNC(self->serial, USART_Receive, NULL );
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	62 ee       	ldi	r22, 0xE2	; 226
     87e:	71 e1       	ldi	r23, 0x11	; 17
     880:	8c 81       	ldd	r24, Y+4	; 0x04
     882:	9d 81       	ldd	r25, Y+5	; 0x05
     884:	0e 94 9a 10 	call	0x2134	; 0x2134 <sync>

	if(self->serial->inData & (1)){ // north car arrival
     888:	ec 81       	ldd	r30, Y+4	; 0x04
     88a:	fd 81       	ldd	r31, Y+5	; 0x05
     88c:	84 81       	ldd	r24, Z+4	; 0x04
     88e:	80 ff       	sbrs	r24, 0
     890:	17 c0       	rjmp	.+46     	; 0x8c0 <sensorRead+0x5a>
        self->carsNorth++;
     892:	88 85       	ldd	r24, Y+8	; 0x08
     894:	99 85       	ldd	r25, Y+9	; 0x09
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	99 87       	std	Y+9, r25	; 0x09
     89a:	88 87       	std	Y+8, r24	; 0x08
        //startCars(self);
        ASYNC(self,startCars, NULL);
     89c:	c1 2c       	mov	r12, r1
     89e:	d1 2c       	mov	r13, r1
     8a0:	0f 2e       	mov	r0, r31
     8a2:	f9 ea       	ldi	r31, 0xA9	; 169
     8a4:	ef 2e       	mov	r14, r31
     8a6:	f3 e0       	ldi	r31, 0x03	; 3
     8a8:	ff 2e       	mov	r15, r31
     8aa:	f0 2d       	mov	r31, r0
     8ac:	8e 01       	movw	r16, r28
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	a9 01       	movw	r20, r18
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	cb 01       	movw	r24, r22
     8ba:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
     8be:	ea c0       	rjmp	.+468    	; 0xa94 <sensorRead+0x22e>


    }else if(self->serial->inData & (1<<1)  && (self->bridgeLock == 0) ){ //  north car bridge entry
     8c0:	81 ff       	sbrs	r24, 1
     8c2:	67 c0       	rjmp	.+206    	; 0x992 <sensorRead+0x12c>
     8c4:	2c 89       	ldd	r18, Y+20	; 0x14
     8c6:	3d 89       	ldd	r19, Y+21	; 0x15
     8c8:	23 2b       	or	r18, r19
     8ca:	09 f0       	breq	.+2      	; 0x8ce <sensorRead+0x68>
     8cc:	62 c0       	rjmp	.+196    	; 0x992 <sensorRead+0x12c>
        self->carsNorth--;
     8ce:	88 85       	ldd	r24, Y+8	; 0x08
     8d0:	99 85       	ldd	r25, Y+9	; 0x09
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	99 87       	std	Y+9, r25	; 0x09
     8d6:	88 87       	std	Y+8, r24	; 0x08
        self->carsOnBridge++;
     8d8:	8e 81       	ldd	r24, Y+6	; 0x06
     8da:	9f 81       	ldd	r25, Y+7	; 0x07
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	9f 83       	std	Y+7, r25	; 0x07
     8e0:	8e 83       	std	Y+6, r24	; 0x06
        self->carsRow++;
     8e2:	8a 89       	ldd	r24, Y+18	; 0x12
     8e4:	9b 89       	ldd	r25, Y+19	; 0x13
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	9b 8b       	std	Y+19, r25	; 0x13
     8ea:	8a 8b       	std	Y+18, r24	; 0x12
        AFTER(MSEC(5000), self, carOffBridge, NULL);    // 
     8ec:	c1 2c       	mov	r12, r1
     8ee:	d1 2c       	mov	r13, r1
     8f0:	0f 2e       	mov	r0, r31
     8f2:	f0 ee       	ldi	r31, 0xE0	; 224
     8f4:	ef 2e       	mov	r14, r31
     8f6:	f2 e0       	ldi	r31, 0x02	; 2
     8f8:	ff 2e       	mov	r15, r31
     8fa:	f0 2d       	mov	r31, r0
     8fc:	8e 01       	movw	r16, r28
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	a9 01       	movw	r20, r18
     904:	6a e5       	ldi	r22, 0x5A	; 90
     906:	72 e6       	ldi	r23, 0x62	; 98
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
        if( !(self->carsNorth <= 0) && self->carsRow <=5){ 
     910:	88 85       	ldd	r24, Y+8	; 0x08
     912:	99 85       	ldd	r25, Y+9	; 0x09
     914:	18 16       	cp	r1, r24
     916:	19 06       	cpc	r1, r25
     918:	54 f5       	brge	.+84     	; 0x96e <sensorRead+0x108>
     91a:	8a 89       	ldd	r24, Y+18	; 0x12
     91c:	9b 89       	ldd	r25, Y+19	; 0x13
     91e:	06 97       	sbiw	r24, 0x06	; 6
     920:	34 f5       	brge	.+76     	; 0x96e <sensorRead+0x108>
            ASYNC(self->serial, USART_Transmit, 0xA) ;               // 0xA = 1010 all red on and green off
     922:	0c 81       	ldd	r16, Y+4	; 0x04
     924:	1d 81       	ldd	r17, Y+5	; 0x05
     926:	0f 2e       	mov	r0, r31
     928:	fa e0       	ldi	r31, 0x0A	; 10
     92a:	cf 2e       	mov	r12, r31
     92c:	d1 2c       	mov	r13, r1
     92e:	f0 2d       	mov	r31, r0
     930:	0f 2e       	mov	r0, r31
     932:	f0 ef       	ldi	r31, 0xF0	; 240
     934:	ef 2e       	mov	r14, r31
     936:	f1 e1       	ldi	r31, 0x11	; 17
     938:	ff 2e       	mov	r15, r31
     93a:	f0 2d       	mov	r31, r0
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	a9 01       	movw	r20, r18
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	cb 01       	movw	r24, r22
     948:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
            AFTER(MSEC(1000), self->serial, USART_Transmit, 0x9);    // 0x9 = 1001 green north and red south on
     94c:	0c 81       	ldd	r16, Y+4	; 0x04
     94e:	1d 81       	ldd	r17, Y+5	; 0x05
     950:	0f 2e       	mov	r0, r31
     952:	f9 e0       	ldi	r31, 0x09	; 9
     954:	cf 2e       	mov	r12, r31
     956:	d1 2c       	mov	r13, r1
     958:	f0 2d       	mov	r31, r0
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	a9 01       	movw	r20, r18
     960:	62 e1       	ldi	r22, 0x12	; 18
     962:	7a e7       	ldi	r23, 0x7A	; 122
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
     96c:	93 c0       	rjmp	.+294    	; 0xa94 <sensorRead+0x22e>
        }else{
            ASYNC(self, closeBridge, NULL); //switch direction
     96e:	c1 2c       	mov	r12, r1
     970:	d1 2c       	mov	r13, r1
     972:	0f 2e       	mov	r0, r31
     974:	f5 e6       	ldi	r31, 0x65	; 101
     976:	ef 2e       	mov	r14, r31
     978:	f3 e0       	ldi	r31, 0x03	; 3
     97a:	ff 2e       	mov	r15, r31
     97c:	f0 2d       	mov	r31, r0
     97e:	8e 01       	movw	r16, r28
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	a9 01       	movw	r20, r18
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	cb 01       	movw	r24, r22
     98c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
     990:	81 c0       	rjmp	.+258    	; 0xa94 <sensorRead+0x22e>
            //closeBridge(self);
        }       
        
	}else if(self->serial->inData & (1<<2)){ //  south car arrival
     992:	82 ff       	sbrs	r24, 2
     994:	17 c0       	rjmp	.+46     	; 0x9c4 <sensorRead+0x15e>
        self->carsSouth++;
     996:	8a 85       	ldd	r24, Y+10	; 0x0a
     998:	9b 85       	ldd	r25, Y+11	; 0x0b
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	9b 87       	std	Y+11, r25	; 0x0b
     99e:	8a 87       	std	Y+10, r24	; 0x0a
        //startCars(self);
        ASYNC(self,startCars, NULL);
     9a0:	c1 2c       	mov	r12, r1
     9a2:	d1 2c       	mov	r13, r1
     9a4:	0f 2e       	mov	r0, r31
     9a6:	f9 ea       	ldi	r31, 0xA9	; 169
     9a8:	ef 2e       	mov	r14, r31
     9aa:	f3 e0       	ldi	r31, 0x03	; 3
     9ac:	ff 2e       	mov	r15, r31
     9ae:	f0 2d       	mov	r31, r0
     9b0:	8e 01       	movw	r16, r28
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	a9 01       	movw	r20, r18
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	cb 01       	movw	r24, r22
     9be:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
     9c2:	68 c0       	rjmp	.+208    	; 0xa94 <sensorRead+0x22e>


	}else if(self->serial->inData & (1<<3)  && (self->bridgeLock == 0) ){ // south car bridge entry
     9c4:	83 ff       	sbrs	r24, 3
     9c6:	66 c0       	rjmp	.+204    	; 0xa94 <sensorRead+0x22e>
     9c8:	8c 89       	ldd	r24, Y+20	; 0x14
     9ca:	9d 89       	ldd	r25, Y+21	; 0x15
     9cc:	89 2b       	or	r24, r25
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <sensorRead+0x16c>
     9d0:	61 c0       	rjmp	.+194    	; 0xa94 <sensorRead+0x22e>
        self->carsSouth--;
     9d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     9d4:	9b 85       	ldd	r25, Y+11	; 0x0b
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	9b 87       	std	Y+11, r25	; 0x0b
     9da:	8a 87       	std	Y+10, r24	; 0x0a
        self->carsOnBridge++;
     9dc:	8e 81       	ldd	r24, Y+6	; 0x06
     9de:	9f 81       	ldd	r25, Y+7	; 0x07
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	9f 83       	std	Y+7, r25	; 0x07
     9e4:	8e 83       	std	Y+6, r24	; 0x06
        self->carsRow++;
     9e6:	8a 89       	ldd	r24, Y+18	; 0x12
     9e8:	9b 89       	ldd	r25, Y+19	; 0x13
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	9b 8b       	std	Y+19, r25	; 0x13
     9ee:	8a 8b       	std	Y+18, r24	; 0x12
        AFTER(MSEC(5000), self, carOffBridge, NULL);    // 
     9f0:	c1 2c       	mov	r12, r1
     9f2:	d1 2c       	mov	r13, r1
     9f4:	0f 2e       	mov	r0, r31
     9f6:	f0 ee       	ldi	r31, 0xE0	; 224
     9f8:	ef 2e       	mov	r14, r31
     9fa:	f2 e0       	ldi	r31, 0x02	; 2
     9fc:	ff 2e       	mov	r15, r31
     9fe:	f0 2d       	mov	r31, r0
     a00:	8e 01       	movw	r16, r28
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	a9 01       	movw	r20, r18
     a08:	6a e5       	ldi	r22, 0x5A	; 90
     a0a:	72 e6       	ldi	r23, 0x62	; 98
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
        if( !(self->carsSouth <= 0) && self->carsRow <=5){
     a14:	8a 85       	ldd	r24, Y+10	; 0x0a
     a16:	9b 85       	ldd	r25, Y+11	; 0x0b
     a18:	18 16       	cp	r1, r24
     a1a:	19 06       	cpc	r1, r25
     a1c:	54 f5       	brge	.+84     	; 0xa72 <sensorRead+0x20c>
     a1e:	8a 89       	ldd	r24, Y+18	; 0x12
     a20:	9b 89       	ldd	r25, Y+19	; 0x13
     a22:	06 97       	sbiw	r24, 0x06	; 6
     a24:	34 f5       	brge	.+76     	; 0xa72 <sensorRead+0x20c>
            ASYNC(self->serial, USART_Transmit, 0xA);                // 0xA = 1010 all red on and green off
     a26:	0c 81       	ldd	r16, Y+4	; 0x04
     a28:	1d 81       	ldd	r17, Y+5	; 0x05
     a2a:	0f 2e       	mov	r0, r31
     a2c:	fa e0       	ldi	r31, 0x0A	; 10
     a2e:	cf 2e       	mov	r12, r31
     a30:	d1 2c       	mov	r13, r1
     a32:	f0 2d       	mov	r31, r0
     a34:	0f 2e       	mov	r0, r31
     a36:	f0 ef       	ldi	r31, 0xF0	; 240
     a38:	ef 2e       	mov	r14, r31
     a3a:	f1 e1       	ldi	r31, 0x11	; 17
     a3c:	ff 2e       	mov	r15, r31
     a3e:	f0 2d       	mov	r31, r0
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	a9 01       	movw	r20, r18
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	cb 01       	movw	r24, r22
     a4c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
            AFTER(MSEC(1000),self->serial, USART_Transmit, 0x6);     // 0x6 = 0110 green south and red north on
     a50:	0c 81       	ldd	r16, Y+4	; 0x04
     a52:	1d 81       	ldd	r17, Y+5	; 0x05
     a54:	0f 2e       	mov	r0, r31
     a56:	f6 e0       	ldi	r31, 0x06	; 6
     a58:	cf 2e       	mov	r12, r31
     a5a:	d1 2c       	mov	r13, r1
     a5c:	f0 2d       	mov	r31, r0
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	a9 01       	movw	r20, r18
     a64:	62 e1       	ldi	r22, 0x12	; 18
     a66:	7a e7       	ldi	r23, 0x7A	; 122
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
     a70:	11 c0       	rjmp	.+34     	; 0xa94 <sensorRead+0x22e>

        }else {
            ASYNC(self, closeBridge, NULL); //switch direction
     a72:	c1 2c       	mov	r12, r1
     a74:	d1 2c       	mov	r13, r1
     a76:	0f 2e       	mov	r0, r31
     a78:	f5 e6       	ldi	r31, 0x65	; 101
     a7a:	ef 2e       	mov	r14, r31
     a7c:	f3 e0       	ldi	r31, 0x03	; 3
     a7e:	ff 2e       	mov	r15, r31
     a80:	f0 2d       	mov	r31, r0
     a82:	8e 01       	movw	r16, r28
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	a9 01       	movw	r20, r18
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	cb 01       	movw	r24, r22
     a90:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>

        } 
        
	}
    ASYNC(self, updateLCD, NULL);	
     a94:	c1 2c       	mov	r12, r1
     a96:	d1 2c       	mov	r13, r1
     a98:	0f 2e       	mov	r0, r31
     a9a:	ff e0       	ldi	r31, 0x0F	; 15
     a9c:	ef 2e       	mov	r14, r31
     a9e:	f4 e0       	ldi	r31, 0x04	; 4
     aa0:	ff 2e       	mov	r15, r31
     aa2:	f0 2d       	mov	r31, r0
     aa4:	8e 01       	movw	r16, r28
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	a9 01       	movw	r20, r18
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	cb 01       	movw	r24, r22
     ab2:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
}
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	08 95       	ret

00000ac8 <main>:
    //{
    //    USART_Echo();
    //}
    
    
    TINYTIMBER(&mainObj, run, NULL);
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	50 e0       	ldi	r21, 0x00	; 0
     acc:	6d e6       	ldi	r22, 0x6D	; 109
     ace:	75 e0       	ldi	r23, 0x05	; 5
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 af 11 	call	0x235e	; 0x235e <tinytimber>
     ad8:	ff cf       	rjmp	.-2      	; 0xad8 <main+0x10>

00000ada <run>:
void test(runObj* self){
    printAt(23,0);
}


void run(runObj* self){
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	ec 01       	movw	r28, r24
    LCD_Init();
     ae0:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
    USART_Init (self->serial);
     ae4:	8c 81       	ldd	r24, Y+4	; 0x04
     ae6:	9d 81       	ldd	r25, Y+5	; 0x05
     ae8:	0e 94 cb 11 	call	0x2396	; 0x2396 <USART_Init>

    INSTALL(self->lights, sensorRead, IRQ_USART0_RX);
     aec:	48 e0       	ldi	r20, 0x08	; 8
     aee:	63 e3       	ldi	r22, 0x33	; 51
     af0:	74 e0       	ldi	r23, 0x04	; 4
     af2:	8e 81       	ldd	r24, Y+6	; 0x06
     af4:	9f 81       	ldd	r25, Y+7	; 0x07
     af6:	0e 94 95 11 	call	0x232a	; 0x232a <install>
    

    //INSTALL(self,interupts, IRQ_USART0_RX);
    //INSTALL(self,interupts, IRQ_USART0_UDRE);
    //INSTALL(self,interupts, IRQ_USART0_TX);
    printAt(0, 4);
     afa:	44 e0       	ldi	r20, 0x04	; 4
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	cb 01       	movw	r24, r22
     b04:	0e 94 a6 02 	call	0x54c	; 0x54c <printAt>
        //printAt(test,0);

        //pushToSerial(0x1);
    

}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	00 d0       	rcall	.+0      	; 0xb14 <initialize+0x6>
     b14:	00 d0       	rcall	.+0      	; 0xb16 <initialize+0x8>
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
     b1a:	81 e2       	ldi	r24, 0x21	; 33
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	21 e0       	ldi	r18, 0x01	; 1
     b20:	33 e0       	ldi	r19, 0x03	; 3
     b22:	fc 01       	movw	r30, r24
     b24:	70 97       	sbiw	r30, 0x10	; 16
     b26:	91 83       	std	Z+1, r25	; 0x01
     b28:	80 83       	st	Z, r24
     b2a:	40 96       	adiw	r24, 0x10	; 16
     b2c:	82 17       	cp	r24, r18
     b2e:	93 07       	cpc	r25, r19
     b30:	c1 f7       	brne	.-16     	; 0xb22 <initialize+0x14>
     b32:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <messages+0xe1>
     b36:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <messages+0xe0>
     b3a:	ec e5       	ldi	r30, 0x5C	; 92
     b3c:	f1 e0       	ldi	r31, 0x01	; 1
     b3e:	89 e7       	ldi	r24, 0x79	; 121
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	91 83       	std	Z+1, r25	; 0x01
     b44:	80 83       	st	Z, r24
     b46:	86 e9       	ldi	r24, 0x96	; 150
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	96 8f       	std	Z+30, r25	; 0x1e
     b4c:	85 8f       	std	Z+29, r24	; 0x1d
     b4e:	a3 eb       	ldi	r26, 0xB3	; 179
     b50:	b1 e0       	ldi	r27, 0x01	; 1
     b52:	b3 af       	std	Z+59, r27	; 0x3b
     b54:	a2 af       	std	Z+58, r26	; 0x3a
     b56:	1d 92       	st	X+, r1
     b58:	1c 92       	st	X, r1
     b5a:	fa 83       	std	Y+2, r31	; 0x02
     b5c:	e9 83       	std	Y+1, r30	; 0x01
     b5e:	ed e5       	ldi	r30, 0x5D	; 93
     b60:	f3 e0       	ldi	r31, 0x03	; 3
     b62:	fc 83       	std	Y+4, r31	; 0x04
     b64:	eb 83       	std	Y+3, r30	; 0x03
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	9a 81       	ldd	r25, Y+2	; 0x02
     b6a:	06 96       	adiw	r24, 0x06	; 6
     b6c:	0e 94 3f 12 	call	0x247e	; 0x247e <setjmp>
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	e9 81       	ldd	r30, Y+1	; 0x01
     b76:	fa 81       	ldd	r31, Y+2	; 0x02
     b78:	97 8b       	std	Z+23, r25	; 0x17
     b7a:	86 8b       	std	Z+22, r24	; 0x16
     b7c:	91 8f       	std	Z+25, r25	; 0x19
     b7e:	80 8f       	std	Z+24, r24	; 0x18
     b80:	87 e2       	ldi	r24, 0x27	; 39
     b82:	91 e1       	ldi	r25, 0x11	; 17
     b84:	94 8f       	std	Z+28, r25	; 0x1c
     b86:	83 8f       	std	Z+27, r24	; 0x1b
     b88:	15 82       	std	Z+5, r1	; 0x05
     b8a:	14 82       	std	Z+4, r1	; 0x04
     b8c:	7d 96       	adiw	r30, 0x1d	; 29
     b8e:	fa 83       	std	Y+2, r31	; 0x02
     b90:	e9 83       	std	Y+1, r30	; 0x01
     b92:	eb 81       	ldd	r30, Y+3	; 0x03
     b94:	fc 81       	ldd	r31, Y+4	; 0x04
     b96:	e0 5a       	subi	r30, 0xA0	; 160
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	fc 83       	std	Y+4, r31	; 0x04
     b9c:	eb 83       	std	Y+3, r30	; 0x03
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	80 5d       	subi	r24, 0xD0	; 208
     ba4:	91 40       	sbci	r25, 0x01	; 1
     ba6:	f9 f6       	brne	.-66     	; 0xb66 <initialize+0x58>
     ba8:	e4 ef       	ldi	r30, 0xF4	; 244
     baa:	f1 e0       	ldi	r31, 0x01	; 1
     bac:	11 82       	std	Z+1, r1	; 0x01
     bae:	10 82       	st	Z, r1
     bb0:	15 82       	std	Z+5, r1	; 0x05
     bb2:	14 82       	std	Z+4, r1	; 0x04
     bb4:	13 82       	std	Z+3, r1	; 0x03
     bb6:	12 82       	std	Z+2, r1	; 0x02
     bb8:	e1 e6       	ldi	r30, 0x61	; 97
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 e8       	ldi	r24, 0x80	; 128
     bbe:	80 83       	st	Z, r24
     bc0:	10 82       	st	Z, r1
     bc2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bc6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <dispatch>:
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	00 d0       	rcall	.+0      	; 0xbea <dispatch+0x6>
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	9a 83       	std	Y+2, r25	; 0x02
     bf0:	89 83       	std	Y+1, r24	; 0x01
     bf2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <current>
     bf6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <current+0x1>
     bfa:	06 96       	adiw	r24, 0x06	; 6
     bfc:	0e 94 3f 12 	call	0x247e	; 0x247e <setjmp>
     c00:	89 2b       	or	r24, r25
     c02:	59 f4       	brne	.+22     	; 0xc1a <dispatch+0x36>
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <current+0x1>
     c0c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <current>
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	06 96       	adiw	r24, 0x06	; 6
     c16:	0e 94 5f 12 	call	0x24be	; 0x24be <longjmp>
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <schedule>:
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <msgQ>
     c30:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <msgQ+0x1>
     c34:	30 97       	sbiw	r30, 0x00	; 0
     c36:	61 f1       	breq	.+88     	; 0xc90 <schedule+0x6c>
     c38:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <threadPool>
     c3c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <threadPool+0x1>
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	31 f1       	breq	.+76     	; 0xc90 <schedule+0x6c>
     c44:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <activeStack>
     c48:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <activeStack+0x1>
     c4c:	aa 81       	ldd	r26, Y+2	; 0x02
     c4e:	bb 81       	ldd	r27, Y+3	; 0x03
     c50:	10 97       	sbiw	r26, 0x00	; 0
     c52:	79 f0       	breq	.+30     	; 0xc72 <schedule+0x4e>
     c54:	46 81       	ldd	r20, Z+6	; 0x06
     c56:	57 81       	ldd	r21, Z+7	; 0x07
     c58:	60 85       	ldd	r22, Z+8	; 0x08
     c5a:	71 85       	ldd	r23, Z+9	; 0x09
     c5c:	16 96       	adiw	r26, 0x06	; 6
     c5e:	0d 91       	ld	r16, X+
     c60:	1d 91       	ld	r17, X+
     c62:	2d 91       	ld	r18, X+
     c64:	3c 91       	ld	r19, X
     c66:	19 97       	sbiw	r26, 0x09	; 9
     c68:	40 1b       	sub	r20, r16
     c6a:	51 0b       	sbc	r21, r17
     c6c:	62 0b       	sbc	r22, r18
     c6e:	73 0b       	sbc	r23, r19
     c70:	7a f4       	brpl	.+30     	; 0xc90 <schedule+0x6c>
     c72:	fc 01       	movw	r30, r24
     c74:	20 81       	ld	r18, Z
     c76:	31 81       	ldd	r19, Z+1	; 0x01
     c78:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <threadPool+0x1>
     c7c:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <threadPool>
     c80:	d1 83       	std	Z+1, r29	; 0x01
     c82:	c0 83       	st	Z, r28
     c84:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <activeStack+0x1>
     c88:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <activeStack>
     c8c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <dispatch>
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	08 95       	ret

00000c9a <__vector_1>:
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	2f 93       	push	r18
     ca6:	3f 93       	push	r19
     ca8:	4f 93       	push	r20
     caa:	5f 93       	push	r21
     cac:	6f 93       	push	r22
     cae:	7f 93       	push	r23
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	af 93       	push	r26
     cb6:	bf 93       	push	r27
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
     cbc:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
     cc0:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
     cc4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cc8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ccc:	c9 01       	movw	r24, r18
     cce:	03 2e       	mov	r0, r19
     cd0:	00 0c       	add	r0, r0
     cd2:	aa 0b       	sbc	r26, r26
     cd4:	bb 0b       	sbc	r27, r27
     cd6:	dc 01       	movw	r26, r24
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	84 2b       	or	r24, r20
     ce2:	95 2b       	or	r25, r21
     ce4:	a6 2b       	or	r26, r22
     ce6:	b7 2b       	or	r27, r23
     ce8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     cec:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     cf0:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     cf4:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     cf8:	b0 9b       	sbis	0x16, 0	; 22
     cfa:	1b c0       	rjmp	.+54     	; 0xd32 <__vector_1+0x98>
     cfc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d00:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d04:	c9 01       	movw	r24, r18
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	09 2e       	mov	r0, r25
     d0a:	00 0c       	add	r0, r0
     d0c:	aa 0b       	sbc	r26, r26
     d0e:	bb 0b       	sbc	r27, r27
     d10:	dc 01       	movw	r26, r24
     d12:	99 27       	eor	r25, r25
     d14:	88 27       	eor	r24, r24
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	84 2b       	or	r24, r20
     d1c:	95 2b       	or	r25, r21
     d1e:	a6 2b       	or	r26, r22
     d20:	b7 2b       	or	r27, r23
     d22:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     d26:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     d2a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     d2e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     d32:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable>
     d36:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x1>
     d3a:	30 97       	sbiw	r30, 0x00	; 0
     d3c:	39 f0       	breq	.+14     	; 0xd4c <__vector_1+0xb2>
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable>
     d46:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x1>
     d4a:	09 95       	icall
     d4c:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	bf 91       	pop	r27
     d56:	af 91       	pop	r26
     d58:	9f 91       	pop	r25
     d5a:	8f 91       	pop	r24
     d5c:	7f 91       	pop	r23
     d5e:	6f 91       	pop	r22
     d60:	5f 91       	pop	r21
     d62:	4f 91       	pop	r20
     d64:	3f 91       	pop	r19
     d66:	2f 91       	pop	r18
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	0f 90       	pop	r0
     d6e:	1f 90       	pop	r1
     d70:	18 95       	reti

00000d72 <__vector_2>:
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2f 93       	push	r18
     d7e:	3f 93       	push	r19
     d80:	4f 93       	push	r20
     d82:	5f 93       	push	r21
     d84:	6f 93       	push	r22
     d86:	7f 93       	push	r23
     d88:	8f 93       	push	r24
     d8a:	9f 93       	push	r25
     d8c:	af 93       	push	r26
     d8e:	bf 93       	push	r27
     d90:	ef 93       	push	r30
     d92:	ff 93       	push	r31
     d94:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
     d98:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
     d9c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     da0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     da4:	c9 01       	movw	r24, r18
     da6:	03 2e       	mov	r0, r19
     da8:	00 0c       	add	r0, r0
     daa:	aa 0b       	sbc	r26, r26
     dac:	bb 0b       	sbc	r27, r27
     dae:	dc 01       	movw	r26, r24
     db0:	99 27       	eor	r25, r25
     db2:	88 27       	eor	r24, r24
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	84 2b       	or	r24, r20
     dba:	95 2b       	or	r25, r21
     dbc:	a6 2b       	or	r26, r22
     dbe:	b7 2b       	or	r27, r23
     dc0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     dc4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     dc8:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     dcc:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     dd0:	b0 9b       	sbis	0x16, 0	; 22
     dd2:	1b c0       	rjmp	.+54     	; 0xe0a <__vector_2+0x98>
     dd4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dd8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ddc:	c9 01       	movw	r24, r18
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	09 2e       	mov	r0, r25
     de2:	00 0c       	add	r0, r0
     de4:	aa 0b       	sbc	r26, r26
     de6:	bb 0b       	sbc	r27, r27
     de8:	dc 01       	movw	r26, r24
     dea:	99 27       	eor	r25, r25
     dec:	88 27       	eor	r24, r24
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	84 2b       	or	r24, r20
     df4:	95 2b       	or	r25, r21
     df6:	a6 2b       	or	r26, r22
     df8:	b7 2b       	or	r27, r23
     dfa:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     dfe:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     e02:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     e06:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     e0a:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x2>
     e0e:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x3>
     e12:	30 97       	sbiw	r30, 0x00	; 0
     e14:	39 f0       	breq	.+14     	; 0xe24 <__vector_2+0xb2>
     e16:	61 e0       	ldi	r22, 0x01	; 1
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x2>
     e1e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x3>
     e22:	09 95       	icall
     e24:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	7f 91       	pop	r23
     e36:	6f 91       	pop	r22
     e38:	5f 91       	pop	r21
     e3a:	4f 91       	pop	r20
     e3c:	3f 91       	pop	r19
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <__vector_3>:
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	2f 93       	push	r18
     e56:	3f 93       	push	r19
     e58:	4f 93       	push	r20
     e5a:	5f 93       	push	r21
     e5c:	6f 93       	push	r22
     e5e:	7f 93       	push	r23
     e60:	8f 93       	push	r24
     e62:	9f 93       	push	r25
     e64:	af 93       	push	r26
     e66:	bf 93       	push	r27
     e68:	ef 93       	push	r30
     e6a:	ff 93       	push	r31
     e6c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
     e70:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
     e74:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e78:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e7c:	c9 01       	movw	r24, r18
     e7e:	03 2e       	mov	r0, r19
     e80:	00 0c       	add	r0, r0
     e82:	aa 0b       	sbc	r26, r26
     e84:	bb 0b       	sbc	r27, r27
     e86:	dc 01       	movw	r26, r24
     e88:	99 27       	eor	r25, r25
     e8a:	88 27       	eor	r24, r24
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	84 2b       	or	r24, r20
     e92:	95 2b       	or	r25, r21
     e94:	a6 2b       	or	r26, r22
     e96:	b7 2b       	or	r27, r23
     e98:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     e9c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     ea0:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     ea4:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     ea8:	b0 9b       	sbis	0x16, 0	; 22
     eaa:	1b c0       	rjmp	.+54     	; 0xee2 <__vector_3+0x98>
     eac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eb0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eb4:	c9 01       	movw	r24, r18
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	09 2e       	mov	r0, r25
     eba:	00 0c       	add	r0, r0
     ebc:	aa 0b       	sbc	r26, r26
     ebe:	bb 0b       	sbc	r27, r27
     ec0:	dc 01       	movw	r26, r24
     ec2:	99 27       	eor	r25, r25
     ec4:	88 27       	eor	r24, r24
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	84 2b       	or	r24, r20
     ecc:	95 2b       	or	r25, r21
     ece:	a6 2b       	or	r26, r22
     ed0:	b7 2b       	or	r27, r23
     ed2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     ed6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     eda:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     ede:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     ee2:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x4>
     ee6:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x5>
     eea:	30 97       	sbiw	r30, 0x00	; 0
     eec:	39 f0       	breq	.+14     	; 0xefc <__vector_3+0xb2>
     eee:	62 e0       	ldi	r22, 0x02	; 2
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x4>
     ef6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x5>
     efa:	09 95       	icall
     efc:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
     f00:	ff 91       	pop	r31
     f02:	ef 91       	pop	r30
     f04:	bf 91       	pop	r27
     f06:	af 91       	pop	r26
     f08:	9f 91       	pop	r25
     f0a:	8f 91       	pop	r24
     f0c:	7f 91       	pop	r23
     f0e:	6f 91       	pop	r22
     f10:	5f 91       	pop	r21
     f12:	4f 91       	pop	r20
     f14:	3f 91       	pop	r19
     f16:	2f 91       	pop	r18
     f18:	0f 90       	pop	r0
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	0f 90       	pop	r0
     f1e:	1f 90       	pop	r1
     f20:	18 95       	reti

00000f22 <__vector_4>:
     f22:	1f 92       	push	r1
     f24:	0f 92       	push	r0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
     f44:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
     f48:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
     f4c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f50:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f54:	c9 01       	movw	r24, r18
     f56:	03 2e       	mov	r0, r19
     f58:	00 0c       	add	r0, r0
     f5a:	aa 0b       	sbc	r26, r26
     f5c:	bb 0b       	sbc	r27, r27
     f5e:	dc 01       	movw	r26, r24
     f60:	99 27       	eor	r25, r25
     f62:	88 27       	eor	r24, r24
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	84 2b       	or	r24, r20
     f6a:	95 2b       	or	r25, r21
     f6c:	a6 2b       	or	r26, r22
     f6e:	b7 2b       	or	r27, r23
     f70:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     f74:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     f78:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     f7c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     f80:	b0 9b       	sbis	0x16, 0	; 22
     f82:	1b c0       	rjmp	.+54     	; 0xfba <__vector_4+0x98>
     f84:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f88:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f8c:	c9 01       	movw	r24, r18
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	09 2e       	mov	r0, r25
     f92:	00 0c       	add	r0, r0
     f94:	aa 0b       	sbc	r26, r26
     f96:	bb 0b       	sbc	r27, r27
     f98:	dc 01       	movw	r26, r24
     f9a:	99 27       	eor	r25, r25
     f9c:	88 27       	eor	r24, r24
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	84 2b       	or	r24, r20
     fa4:	95 2b       	or	r25, r21
     fa6:	a6 2b       	or	r26, r22
     fa8:	b7 2b       	or	r27, r23
     faa:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     fae:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     fb2:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     fb6:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     fba:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x6>
     fbe:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x7>
     fc2:	30 97       	sbiw	r30, 0x00	; 0
     fc4:	39 f0       	breq	.+14     	; 0xfd4 <__vector_4+0xb2>
     fc6:	63 e0       	ldi	r22, 0x03	; 3
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x6>
     fce:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x7>
     fd2:	09 95       	icall
     fd4:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
     fd8:	ff 91       	pop	r31
     fda:	ef 91       	pop	r30
     fdc:	bf 91       	pop	r27
     fde:	af 91       	pop	r26
     fe0:	9f 91       	pop	r25
     fe2:	8f 91       	pop	r24
     fe4:	7f 91       	pop	r23
     fe6:	6f 91       	pop	r22
     fe8:	5f 91       	pop	r21
     fea:	4f 91       	pop	r20
     fec:	3f 91       	pop	r19
     fee:	2f 91       	pop	r18
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	0f 90       	pop	r0
     ff6:	1f 90       	pop	r1
     ff8:	18 95       	reti

00000ffa <__vector_5>:
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	2f 93       	push	r18
    1006:	3f 93       	push	r19
    1008:	4f 93       	push	r20
    100a:	5f 93       	push	r21
    100c:	6f 93       	push	r22
    100e:	7f 93       	push	r23
    1010:	8f 93       	push	r24
    1012:	9f 93       	push	r25
    1014:	af 93       	push	r26
    1016:	bf 93       	push	r27
    1018:	ef 93       	push	r30
    101a:	ff 93       	push	r31
    101c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1020:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1024:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1028:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    102c:	c9 01       	movw	r24, r18
    102e:	03 2e       	mov	r0, r19
    1030:	00 0c       	add	r0, r0
    1032:	aa 0b       	sbc	r26, r26
    1034:	bb 0b       	sbc	r27, r27
    1036:	dc 01       	movw	r26, r24
    1038:	99 27       	eor	r25, r25
    103a:	88 27       	eor	r24, r24
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	84 2b       	or	r24, r20
    1042:	95 2b       	or	r25, r21
    1044:	a6 2b       	or	r26, r22
    1046:	b7 2b       	or	r27, r23
    1048:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    104c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1050:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1054:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1058:	b0 9b       	sbis	0x16, 0	; 22
    105a:	1b c0       	rjmp	.+54     	; 0x1092 <__vector_5+0x98>
    105c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1060:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1064:	c9 01       	movw	r24, r18
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	09 2e       	mov	r0, r25
    106a:	00 0c       	add	r0, r0
    106c:	aa 0b       	sbc	r26, r26
    106e:	bb 0b       	sbc	r27, r27
    1070:	dc 01       	movw	r26, r24
    1072:	99 27       	eor	r25, r25
    1074:	88 27       	eor	r24, r24
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	84 2b       	or	r24, r20
    107c:	95 2b       	or	r25, r21
    107e:	a6 2b       	or	r26, r22
    1080:	b7 2b       	or	r27, r23
    1082:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1086:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    108a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    108e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1092:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x8>
    1096:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x9>
    109a:	30 97       	sbiw	r30, 0x00	; 0
    109c:	39 f0       	breq	.+14     	; 0x10ac <__vector_5+0xb2>
    109e:	64 e0       	ldi	r22, 0x04	; 4
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x8>
    10a6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x9>
    10aa:	09 95       	icall
    10ac:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti

000010d2 <__vector_10>:
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
    10f4:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    10f8:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    10fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1100:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1104:	c9 01       	movw	r24, r18
    1106:	03 2e       	mov	r0, r19
    1108:	00 0c       	add	r0, r0
    110a:	aa 0b       	sbc	r26, r26
    110c:	bb 0b       	sbc	r27, r27
    110e:	dc 01       	movw	r26, r24
    1110:	99 27       	eor	r25, r25
    1112:	88 27       	eor	r24, r24
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	84 2b       	or	r24, r20
    111a:	95 2b       	or	r25, r21
    111c:	a6 2b       	or	r26, r22
    111e:	b7 2b       	or	r27, r23
    1120:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1124:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1128:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    112c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1130:	b0 9b       	sbis	0x16, 0	; 22
    1132:	1b c0       	rjmp	.+54     	; 0x116a <__vector_10+0x98>
    1134:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1138:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    113c:	c9 01       	movw	r24, r18
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	09 2e       	mov	r0, r25
    1142:	00 0c       	add	r0, r0
    1144:	aa 0b       	sbc	r26, r26
    1146:	bb 0b       	sbc	r27, r27
    1148:	dc 01       	movw	r26, r24
    114a:	99 27       	eor	r25, r25
    114c:	88 27       	eor	r24, r24
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	84 2b       	or	r24, r20
    1154:	95 2b       	or	r25, r21
    1156:	a6 2b       	or	r26, r22
    1158:	b7 2b       	or	r27, r23
    115a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    115e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1162:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1166:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    116a:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0xa>
    116e:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0xb>
    1172:	30 97       	sbiw	r30, 0x00	; 0
    1174:	39 f0       	breq	.+14     	; 0x1184 <__vector_10+0xb2>
    1176:	65 e0       	ldi	r22, 0x05	; 5
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0xa>
    117e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0xb>
    1182:	09 95       	icall
    1184:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    1188:	ff 91       	pop	r31
    118a:	ef 91       	pop	r30
    118c:	bf 91       	pop	r27
    118e:	af 91       	pop	r26
    1190:	9f 91       	pop	r25
    1192:	8f 91       	pop	r24
    1194:	7f 91       	pop	r23
    1196:	6f 91       	pop	r22
    1198:	5f 91       	pop	r21
    119a:	4f 91       	pop	r20
    119c:	3f 91       	pop	r19
    119e:	2f 91       	pop	r18
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	0f 90       	pop	r0
    11a6:	1f 90       	pop	r1
    11a8:	18 95       	reti

000011aa <__vector_11>:
    11aa:	1f 92       	push	r1
    11ac:	0f 92       	push	r0
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	0f 92       	push	r0
    11b2:	11 24       	eor	r1, r1
    11b4:	2f 93       	push	r18
    11b6:	3f 93       	push	r19
    11b8:	4f 93       	push	r20
    11ba:	5f 93       	push	r21
    11bc:	6f 93       	push	r22
    11be:	7f 93       	push	r23
    11c0:	8f 93       	push	r24
    11c2:	9f 93       	push	r25
    11c4:	af 93       	push	r26
    11c6:	bf 93       	push	r27
    11c8:	ef 93       	push	r30
    11ca:	ff 93       	push	r31
    11cc:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    11d0:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    11d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11dc:	c9 01       	movw	r24, r18
    11de:	03 2e       	mov	r0, r19
    11e0:	00 0c       	add	r0, r0
    11e2:	aa 0b       	sbc	r26, r26
    11e4:	bb 0b       	sbc	r27, r27
    11e6:	dc 01       	movw	r26, r24
    11e8:	99 27       	eor	r25, r25
    11ea:	88 27       	eor	r24, r24
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	84 2b       	or	r24, r20
    11f2:	95 2b       	or	r25, r21
    11f4:	a6 2b       	or	r26, r22
    11f6:	b7 2b       	or	r27, r23
    11f8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    11fc:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1200:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1204:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1208:	b0 9b       	sbis	0x16, 0	; 22
    120a:	1b c0       	rjmp	.+54     	; 0x1242 <__vector_11+0x98>
    120c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1210:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1214:	c9 01       	movw	r24, r18
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	09 2e       	mov	r0, r25
    121a:	00 0c       	add	r0, r0
    121c:	aa 0b       	sbc	r26, r26
    121e:	bb 0b       	sbc	r27, r27
    1220:	dc 01       	movw	r26, r24
    1222:	99 27       	eor	r25, r25
    1224:	88 27       	eor	r24, r24
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	84 2b       	or	r24, r20
    122c:	95 2b       	or	r25, r21
    122e:	a6 2b       	or	r26, r22
    1230:	b7 2b       	or	r27, r23
    1232:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1236:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    123a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    123e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1242:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0xc>
    1246:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0xd>
    124a:	30 97       	sbiw	r30, 0x00	; 0
    124c:	39 f0       	breq	.+14     	; 0x125c <__vector_11+0xb2>
    124e:	66 e0       	ldi	r22, 0x06	; 6
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0xc>
    1256:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0xd>
    125a:	09 95       	icall
    125c:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <__vector_12>:
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	2f 93       	push	r18
    128e:	3f 93       	push	r19
    1290:	4f 93       	push	r20
    1292:	5f 93       	push	r21
    1294:	6f 93       	push	r22
    1296:	7f 93       	push	r23
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	af 93       	push	r26
    129e:	bf 93       	push	r27
    12a0:	ef 93       	push	r30
    12a2:	ff 93       	push	r31
    12a4:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    12a8:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    12ac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12b0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12b4:	c9 01       	movw	r24, r18
    12b6:	03 2e       	mov	r0, r19
    12b8:	00 0c       	add	r0, r0
    12ba:	aa 0b       	sbc	r26, r26
    12bc:	bb 0b       	sbc	r27, r27
    12be:	dc 01       	movw	r26, r24
    12c0:	99 27       	eor	r25, r25
    12c2:	88 27       	eor	r24, r24
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	84 2b       	or	r24, r20
    12ca:	95 2b       	or	r25, r21
    12cc:	a6 2b       	or	r26, r22
    12ce:	b7 2b       	or	r27, r23
    12d0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    12d4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    12d8:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    12dc:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    12e0:	b0 9b       	sbis	0x16, 0	; 22
    12e2:	1b c0       	rjmp	.+54     	; 0x131a <__vector_12+0x98>
    12e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ec:	c9 01       	movw	r24, r18
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	09 2e       	mov	r0, r25
    12f2:	00 0c       	add	r0, r0
    12f4:	aa 0b       	sbc	r26, r26
    12f6:	bb 0b       	sbc	r27, r27
    12f8:	dc 01       	movw	r26, r24
    12fa:	99 27       	eor	r25, r25
    12fc:	88 27       	eor	r24, r24
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	84 2b       	or	r24, r20
    1304:	95 2b       	or	r25, r21
    1306:	a6 2b       	or	r26, r22
    1308:	b7 2b       	or	r27, r23
    130a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    130e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1312:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1316:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    131a:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0xe>
    131e:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0xf>
    1322:	30 97       	sbiw	r30, 0x00	; 0
    1324:	39 f0       	breq	.+14     	; 0x1334 <__vector_12+0xb2>
    1326:	67 e0       	ldi	r22, 0x07	; 7
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0xe>
    132e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0xf>
    1332:	09 95       	icall
    1334:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    1338:	ff 91       	pop	r31
    133a:	ef 91       	pop	r30
    133c:	bf 91       	pop	r27
    133e:	af 91       	pop	r26
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	7f 91       	pop	r23
    1346:	6f 91       	pop	r22
    1348:	5f 91       	pop	r21
    134a:	4f 91       	pop	r20
    134c:	3f 91       	pop	r19
    134e:	2f 91       	pop	r18
    1350:	0f 90       	pop	r0
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	0f 90       	pop	r0
    1356:	1f 90       	pop	r1
    1358:	18 95       	reti

0000135a <__vector_13>:
    135a:	1f 92       	push	r1
    135c:	0f 92       	push	r0
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	0f 92       	push	r0
    1362:	11 24       	eor	r1, r1
    1364:	2f 93       	push	r18
    1366:	3f 93       	push	r19
    1368:	4f 93       	push	r20
    136a:	5f 93       	push	r21
    136c:	6f 93       	push	r22
    136e:	7f 93       	push	r23
    1370:	8f 93       	push	r24
    1372:	9f 93       	push	r25
    1374:	af 93       	push	r26
    1376:	bf 93       	push	r27
    1378:	ef 93       	push	r30
    137a:	ff 93       	push	r31
    137c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1380:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1384:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1388:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    138c:	c9 01       	movw	r24, r18
    138e:	03 2e       	mov	r0, r19
    1390:	00 0c       	add	r0, r0
    1392:	aa 0b       	sbc	r26, r26
    1394:	bb 0b       	sbc	r27, r27
    1396:	dc 01       	movw	r26, r24
    1398:	99 27       	eor	r25, r25
    139a:	88 27       	eor	r24, r24
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	84 2b       	or	r24, r20
    13a2:	95 2b       	or	r25, r21
    13a4:	a6 2b       	or	r26, r22
    13a6:	b7 2b       	or	r27, r23
    13a8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    13ac:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    13b0:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    13b4:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    13b8:	b0 9b       	sbis	0x16, 0	; 22
    13ba:	1b c0       	rjmp	.+54     	; 0x13f2 <__vector_13+0x98>
    13bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13c4:	c9 01       	movw	r24, r18
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	09 2e       	mov	r0, r25
    13ca:	00 0c       	add	r0, r0
    13cc:	aa 0b       	sbc	r26, r26
    13ce:	bb 0b       	sbc	r27, r27
    13d0:	dc 01       	movw	r26, r24
    13d2:	99 27       	eor	r25, r25
    13d4:	88 27       	eor	r24, r24
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	84 2b       	or	r24, r20
    13dc:	95 2b       	or	r25, r21
    13de:	a6 2b       	or	r26, r22
    13e0:	b7 2b       	or	r27, r23
    13e2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    13e6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    13ea:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    13ee:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    13f2:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x10>
    13f6:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x11>
    13fa:	30 97       	sbiw	r30, 0x00	; 0
    13fc:	39 f0       	breq	.+14     	; 0x140c <__vector_13+0xb2>
    13fe:	68 e0       	ldi	r22, 0x08	; 8
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x10>
    1406:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x11>
    140a:	09 95       	icall
    140c:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    1410:	ff 91       	pop	r31
    1412:	ef 91       	pop	r30
    1414:	bf 91       	pop	r27
    1416:	af 91       	pop	r26
    1418:	9f 91       	pop	r25
    141a:	8f 91       	pop	r24
    141c:	7f 91       	pop	r23
    141e:	6f 91       	pop	r22
    1420:	5f 91       	pop	r21
    1422:	4f 91       	pop	r20
    1424:	3f 91       	pop	r19
    1426:	2f 91       	pop	r18
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	0f 90       	pop	r0
    142e:	1f 90       	pop	r1
    1430:	18 95       	reti

00001432 <__vector_14>:
    1432:	1f 92       	push	r1
    1434:	0f 92       	push	r0
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	0f 92       	push	r0
    143a:	11 24       	eor	r1, r1
    143c:	2f 93       	push	r18
    143e:	3f 93       	push	r19
    1440:	4f 93       	push	r20
    1442:	5f 93       	push	r21
    1444:	6f 93       	push	r22
    1446:	7f 93       	push	r23
    1448:	8f 93       	push	r24
    144a:	9f 93       	push	r25
    144c:	af 93       	push	r26
    144e:	bf 93       	push	r27
    1450:	ef 93       	push	r30
    1452:	ff 93       	push	r31
    1454:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1458:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    145c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1460:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1464:	c9 01       	movw	r24, r18
    1466:	03 2e       	mov	r0, r19
    1468:	00 0c       	add	r0, r0
    146a:	aa 0b       	sbc	r26, r26
    146c:	bb 0b       	sbc	r27, r27
    146e:	dc 01       	movw	r26, r24
    1470:	99 27       	eor	r25, r25
    1472:	88 27       	eor	r24, r24
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	84 2b       	or	r24, r20
    147a:	95 2b       	or	r25, r21
    147c:	a6 2b       	or	r26, r22
    147e:	b7 2b       	or	r27, r23
    1480:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1484:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1488:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    148c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1490:	b0 9b       	sbis	0x16, 0	; 22
    1492:	1b c0       	rjmp	.+54     	; 0x14ca <__vector_14+0x98>
    1494:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1498:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    149c:	c9 01       	movw	r24, r18
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	09 2e       	mov	r0, r25
    14a2:	00 0c       	add	r0, r0
    14a4:	aa 0b       	sbc	r26, r26
    14a6:	bb 0b       	sbc	r27, r27
    14a8:	dc 01       	movw	r26, r24
    14aa:	99 27       	eor	r25, r25
    14ac:	88 27       	eor	r24, r24
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	84 2b       	or	r24, r20
    14b4:	95 2b       	or	r25, r21
    14b6:	a6 2b       	or	r26, r22
    14b8:	b7 2b       	or	r27, r23
    14ba:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    14be:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    14c2:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    14c6:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    14ca:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x12>
    14ce:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x13>
    14d2:	30 97       	sbiw	r30, 0x00	; 0
    14d4:	39 f0       	breq	.+14     	; 0x14e4 <__vector_14+0xb2>
    14d6:	69 e0       	ldi	r22, 0x09	; 9
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x12>
    14de:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x13>
    14e2:	09 95       	icall
    14e4:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	bf 91       	pop	r27
    14ee:	af 91       	pop	r26
    14f0:	9f 91       	pop	r25
    14f2:	8f 91       	pop	r24
    14f4:	7f 91       	pop	r23
    14f6:	6f 91       	pop	r22
    14f8:	5f 91       	pop	r21
    14fa:	4f 91       	pop	r20
    14fc:	3f 91       	pop	r19
    14fe:	2f 91       	pop	r18
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <__vector_15>:
    150a:	1f 92       	push	r1
    150c:	0f 92       	push	r0
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	0f 92       	push	r0
    1512:	11 24       	eor	r1, r1
    1514:	2f 93       	push	r18
    1516:	3f 93       	push	r19
    1518:	4f 93       	push	r20
    151a:	5f 93       	push	r21
    151c:	6f 93       	push	r22
    151e:	7f 93       	push	r23
    1520:	8f 93       	push	r24
    1522:	9f 93       	push	r25
    1524:	af 93       	push	r26
    1526:	bf 93       	push	r27
    1528:	ef 93       	push	r30
    152a:	ff 93       	push	r31
    152c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1530:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1534:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1538:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    153c:	c9 01       	movw	r24, r18
    153e:	03 2e       	mov	r0, r19
    1540:	00 0c       	add	r0, r0
    1542:	aa 0b       	sbc	r26, r26
    1544:	bb 0b       	sbc	r27, r27
    1546:	dc 01       	movw	r26, r24
    1548:	99 27       	eor	r25, r25
    154a:	88 27       	eor	r24, r24
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	84 2b       	or	r24, r20
    1552:	95 2b       	or	r25, r21
    1554:	a6 2b       	or	r26, r22
    1556:	b7 2b       	or	r27, r23
    1558:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    155c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1560:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1564:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1568:	b0 9b       	sbis	0x16, 0	; 22
    156a:	1b c0       	rjmp	.+54     	; 0x15a2 <__vector_15+0x98>
    156c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1570:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1574:	c9 01       	movw	r24, r18
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	09 2e       	mov	r0, r25
    157a:	00 0c       	add	r0, r0
    157c:	aa 0b       	sbc	r26, r26
    157e:	bb 0b       	sbc	r27, r27
    1580:	dc 01       	movw	r26, r24
    1582:	99 27       	eor	r25, r25
    1584:	88 27       	eor	r24, r24
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	84 2b       	or	r24, r20
    158c:	95 2b       	or	r25, r21
    158e:	a6 2b       	or	r26, r22
    1590:	b7 2b       	or	r27, r23
    1592:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1596:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    159a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    159e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    15a2:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0x14>
    15a6:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x15>
    15aa:	30 97       	sbiw	r30, 0x00	; 0
    15ac:	39 f0       	breq	.+14     	; 0x15bc <__vector_15+0xb2>
    15ae:	6a e0       	ldi	r22, 0x0A	; 10
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0x14>
    15b6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x15>
    15ba:	09 95       	icall
    15bc:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    15c0:	ff 91       	pop	r31
    15c2:	ef 91       	pop	r30
    15c4:	bf 91       	pop	r27
    15c6:	af 91       	pop	r26
    15c8:	9f 91       	pop	r25
    15ca:	8f 91       	pop	r24
    15cc:	7f 91       	pop	r23
    15ce:	6f 91       	pop	r22
    15d0:	5f 91       	pop	r21
    15d2:	4f 91       	pop	r20
    15d4:	3f 91       	pop	r19
    15d6:	2f 91       	pop	r18
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	0f 90       	pop	r0
    15de:	1f 90       	pop	r1
    15e0:	18 95       	reti

000015e2 <__vector_16>:
    15e2:	1f 92       	push	r1
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	2f 93       	push	r18
    15ee:	3f 93       	push	r19
    15f0:	4f 93       	push	r20
    15f2:	5f 93       	push	r21
    15f4:	6f 93       	push	r22
    15f6:	7f 93       	push	r23
    15f8:	8f 93       	push	r24
    15fa:	9f 93       	push	r25
    15fc:	af 93       	push	r26
    15fe:	bf 93       	push	r27
    1600:	ef 93       	push	r30
    1602:	ff 93       	push	r31
    1604:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1608:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    160c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1610:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1614:	c9 01       	movw	r24, r18
    1616:	03 2e       	mov	r0, r19
    1618:	00 0c       	add	r0, r0
    161a:	aa 0b       	sbc	r26, r26
    161c:	bb 0b       	sbc	r27, r27
    161e:	dc 01       	movw	r26, r24
    1620:	99 27       	eor	r25, r25
    1622:	88 27       	eor	r24, r24
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	84 2b       	or	r24, r20
    162a:	95 2b       	or	r25, r21
    162c:	a6 2b       	or	r26, r22
    162e:	b7 2b       	or	r27, r23
    1630:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1634:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1638:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    163c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1640:	b0 9b       	sbis	0x16, 0	; 22
    1642:	1b c0       	rjmp	.+54     	; 0x167a <__vector_16+0x98>
    1644:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1648:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    164c:	c9 01       	movw	r24, r18
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	09 2e       	mov	r0, r25
    1652:	00 0c       	add	r0, r0
    1654:	aa 0b       	sbc	r26, r26
    1656:	bb 0b       	sbc	r27, r27
    1658:	dc 01       	movw	r26, r24
    165a:	99 27       	eor	r25, r25
    165c:	88 27       	eor	r24, r24
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	84 2b       	or	r24, r20
    1664:	95 2b       	or	r25, r21
    1666:	a6 2b       	or	r26, r22
    1668:	b7 2b       	or	r27, r23
    166a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    166e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1672:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1676:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    167a:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x16>
    167e:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x17>
    1682:	30 97       	sbiw	r30, 0x00	; 0
    1684:	39 f0       	breq	.+14     	; 0x1694 <__vector_16+0xb2>
    1686:	6b e0       	ldi	r22, 0x0B	; 11
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x16>
    168e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x17>
    1692:	09 95       	icall
    1694:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    1698:	ff 91       	pop	r31
    169a:	ef 91       	pop	r30
    169c:	bf 91       	pop	r27
    169e:	af 91       	pop	r26
    16a0:	9f 91       	pop	r25
    16a2:	8f 91       	pop	r24
    16a4:	7f 91       	pop	r23
    16a6:	6f 91       	pop	r22
    16a8:	5f 91       	pop	r21
    16aa:	4f 91       	pop	r20
    16ac:	3f 91       	pop	r19
    16ae:	2f 91       	pop	r18
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <__vector_17>:
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	2f 93       	push	r18
    16c6:	3f 93       	push	r19
    16c8:	4f 93       	push	r20
    16ca:	5f 93       	push	r21
    16cc:	6f 93       	push	r22
    16ce:	7f 93       	push	r23
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	af 93       	push	r26
    16d6:	bf 93       	push	r27
    16d8:	ef 93       	push	r30
    16da:	ff 93       	push	r31
    16dc:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    16e0:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    16e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16ec:	c9 01       	movw	r24, r18
    16ee:	03 2e       	mov	r0, r19
    16f0:	00 0c       	add	r0, r0
    16f2:	aa 0b       	sbc	r26, r26
    16f4:	bb 0b       	sbc	r27, r27
    16f6:	dc 01       	movw	r26, r24
    16f8:	99 27       	eor	r25, r25
    16fa:	88 27       	eor	r24, r24
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	84 2b       	or	r24, r20
    1702:	95 2b       	or	r25, r21
    1704:	a6 2b       	or	r26, r22
    1706:	b7 2b       	or	r27, r23
    1708:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    170c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1710:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1714:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1718:	b0 9b       	sbis	0x16, 0	; 22
    171a:	1b c0       	rjmp	.+54     	; 0x1752 <__vector_17+0x98>
    171c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1720:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1724:	c9 01       	movw	r24, r18
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	09 2e       	mov	r0, r25
    172a:	00 0c       	add	r0, r0
    172c:	aa 0b       	sbc	r26, r26
    172e:	bb 0b       	sbc	r27, r27
    1730:	dc 01       	movw	r26, r24
    1732:	99 27       	eor	r25, r25
    1734:	88 27       	eor	r24, r24
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	84 2b       	or	r24, r20
    173c:	95 2b       	or	r25, r21
    173e:	a6 2b       	or	r26, r22
    1740:	b7 2b       	or	r27, r23
    1742:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1746:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    174a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    174e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1752:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x18>
    1756:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x19>
    175a:	30 97       	sbiw	r30, 0x00	; 0
    175c:	39 f0       	breq	.+14     	; 0x176c <__vector_17+0xb2>
    175e:	6c e0       	ldi	r22, 0x0C	; 12
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x18>
    1766:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x19>
    176a:	09 95       	icall
    176c:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	bf 91       	pop	r27
    1776:	af 91       	pop	r26
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	7f 91       	pop	r23
    177e:	6f 91       	pop	r22
    1780:	5f 91       	pop	r21
    1782:	4f 91       	pop	r20
    1784:	3f 91       	pop	r19
    1786:	2f 91       	pop	r18
    1788:	0f 90       	pop	r0
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	0f 90       	pop	r0
    178e:	1f 90       	pop	r1
    1790:	18 95       	reti

00001792 <__vector_18>:
    1792:	1f 92       	push	r1
    1794:	0f 92       	push	r0
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	0f 92       	push	r0
    179a:	11 24       	eor	r1, r1
    179c:	2f 93       	push	r18
    179e:	3f 93       	push	r19
    17a0:	4f 93       	push	r20
    17a2:	5f 93       	push	r21
    17a4:	6f 93       	push	r22
    17a6:	7f 93       	push	r23
    17a8:	8f 93       	push	r24
    17aa:	9f 93       	push	r25
    17ac:	af 93       	push	r26
    17ae:	bf 93       	push	r27
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31
    17b4:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    17b8:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    17bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17c4:	c9 01       	movw	r24, r18
    17c6:	03 2e       	mov	r0, r19
    17c8:	00 0c       	add	r0, r0
    17ca:	aa 0b       	sbc	r26, r26
    17cc:	bb 0b       	sbc	r27, r27
    17ce:	dc 01       	movw	r26, r24
    17d0:	99 27       	eor	r25, r25
    17d2:	88 27       	eor	r24, r24
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	84 2b       	or	r24, r20
    17da:	95 2b       	or	r25, r21
    17dc:	a6 2b       	or	r26, r22
    17de:	b7 2b       	or	r27, r23
    17e0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    17e4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    17e8:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    17ec:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    17f0:	b0 9b       	sbis	0x16, 0	; 22
    17f2:	1b c0       	rjmp	.+54     	; 0x182a <__vector_18+0x98>
    17f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17fc:	c9 01       	movw	r24, r18
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	09 2e       	mov	r0, r25
    1802:	00 0c       	add	r0, r0
    1804:	aa 0b       	sbc	r26, r26
    1806:	bb 0b       	sbc	r27, r27
    1808:	dc 01       	movw	r26, r24
    180a:	99 27       	eor	r25, r25
    180c:	88 27       	eor	r24, r24
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	84 2b       	or	r24, r20
    1814:	95 2b       	or	r25, r21
    1816:	a6 2b       	or	r26, r22
    1818:	b7 2b       	or	r27, r23
    181a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    181e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1822:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1826:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    182a:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x1a>
    182e:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x1b>
    1832:	30 97       	sbiw	r30, 0x00	; 0
    1834:	39 f0       	breq	.+14     	; 0x1844 <__vector_18+0xb2>
    1836:	6d e0       	ldi	r22, 0x0D	; 13
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x1a>
    183e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x1b>
    1842:	09 95       	icall
    1844:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    1848:	ff 91       	pop	r31
    184a:	ef 91       	pop	r30
    184c:	bf 91       	pop	r27
    184e:	af 91       	pop	r26
    1850:	9f 91       	pop	r25
    1852:	8f 91       	pop	r24
    1854:	7f 91       	pop	r23
    1856:	6f 91       	pop	r22
    1858:	5f 91       	pop	r21
    185a:	4f 91       	pop	r20
    185c:	3f 91       	pop	r19
    185e:	2f 91       	pop	r18
    1860:	0f 90       	pop	r0
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	0f 90       	pop	r0
    1866:	1f 90       	pop	r1
    1868:	18 95       	reti

0000186a <__vector_19>:
    186a:	1f 92       	push	r1
    186c:	0f 92       	push	r0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	0f 92       	push	r0
    1872:	11 24       	eor	r1, r1
    1874:	2f 93       	push	r18
    1876:	3f 93       	push	r19
    1878:	4f 93       	push	r20
    187a:	5f 93       	push	r21
    187c:	6f 93       	push	r22
    187e:	7f 93       	push	r23
    1880:	8f 93       	push	r24
    1882:	9f 93       	push	r25
    1884:	af 93       	push	r26
    1886:	bf 93       	push	r27
    1888:	ef 93       	push	r30
    188a:	ff 93       	push	r31
    188c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1890:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1894:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1898:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    189c:	c9 01       	movw	r24, r18
    189e:	03 2e       	mov	r0, r19
    18a0:	00 0c       	add	r0, r0
    18a2:	aa 0b       	sbc	r26, r26
    18a4:	bb 0b       	sbc	r27, r27
    18a6:	dc 01       	movw	r26, r24
    18a8:	99 27       	eor	r25, r25
    18aa:	88 27       	eor	r24, r24
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	84 2b       	or	r24, r20
    18b2:	95 2b       	or	r25, r21
    18b4:	a6 2b       	or	r26, r22
    18b6:	b7 2b       	or	r27, r23
    18b8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    18bc:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    18c0:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    18c4:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    18c8:	b0 9b       	sbis	0x16, 0	; 22
    18ca:	1b c0       	rjmp	.+54     	; 0x1902 <__vector_19+0x98>
    18cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18d4:	c9 01       	movw	r24, r18
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	09 2e       	mov	r0, r25
    18da:	00 0c       	add	r0, r0
    18dc:	aa 0b       	sbc	r26, r26
    18de:	bb 0b       	sbc	r27, r27
    18e0:	dc 01       	movw	r26, r24
    18e2:	99 27       	eor	r25, r25
    18e4:	88 27       	eor	r24, r24
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	84 2b       	or	r24, r20
    18ec:	95 2b       	or	r25, r21
    18ee:	a6 2b       	or	r26, r22
    18f0:	b7 2b       	or	r27, r23
    18f2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    18f6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    18fa:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    18fe:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1902:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x1c>
    1906:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x1d>
    190a:	30 97       	sbiw	r30, 0x00	; 0
    190c:	39 f0       	breq	.+14     	; 0x191c <__vector_19+0xb2>
    190e:	6e e0       	ldi	r22, 0x0E	; 14
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x1c>
    1916:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x1d>
    191a:	09 95       	icall
    191c:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <__vector_20>:
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	0f 92       	push	r0
    194a:	11 24       	eor	r1, r1
    194c:	2f 93       	push	r18
    194e:	3f 93       	push	r19
    1950:	4f 93       	push	r20
    1952:	5f 93       	push	r21
    1954:	6f 93       	push	r22
    1956:	7f 93       	push	r23
    1958:	8f 93       	push	r24
    195a:	9f 93       	push	r25
    195c:	af 93       	push	r26
    195e:	bf 93       	push	r27
    1960:	ef 93       	push	r30
    1962:	ff 93       	push	r31
    1964:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1968:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    196c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1970:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1974:	c9 01       	movw	r24, r18
    1976:	03 2e       	mov	r0, r19
    1978:	00 0c       	add	r0, r0
    197a:	aa 0b       	sbc	r26, r26
    197c:	bb 0b       	sbc	r27, r27
    197e:	dc 01       	movw	r26, r24
    1980:	99 27       	eor	r25, r25
    1982:	88 27       	eor	r24, r24
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	84 2b       	or	r24, r20
    198a:	95 2b       	or	r25, r21
    198c:	a6 2b       	or	r26, r22
    198e:	b7 2b       	or	r27, r23
    1990:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1994:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1998:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    199c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    19a0:	b0 9b       	sbis	0x16, 0	; 22
    19a2:	1b c0       	rjmp	.+54     	; 0x19da <__vector_20+0x98>
    19a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19ac:	c9 01       	movw	r24, r18
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	09 2e       	mov	r0, r25
    19b2:	00 0c       	add	r0, r0
    19b4:	aa 0b       	sbc	r26, r26
    19b6:	bb 0b       	sbc	r27, r27
    19b8:	dc 01       	movw	r26, r24
    19ba:	99 27       	eor	r25, r25
    19bc:	88 27       	eor	r24, r24
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	84 2b       	or	r24, r20
    19c4:	95 2b       	or	r25, r21
    19c6:	a6 2b       	or	r26, r22
    19c8:	b7 2b       	or	r27, r23
    19ca:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    19ce:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    19d2:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    19d6:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    19da:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x1e>
    19de:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x1f>
    19e2:	30 97       	sbiw	r30, 0x00	; 0
    19e4:	39 f0       	breq	.+14     	; 0x19f4 <__vector_20+0xb2>
    19e6:	6f e0       	ldi	r22, 0x0F	; 15
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x1e>
    19ee:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x1f>
    19f2:	09 95       	icall
    19f4:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    19f8:	ff 91       	pop	r31
    19fa:	ef 91       	pop	r30
    19fc:	bf 91       	pop	r27
    19fe:	af 91       	pop	r26
    1a00:	9f 91       	pop	r25
    1a02:	8f 91       	pop	r24
    1a04:	7f 91       	pop	r23
    1a06:	6f 91       	pop	r22
    1a08:	5f 91       	pop	r21
    1a0a:	4f 91       	pop	r20
    1a0c:	3f 91       	pop	r19
    1a0e:	2f 91       	pop	r18
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <__vector_21>:
    1a1a:	1f 92       	push	r1
    1a1c:	0f 92       	push	r0
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	0f 92       	push	r0
    1a22:	11 24       	eor	r1, r1
    1a24:	2f 93       	push	r18
    1a26:	3f 93       	push	r19
    1a28:	4f 93       	push	r20
    1a2a:	5f 93       	push	r21
    1a2c:	6f 93       	push	r22
    1a2e:	7f 93       	push	r23
    1a30:	8f 93       	push	r24
    1a32:	9f 93       	push	r25
    1a34:	af 93       	push	r26
    1a36:	bf 93       	push	r27
    1a38:	ef 93       	push	r30
    1a3a:	ff 93       	push	r31
    1a3c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1a40:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1a44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a4c:	c9 01       	movw	r24, r18
    1a4e:	03 2e       	mov	r0, r19
    1a50:	00 0c       	add	r0, r0
    1a52:	aa 0b       	sbc	r26, r26
    1a54:	bb 0b       	sbc	r27, r27
    1a56:	dc 01       	movw	r26, r24
    1a58:	99 27       	eor	r25, r25
    1a5a:	88 27       	eor	r24, r24
    1a5c:	60 e0       	ldi	r22, 0x00	; 0
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	84 2b       	or	r24, r20
    1a62:	95 2b       	or	r25, r21
    1a64:	a6 2b       	or	r26, r22
    1a66:	b7 2b       	or	r27, r23
    1a68:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1a6c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1a70:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1a74:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1a78:	b0 9b       	sbis	0x16, 0	; 22
    1a7a:	1b c0       	rjmp	.+54     	; 0x1ab2 <__vector_21+0x98>
    1a7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a84:	c9 01       	movw	r24, r18
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	09 2e       	mov	r0, r25
    1a8a:	00 0c       	add	r0, r0
    1a8c:	aa 0b       	sbc	r26, r26
    1a8e:	bb 0b       	sbc	r27, r27
    1a90:	dc 01       	movw	r26, r24
    1a92:	99 27       	eor	r25, r25
    1a94:	88 27       	eor	r24, r24
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	84 2b       	or	r24, r20
    1a9c:	95 2b       	or	r25, r21
    1a9e:	a6 2b       	or	r26, r22
    1aa0:	b7 2b       	or	r27, r23
    1aa2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1aa6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1aaa:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1aae:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1ab2:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x20>
    1ab6:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x21>
    1aba:	30 97       	sbiw	r30, 0x00	; 0
    1abc:	39 f0       	breq	.+14     	; 0x1acc <__vector_21+0xb2>
    1abe:	60 e1       	ldi	r22, 0x10	; 16
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x20>
    1ac6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x21>
    1aca:	09 95       	icall
    1acc:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    1ad0:	ff 91       	pop	r31
    1ad2:	ef 91       	pop	r30
    1ad4:	bf 91       	pop	r27
    1ad6:	af 91       	pop	r26
    1ad8:	9f 91       	pop	r25
    1ada:	8f 91       	pop	r24
    1adc:	7f 91       	pop	r23
    1ade:	6f 91       	pop	r22
    1ae0:	5f 91       	pop	r21
    1ae2:	4f 91       	pop	r20
    1ae4:	3f 91       	pop	r19
    1ae6:	2f 91       	pop	r18
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	0f 90       	pop	r0
    1aee:	1f 90       	pop	r1
    1af0:	18 95       	reti

00001af2 <__vector_22>:
    1af2:	1f 92       	push	r1
    1af4:	0f 92       	push	r0
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	0f 92       	push	r0
    1afa:	11 24       	eor	r1, r1
    1afc:	2f 93       	push	r18
    1afe:	3f 93       	push	r19
    1b00:	4f 93       	push	r20
    1b02:	5f 93       	push	r21
    1b04:	6f 93       	push	r22
    1b06:	7f 93       	push	r23
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	af 93       	push	r26
    1b0e:	bf 93       	push	r27
    1b10:	ef 93       	push	r30
    1b12:	ff 93       	push	r31
    1b14:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1b18:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1b1c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b20:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b24:	c9 01       	movw	r24, r18
    1b26:	03 2e       	mov	r0, r19
    1b28:	00 0c       	add	r0, r0
    1b2a:	aa 0b       	sbc	r26, r26
    1b2c:	bb 0b       	sbc	r27, r27
    1b2e:	dc 01       	movw	r26, r24
    1b30:	99 27       	eor	r25, r25
    1b32:	88 27       	eor	r24, r24
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	84 2b       	or	r24, r20
    1b3a:	95 2b       	or	r25, r21
    1b3c:	a6 2b       	or	r26, r22
    1b3e:	b7 2b       	or	r27, r23
    1b40:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1b44:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1b48:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1b4c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1b50:	b0 9b       	sbis	0x16, 0	; 22
    1b52:	1b c0       	rjmp	.+54     	; 0x1b8a <__vector_22+0x98>
    1b54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b5c:	c9 01       	movw	r24, r18
    1b5e:	01 96       	adiw	r24, 0x01	; 1
    1b60:	09 2e       	mov	r0, r25
    1b62:	00 0c       	add	r0, r0
    1b64:	aa 0b       	sbc	r26, r26
    1b66:	bb 0b       	sbc	r27, r27
    1b68:	dc 01       	movw	r26, r24
    1b6a:	99 27       	eor	r25, r25
    1b6c:	88 27       	eor	r24, r24
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	84 2b       	or	r24, r20
    1b74:	95 2b       	or	r25, r21
    1b76:	a6 2b       	or	r26, r22
    1b78:	b7 2b       	or	r27, r23
    1b7a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1b7e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1b82:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1b86:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1b8a:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x22>
    1b8e:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x23>
    1b92:	30 97       	sbiw	r30, 0x00	; 0
    1b94:	39 f0       	breq	.+14     	; 0x1ba4 <__vector_22+0xb2>
    1b96:	61 e1       	ldi	r22, 0x11	; 17
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x22>
    1b9e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x23>
    1ba2:	09 95       	icall
    1ba4:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    1ba8:	ff 91       	pop	r31
    1baa:	ef 91       	pop	r30
    1bac:	bf 91       	pop	r27
    1bae:	af 91       	pop	r26
    1bb0:	9f 91       	pop	r25
    1bb2:	8f 91       	pop	r24
    1bb4:	7f 91       	pop	r23
    1bb6:	6f 91       	pop	r22
    1bb8:	5f 91       	pop	r21
    1bba:	4f 91       	pop	r20
    1bbc:	3f 91       	pop	r19
    1bbe:	2f 91       	pop	r18
    1bc0:	0f 90       	pop	r0
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	0f 90       	pop	r0
    1bc6:	1f 90       	pop	r1
    1bc8:	18 95       	reti

00001bca <enqueueByDeadline>:
    1bca:	ef 92       	push	r14
    1bcc:	ff 92       	push	r15
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	7b 01       	movw	r14, r22
    1bd8:	eb 01       	movw	r28, r22
    1bda:	a8 81       	ld	r26, Y
    1bdc:	b9 81       	ldd	r27, Y+1	; 0x01
    1bde:	10 97       	sbiw	r26, 0x00	; 0
    1be0:	61 f1       	breq	.+88     	; 0x1c3a <enqueueByDeadline+0x70>
    1be2:	fc 01       	movw	r30, r24
    1be4:	06 81       	ldd	r16, Z+6	; 0x06
    1be6:	17 81       	ldd	r17, Z+7	; 0x07
    1be8:	20 85       	ldd	r18, Z+8	; 0x08
    1bea:	31 85       	ldd	r19, Z+9	; 0x09
    1bec:	16 96       	adiw	r26, 0x06	; 6
    1bee:	4d 91       	ld	r20, X+
    1bf0:	5d 91       	ld	r21, X+
    1bf2:	6d 91       	ld	r22, X+
    1bf4:	7c 91       	ld	r23, X
    1bf6:	19 97       	sbiw	r26, 0x09	; 9
    1bf8:	04 17       	cp	r16, r20
    1bfa:	15 07       	cpc	r17, r21
    1bfc:	26 07       	cpc	r18, r22
    1bfe:	37 07       	cpc	r19, r23
    1c00:	14 f4       	brge	.+4      	; 0x1c06 <enqueueByDeadline+0x3c>
    1c02:	1b c0       	rjmp	.+54     	; 0x1c3a <enqueueByDeadline+0x70>
    1c04:	df 01       	movw	r26, r30
    1c06:	ed 91       	ld	r30, X+
    1c08:	fc 91       	ld	r31, X
    1c0a:	11 97       	sbiw	r26, 0x01	; 1
    1c0c:	30 97       	sbiw	r30, 0x00	; 0
    1c0e:	49 f0       	breq	.+18     	; 0x1c22 <enqueueByDeadline+0x58>
    1c10:	46 81       	ldd	r20, Z+6	; 0x06
    1c12:	57 81       	ldd	r21, Z+7	; 0x07
    1c14:	60 85       	ldd	r22, Z+8	; 0x08
    1c16:	71 85       	ldd	r23, Z+9	; 0x09
    1c18:	04 17       	cp	r16, r20
    1c1a:	15 07       	cpc	r17, r21
    1c1c:	26 07       	cpc	r18, r22
    1c1e:	37 07       	cpc	r19, r23
    1c20:	8c f7       	brge	.-30     	; 0x1c04 <enqueueByDeadline+0x3a>
    1c22:	ec 01       	movw	r28, r24
    1c24:	f9 83       	std	Y+1, r31	; 0x01
    1c26:	e8 83       	st	Y, r30
    1c28:	10 97       	sbiw	r26, 0x00	; 0
    1c2a:	21 f4       	brne	.+8      	; 0x1c34 <enqueueByDeadline+0x6a>
    1c2c:	f7 01       	movw	r30, r14
    1c2e:	91 83       	std	Z+1, r25	; 0x01
    1c30:	80 83       	st	Z, r24
    1c32:	07 c0       	rjmp	.+14     	; 0x1c42 <enqueueByDeadline+0x78>
    1c34:	8d 93       	st	X+, r24
    1c36:	9c 93       	st	X, r25
    1c38:	04 c0       	rjmp	.+8      	; 0x1c42 <enqueueByDeadline+0x78>
    1c3a:	ec 01       	movw	r28, r24
    1c3c:	b9 83       	std	Y+1, r27	; 0x01
    1c3e:	a8 83       	st	Y, r26
    1c40:	f5 cf       	rjmp	.-22     	; 0x1c2c <enqueueByDeadline+0x62>
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	ff 90       	pop	r15
    1c4c:	ef 90       	pop	r14
    1c4e:	08 95       	ret

00001c50 <enqueueByBaseline>:
    1c50:	ef 92       	push	r14
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
    1c5c:	7b 01       	movw	r14, r22
    1c5e:	eb 01       	movw	r28, r22
    1c60:	a8 81       	ld	r26, Y
    1c62:	b9 81       	ldd	r27, Y+1	; 0x01
    1c64:	10 97       	sbiw	r26, 0x00	; 0
    1c66:	61 f1       	breq	.+88     	; 0x1cc0 <enqueueByBaseline+0x70>
    1c68:	fc 01       	movw	r30, r24
    1c6a:	02 81       	ldd	r16, Z+2	; 0x02
    1c6c:	13 81       	ldd	r17, Z+3	; 0x03
    1c6e:	24 81       	ldd	r18, Z+4	; 0x04
    1c70:	35 81       	ldd	r19, Z+5	; 0x05
    1c72:	12 96       	adiw	r26, 0x02	; 2
    1c74:	4d 91       	ld	r20, X+
    1c76:	5d 91       	ld	r21, X+
    1c78:	6d 91       	ld	r22, X+
    1c7a:	7c 91       	ld	r23, X
    1c7c:	15 97       	sbiw	r26, 0x05	; 5
    1c7e:	04 17       	cp	r16, r20
    1c80:	15 07       	cpc	r17, r21
    1c82:	26 07       	cpc	r18, r22
    1c84:	37 07       	cpc	r19, r23
    1c86:	14 f4       	brge	.+4      	; 0x1c8c <enqueueByBaseline+0x3c>
    1c88:	1b c0       	rjmp	.+54     	; 0x1cc0 <enqueueByBaseline+0x70>
    1c8a:	df 01       	movw	r26, r30
    1c8c:	ed 91       	ld	r30, X+
    1c8e:	fc 91       	ld	r31, X
    1c90:	11 97       	sbiw	r26, 0x01	; 1
    1c92:	30 97       	sbiw	r30, 0x00	; 0
    1c94:	49 f0       	breq	.+18     	; 0x1ca8 <enqueueByBaseline+0x58>
    1c96:	42 81       	ldd	r20, Z+2	; 0x02
    1c98:	53 81       	ldd	r21, Z+3	; 0x03
    1c9a:	64 81       	ldd	r22, Z+4	; 0x04
    1c9c:	75 81       	ldd	r23, Z+5	; 0x05
    1c9e:	04 17       	cp	r16, r20
    1ca0:	15 07       	cpc	r17, r21
    1ca2:	26 07       	cpc	r18, r22
    1ca4:	37 07       	cpc	r19, r23
    1ca6:	8c f7       	brge	.-30     	; 0x1c8a <enqueueByBaseline+0x3a>
    1ca8:	ec 01       	movw	r28, r24
    1caa:	f9 83       	std	Y+1, r31	; 0x01
    1cac:	e8 83       	st	Y, r30
    1cae:	10 97       	sbiw	r26, 0x00	; 0
    1cb0:	21 f4       	brne	.+8      	; 0x1cba <enqueueByBaseline+0x6a>
    1cb2:	f7 01       	movw	r30, r14
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <enqueueByBaseline+0x78>
    1cba:	8d 93       	st	X+, r24
    1cbc:	9c 93       	st	X, r25
    1cbe:	04 c0       	rjmp	.+8      	; 0x1cc8 <enqueueByBaseline+0x78>
    1cc0:	ec 01       	movw	r28, r24
    1cc2:	b9 83       	std	Y+1, r27	; 0x01
    1cc4:	a8 83       	st	Y, r26
    1cc6:	f5 cf       	rjmp	.-22     	; 0x1cb2 <enqueueByBaseline+0x62>
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	ff 90       	pop	r15
    1cd2:	ef 90       	pop	r14
    1cd4:	08 95       	ret

00001cd6 <dequeue>:
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	ed 91       	ld	r30, X+
    1cda:	fc 91       	ld	r31, X
    1cdc:	11 97       	sbiw	r26, 0x01	; 1
    1cde:	30 97       	sbiw	r30, 0x00	; 0
    1ce0:	59 f4       	brne	.+22     	; 0x1cf8 <dequeue+0x22>
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1ce8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1cec:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	83 bf       	out	0x33, r24	; 51
    1cf4:	88 95       	sleep
    1cf6:	fd cf       	rjmp	.-6      	; 0x1cf2 <dequeue+0x1c>
    1cf8:	20 81       	ld	r18, Z
    1cfa:	31 81       	ldd	r19, Z+1	; 0x01
    1cfc:	2d 93       	st	X+, r18
    1cfe:	3c 93       	st	X, r19
    1d00:	cf 01       	movw	r24, r30
    1d02:	08 95       	ret

00001d04 <__vector_9>:
    1d04:	1f 92       	push	r1
    1d06:	0f 92       	push	r0
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	0f 92       	push	r0
    1d0c:	11 24       	eor	r1, r1
    1d0e:	2f 93       	push	r18
    1d10:	3f 93       	push	r19
    1d12:	4f 93       	push	r20
    1d14:	5f 93       	push	r21
    1d16:	6f 93       	push	r22
    1d18:	7f 93       	push	r23
    1d1a:	8f 93       	push	r24
    1d1c:	9f 93       	push	r25
    1d1e:	ef 93       	push	r30
    1d20:	ff 93       	push	r31
    1d22:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <overflows>
    1d26:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <overflows+0x1>
    1d2a:	01 96       	adiw	r24, 0x01	; 1
    1d2c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <overflows+0x1>
    1d30:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <overflows>
    1d34:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <timerQ>
    1d38:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <timerQ+0x1>
    1d3c:	30 97       	sbiw	r30, 0x00	; 0
    1d3e:	01 f1       	breq	.+64     	; 0x1d80 <__vector_9+0x7c>
    1d40:	42 81       	ldd	r20, Z+2	; 0x02
    1d42:	53 81       	ldd	r21, Z+3	; 0x03
    1d44:	64 81       	ldd	r22, Z+4	; 0x04
    1d46:	75 81       	ldd	r23, Z+5	; 0x05
    1d48:	86 17       	cp	r24, r22
    1d4a:	97 07       	cpc	r25, r23
    1d4c:	c9 f4       	brne	.+50     	; 0x1d80 <__vector_9+0x7c>
    1d4e:	ca 01       	movw	r24, r20
    1d50:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d54:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d58:	42 1b       	sub	r20, r18
    1d5a:	53 0b       	sbc	r21, r19
    1d5c:	41 30       	cpi	r20, 0x01	; 1
    1d5e:	51 05       	cpc	r21, r1
    1d60:	29 f4       	brne	.+10     	; 0x1d6c <__vector_9+0x68>
    1d62:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d66:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d70:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d74:	ef e6       	ldi	r30, 0x6F	; 111
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	82 60       	ori	r24, 0x02	; 2
    1d7c:	80 83       	st	Z, r24
    1d7e:	05 c0       	rjmp	.+10     	; 0x1d8a <__vector_9+0x86>
    1d80:	ef e6       	ldi	r30, 0x6F	; 111
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8d 7f       	andi	r24, 0xFD	; 253
    1d88:	80 83       	st	Z, r24
    1d8a:	ff 91       	pop	r31
    1d8c:	ef 91       	pop	r30
    1d8e:	9f 91       	pop	r25
    1d90:	8f 91       	pop	r24
    1d92:	7f 91       	pop	r23
    1d94:	6f 91       	pop	r22
    1d96:	5f 91       	pop	r21
    1d98:	4f 91       	pop	r20
    1d9a:	3f 91       	pop	r19
    1d9c:	2f 91       	pop	r18
    1d9e:	0f 90       	pop	r0
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	0f 90       	pop	r0
    1da4:	1f 90       	pop	r1
    1da6:	18 95       	reti

00001da8 <__vector_7>:
    1da8:	1f 92       	push	r1
    1daa:	0f 92       	push	r0
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	0f 92       	push	r0
    1db0:	11 24       	eor	r1, r1
    1db2:	cf 92       	push	r12
    1db4:	df 92       	push	r13
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	2f 93       	push	r18
    1dbc:	3f 93       	push	r19
    1dbe:	4f 93       	push	r20
    1dc0:	5f 93       	push	r21
    1dc2:	6f 93       	push	r22
    1dc4:	7f 93       	push	r23
    1dc6:	8f 93       	push	r24
    1dc8:	9f 93       	push	r25
    1dca:	af 93       	push	r26
    1dcc:	bf 93       	push	r27
    1dce:	ef 93       	push	r30
    1dd0:	ff 93       	push	r31
    1dd2:	c0 90 2e 01 	lds	r12, 0x012E	; 0x80012e <overflows>
    1dd6:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <overflows+0x1>
    1dda:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dde:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1de2:	b0 99       	sbic	0x16, 0	; 22
    1de4:	0f c0       	rjmp	.+30     	; 0x1e04 <__vector_7+0x5c>
    1de6:	0d 2c       	mov	r0, r13
    1de8:	00 0c       	add	r0, r0
    1dea:	ee 08       	sbc	r14, r14
    1dec:	ff 08       	sbc	r15, r15
    1dee:	d6 01       	movw	r26, r12
    1df0:	99 27       	eor	r25, r25
    1df2:	88 27       	eor	r24, r24
    1df4:	69 01       	movw	r12, r18
    1df6:	e1 2c       	mov	r14, r1
    1df8:	f1 2c       	mov	r15, r1
    1dfa:	c8 2a       	or	r12, r24
    1dfc:	d9 2a       	or	r13, r25
    1dfe:	ea 2a       	or	r14, r26
    1e00:	fb 2a       	or	r15, r27
    1e02:	15 c0       	rjmp	.+42     	; 0x1e2e <__vector_7+0x86>
    1e04:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e08:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e0c:	8f ef       	ldi	r24, 0xFF	; 255
    1e0e:	c8 1a       	sub	r12, r24
    1e10:	d8 0a       	sbc	r13, r24
    1e12:	0d 2c       	mov	r0, r13
    1e14:	00 0c       	add	r0, r0
    1e16:	ee 08       	sbc	r14, r14
    1e18:	ff 08       	sbc	r15, r15
    1e1a:	d6 01       	movw	r26, r12
    1e1c:	99 27       	eor	r25, r25
    1e1e:	88 27       	eor	r24, r24
    1e20:	69 01       	movw	r12, r18
    1e22:	e1 2c       	mov	r14, r1
    1e24:	f1 2c       	mov	r15, r1
    1e26:	c8 2a       	or	r12, r24
    1e28:	d9 2a       	or	r13, r25
    1e2a:	ea 2a       	or	r14, r26
    1e2c:	fb 2a       	or	r15, r27
    1e2e:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <timerQ>
    1e32:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <timerQ+0x1>
    1e36:	30 97       	sbiw	r30, 0x00	; 0
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <__vector_7+0x94>
    1e3a:	42 c0       	rjmp	.+132    	; 0x1ec0 <__vector_7+0x118>
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	a4 81       	ldd	r26, Z+4	; 0x04
    1e42:	b5 81       	ldd	r27, Z+5	; 0x05
    1e44:	8c 19       	sub	r24, r12
    1e46:	9d 09       	sbc	r25, r13
    1e48:	ae 09       	sbc	r26, r14
    1e4a:	bf 09       	sbc	r27, r15
    1e4c:	18 16       	cp	r1, r24
    1e4e:	19 06       	cpc	r1, r25
    1e50:	1a 06       	cpc	r1, r26
    1e52:	1b 06       	cpc	r1, r27
    1e54:	ec f1       	brlt	.+122    	; 0x1ed0 <__vector_7+0x128>
    1e56:	84 e3       	ldi	r24, 0x34	; 52
    1e58:	91 e0       	ldi	r25, 0x01	; 1
    1e5a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <dequeue>
    1e5e:	66 e3       	ldi	r22, 0x36	; 54
    1e60:	71 e0       	ldi	r23, 0x01	; 1
    1e62:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <enqueueByDeadline>
    1e66:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <timerQ>
    1e6a:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <timerQ+0x1>
    1e6e:	30 97       	sbiw	r30, 0x00	; 0
    1e70:	39 f1       	breq	.+78     	; 0x1ec0 <__vector_7+0x118>
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	a4 81       	ldd	r26, Z+4	; 0x04
    1e78:	b5 81       	ldd	r27, Z+5	; 0x05
    1e7a:	8c 19       	sub	r24, r12
    1e7c:	9d 09       	sbc	r25, r13
    1e7e:	ae 09       	sbc	r26, r14
    1e80:	bf 09       	sbc	r27, r15
    1e82:	18 16       	cp	r1, r24
    1e84:	19 06       	cpc	r1, r25
    1e86:	1a 06       	cpc	r1, r26
    1e88:	1b 06       	cpc	r1, r27
    1e8a:	2c f7       	brge	.-54     	; 0x1e56 <__vector_7+0xae>
    1e8c:	21 c0       	rjmp	.+66     	; 0x1ed0 <__vector_7+0x128>
    1e8e:	9c 01       	movw	r18, r24
    1e90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e98:	84 1b       	sub	r24, r20
    1e9a:	95 0b       	sbc	r25, r21
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	31 f4       	brne	.+12     	; 0x1eac <__vector_7+0x104>
    1ea0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ea4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ea8:	2f 5f       	subi	r18, 0xFF	; 255
    1eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1eac:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1eb0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1eb4:	ef e6       	ldi	r30, 0x6F	; 111
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	82 60       	ori	r24, 0x02	; 2
    1ebc:	80 83       	st	Z, r24
    1ebe:	05 c0       	rjmp	.+10     	; 0x1eca <__vector_7+0x122>
    1ec0:	ef e6       	ldi	r30, 0x6F	; 111
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	8d 7f       	andi	r24, 0xFD	; 253
    1ec8:	80 83       	st	Z, r24
    1eca:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    1ece:	0c c0       	rjmp	.+24     	; 0x1ee8 <__vector_7+0x140>
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	a4 81       	ldd	r26, Z+4	; 0x04
    1ed6:	b5 81       	ldd	r27, Z+5	; 0x05
    1ed8:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1edc:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1ee0:	2a 17       	cp	r18, r26
    1ee2:	3b 07       	cpc	r19, r27
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <__vector_7+0x118>
    1ee6:	d3 cf       	rjmp	.-90     	; 0x1e8e <__vector_7+0xe6>
    1ee8:	ff 91       	pop	r31
    1eea:	ef 91       	pop	r30
    1eec:	bf 91       	pop	r27
    1eee:	af 91       	pop	r26
    1ef0:	9f 91       	pop	r25
    1ef2:	8f 91       	pop	r24
    1ef4:	7f 91       	pop	r23
    1ef6:	6f 91       	pop	r22
    1ef8:	5f 91       	pop	r21
    1efa:	4f 91       	pop	r20
    1efc:	3f 91       	pop	r19
    1efe:	2f 91       	pop	r18
    1f00:	ff 90       	pop	r15
    1f02:	ef 90       	pop	r14
    1f04:	df 90       	pop	r13
    1f06:	cf 90       	pop	r12
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	0f 90       	pop	r0
    1f0e:	1f 90       	pop	r1
    1f10:	18 95       	reti

00001f12 <async>:
    1f12:	3f 92       	push	r3
    1f14:	4f 92       	push	r4
    1f16:	5f 92       	push	r5
    1f18:	6f 92       	push	r6
    1f1a:	7f 92       	push	r7
    1f1c:	8f 92       	push	r8
    1f1e:	9f 92       	push	r9
    1f20:	af 92       	push	r10
    1f22:	bf 92       	push	r11
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	2b 01       	movw	r4, r22
    1f36:	3c 01       	movw	r6, r24
    1f38:	49 01       	movw	r8, r18
    1f3a:	5a 01       	movw	r10, r20
    1f3c:	8f b7       	in	r24, 0x3f	; 63
    1f3e:	80 78       	andi	r24, 0x80	; 128
    1f40:	38 2e       	mov	r3, r24
    1f42:	f8 94       	cli
    1f44:	84 e2       	ldi	r24, 0x24	; 36
    1f46:	91 e0       	ldi	r25, 0x01	; 1
    1f48:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <dequeue>
    1f4c:	ec 01       	movw	r28, r24
    1f4e:	1b 87       	std	Y+11, r17	; 0x0b
    1f50:	0a 87       	std	Y+10, r16	; 0x0a
    1f52:	fd 86       	std	Y+13, r15	; 0x0d
    1f54:	ec 86       	std	Y+12, r14	; 0x0c
    1f56:	df 86       	std	Y+15, r13	; 0x0f
    1f58:	ce 86       	std	Y+14, r12	; 0x0e
    1f5a:	33 20       	and	r3, r3
    1f5c:	61 f0       	breq	.+24     	; 0x1f76 <async+0x64>
    1f5e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <current>
    1f62:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <current+0x1>
    1f66:	02 80       	ldd	r0, Z+2	; 0x02
    1f68:	f3 81       	ldd	r31, Z+3	; 0x03
    1f6a:	e0 2d       	mov	r30, r0
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	a4 81       	ldd	r26, Z+4	; 0x04
    1f72:	b5 81       	ldd	r27, Z+5	; 0x05
    1f74:	08 c0       	rjmp	.+16     	; 0x1f86 <async+0x74>
    1f76:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <timestamp>
    1f7a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <timestamp+0x1>
    1f7e:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <timestamp+0x2>
    1f82:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <timestamp+0x3>
    1f86:	48 0e       	add	r4, r24
    1f88:	59 1e       	adc	r5, r25
    1f8a:	6a 1e       	adc	r6, r26
    1f8c:	7b 1e       	adc	r7, r27
    1f8e:	4a 82       	std	Y+2, r4	; 0x02
    1f90:	5b 82       	std	Y+3, r5	; 0x03
    1f92:	6c 82       	std	Y+4, r6	; 0x04
    1f94:	7d 82       	std	Y+5, r7	; 0x05
    1f96:	18 14       	cp	r1, r8
    1f98:	19 04       	cpc	r1, r9
    1f9a:	1a 04       	cpc	r1, r10
    1f9c:	1b 04       	cpc	r1, r11
    1f9e:	44 f0       	brlt	.+16     	; 0x1fb0 <async+0x9e>
    1fa0:	0f 2e       	mov	r0, r31
    1fa2:	88 24       	eor	r8, r8
    1fa4:	8a 94       	dec	r8
    1fa6:	98 2c       	mov	r9, r8
    1fa8:	a8 2c       	mov	r10, r8
    1faa:	ff e7       	ldi	r31, 0x7F	; 127
    1fac:	bf 2e       	mov	r11, r31
    1fae:	f0 2d       	mov	r31, r0
    1fb0:	84 0c       	add	r8, r4
    1fb2:	95 1c       	adc	r9, r5
    1fb4:	a6 1c       	adc	r10, r6
    1fb6:	b7 1c       	adc	r11, r7
    1fb8:	8e 82       	std	Y+6, r8	; 0x06
    1fba:	9f 82       	std	Y+7, r9	; 0x07
    1fbc:	a8 86       	std	Y+8, r10	; 0x08
    1fbe:	b9 86       	std	Y+9, r11	; 0x09
    1fc0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <overflows>
    1fc4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <overflows+0x1>
    1fc8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1fcc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fd0:	b0 99       	sbic	0x16, 0	; 22
    1fd2:	0e c0       	rjmp	.+28     	; 0x1ff0 <async+0xde>
    1fd4:	09 2e       	mov	r0, r25
    1fd6:	00 0c       	add	r0, r0
    1fd8:	aa 0b       	sbc	r26, r26
    1fda:	bb 0b       	sbc	r27, r27
    1fdc:	dc 01       	movw	r26, r24
    1fde:	99 27       	eor	r25, r25
    1fe0:	88 27       	eor	r24, r24
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	84 2b       	or	r24, r20
    1fe8:	95 2b       	or	r25, r21
    1fea:	a6 2b       	or	r26, r22
    1fec:	b7 2b       	or	r27, r23
    1fee:	13 c0       	rjmp	.+38     	; 0x2016 <async+0x104>
    1ff0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ff4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	09 2e       	mov	r0, r25
    1ffc:	00 0c       	add	r0, r0
    1ffe:	aa 0b       	sbc	r26, r26
    2000:	bb 0b       	sbc	r27, r27
    2002:	dc 01       	movw	r26, r24
    2004:	99 27       	eor	r25, r25
    2006:	88 27       	eor	r24, r24
    2008:	a9 01       	movw	r20, r18
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	70 e0       	ldi	r23, 0x00	; 0
    200e:	84 2b       	or	r24, r20
    2010:	95 2b       	or	r25, r21
    2012:	a6 2b       	or	r26, r22
    2014:	b7 2b       	or	r27, r23
    2016:	48 1a       	sub	r4, r24
    2018:	59 0a       	sbc	r5, r25
    201a:	6a 0a       	sbc	r6, r26
    201c:	7b 0a       	sbc	r7, r27
    201e:	14 14       	cp	r1, r4
    2020:	15 04       	cpc	r1, r5
    2022:	16 04       	cpc	r1, r6
    2024:	17 04       	cpc	r1, r7
    2026:	ac f5       	brge	.+106    	; 0x2092 <async+0x180>
    2028:	64 e3       	ldi	r22, 0x34	; 52
    202a:	71 e0       	ldi	r23, 0x01	; 1
    202c:	ce 01       	movw	r24, r28
    202e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <enqueueByBaseline>
    2032:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <timerQ>
    2036:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <timerQ+0x1>
    203a:	30 97       	sbiw	r30, 0x00	; 0
    203c:	21 f1       	breq	.+72     	; 0x2086 <async+0x174>
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	a4 81       	ldd	r26, Z+4	; 0x04
    2044:	b5 81       	ldd	r27, Z+5	; 0x05
    2046:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    204a:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    204e:	2a 17       	cp	r18, r26
    2050:	3b 07       	cpc	r19, r27
    2052:	c9 f4       	brne	.+50     	; 0x2086 <async+0x174>
    2054:	9c 01       	movw	r18, r24
    2056:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    205a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    205e:	84 1b       	sub	r24, r20
    2060:	95 0b       	sbc	r25, r21
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	31 f4       	brne	.+12     	; 0x2072 <async+0x160>
    2066:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    206a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    206e:	2f 5f       	subi	r18, 0xFF	; 255
    2070:	3f 4f       	sbci	r19, 0xFF	; 255
    2072:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    2076:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    207a:	ef e6       	ldi	r30, 0x6F	; 111
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	82 60       	ori	r24, 0x02	; 2
    2082:	80 83       	st	Z, r24
    2084:	41 c0       	rjmp	.+130    	; 0x2108 <async+0x1f6>
    2086:	ef e6       	ldi	r30, 0x6F	; 111
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	8d 7f       	andi	r24, 0xFD	; 253
    208e:	80 83       	st	Z, r24
    2090:	3b c0       	rjmp	.+118    	; 0x2108 <async+0x1f6>
    2092:	66 e3       	ldi	r22, 0x36	; 54
    2094:	71 e0       	ldi	r23, 0x01	; 1
    2096:	ce 01       	movw	r24, r28
    2098:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <enqueueByDeadline>
    209c:	33 20       	and	r3, r3
    209e:	b9 f1       	breq	.+110    	; 0x210e <async+0x1fc>
    20a0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <threadPool>
    20a4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <threadPool+0x1>
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	81 f1       	breq	.+96     	; 0x210c <async+0x1fa>
    20ac:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <activeStack>
    20b0:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <activeStack+0x1>
    20b4:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <msgQ>
    20b8:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <msgQ+0x1>
    20bc:	02 81       	ldd	r16, Z+2	; 0x02
    20be:	13 81       	ldd	r17, Z+3	; 0x03
    20c0:	d9 01       	movw	r26, r18
    20c2:	16 96       	adiw	r26, 0x06	; 6
    20c4:	4d 91       	ld	r20, X+
    20c6:	5d 91       	ld	r21, X+
    20c8:	6d 91       	ld	r22, X+
    20ca:	7c 91       	ld	r23, X
    20cc:	19 97       	sbiw	r26, 0x09	; 9
    20ce:	d8 01       	movw	r26, r16
    20d0:	16 96       	adiw	r26, 0x06	; 6
    20d2:	0d 91       	ld	r16, X+
    20d4:	1d 91       	ld	r17, X+
    20d6:	2d 91       	ld	r18, X+
    20d8:	3c 91       	ld	r19, X
    20da:	19 97       	sbiw	r26, 0x09	; 9
    20dc:	40 1b       	sub	r20, r16
    20de:	51 0b       	sbc	r21, r17
    20e0:	62 0b       	sbc	r22, r18
    20e2:	73 0b       	sbc	r23, r19
    20e4:	9a f4       	brpl	.+38     	; 0x210c <async+0x1fa>
    20e6:	dc 01       	movw	r26, r24
    20e8:	2d 91       	ld	r18, X+
    20ea:	3c 91       	ld	r19, X
    20ec:	11 97       	sbiw	r26, 0x01	; 1
    20ee:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <threadPool+0x1>
    20f2:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <threadPool>
    20f6:	ed 93       	st	X+, r30
    20f8:	fc 93       	st	X, r31
    20fa:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <activeStack+0x1>
    20fe:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <activeStack>
    2102:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <dispatch>
    2106:	02 c0       	rjmp	.+4      	; 0x210c <async+0x1fa>
    2108:	33 20       	and	r3, r3
    210a:	09 f0       	breq	.+2      	; 0x210e <async+0x1fc>
    210c:	78 94       	sei
    210e:	ce 01       	movw	r24, r28
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	ff 90       	pop	r15
    211a:	ef 90       	pop	r14
    211c:	df 90       	pop	r13
    211e:	cf 90       	pop	r12
    2120:	bf 90       	pop	r11
    2122:	af 90       	pop	r10
    2124:	9f 90       	pop	r9
    2126:	8f 90       	pop	r8
    2128:	7f 90       	pop	r7
    212a:	6f 90       	pop	r6
    212c:	5f 90       	pop	r5
    212e:	4f 90       	pop	r4
    2130:	3f 90       	pop	r3
    2132:	08 95       	ret

00002134 <sync>:
    2134:	cf 92       	push	r12
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	ec 01       	movw	r28, r24
    2146:	7b 01       	movw	r14, r22
    2148:	6a 01       	movw	r12, r20
    214a:	1f b7       	in	r17, 0x3f	; 63
    214c:	10 78       	andi	r17, 0x80	; 128
    214e:	f8 94       	cli
    2150:	a8 81       	ld	r26, Y
    2152:	b9 81       	ldd	r27, Y+1	; 0x01
    2154:	10 97       	sbiw	r26, 0x00	; 0
    2156:	61 f1       	breq	.+88     	; 0x21b0 <sync+0x7c>
    2158:	14 96       	adiw	r26, 0x04	; 4
    215a:	ed 91       	ld	r30, X+
    215c:	fc 91       	ld	r31, X
    215e:	15 97       	sbiw	r26, 0x05	; 5
    2160:	30 97       	sbiw	r30, 0x00	; 0
    2162:	41 f0       	breq	.+16     	; 0x2174 <sync+0x40>
    2164:	a0 81       	ld	r26, Z
    2166:	b1 81       	ldd	r27, Z+1	; 0x01
    2168:	14 96       	adiw	r26, 0x04	; 4
    216a:	ed 91       	ld	r30, X+
    216c:	fc 91       	ld	r31, X
    216e:	15 97       	sbiw	r26, 0x05	; 5
    2170:	30 97       	sbiw	r30, 0x00	; 0
    2172:	c1 f7       	brne	.-16     	; 0x2164 <sync+0x30>
    2174:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <current>
    2178:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <current+0x1>
    217c:	2a 17       	cp	r18, r26
    217e:	3b 07       	cpc	r19, r27
    2180:	21 f0       	breq	.+8      	; 0x218a <sync+0x56>
    2182:	11 23       	and	r17, r17
    2184:	09 f4       	brne	.+2      	; 0x2188 <sync+0x54>
    2186:	3d c0       	rjmp	.+122    	; 0x2202 <sync+0xce>
    2188:	07 c0       	rjmp	.+14     	; 0x2198 <sync+0x64>
    218a:	11 23       	and	r17, r17
    218c:	09 f4       	brne	.+2      	; 0x2190 <sync+0x5c>
    218e:	3c c0       	rjmp	.+120    	; 0x2208 <sync+0xd4>
    2190:	78 94       	sei
    2192:	8f ef       	ldi	r24, 0xFF	; 255
    2194:	9f ef       	ldi	r25, 0xFF	; 255
    2196:	52 c0       	rjmp	.+164    	; 0x223c <sync+0x108>
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	9b 81       	ldd	r25, Y+3	; 0x03
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	d1 f1       	breq	.+116    	; 0x2214 <sync+0xe0>
    21a0:	fc 01       	movw	r30, r24
    21a2:	15 82       	std	Z+5, r1	; 0x05
    21a4:	14 82       	std	Z+4, r1	; 0x04
    21a6:	36 c0       	rjmp	.+108    	; 0x2214 <sync+0xe0>
    21a8:	78 94       	sei
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	46 c0       	rjmp	.+140    	; 0x223c <sync+0x108>
    21b0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <current>
    21b4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <current+0x1>
    21b8:	99 83       	std	Y+1, r25	; 0x01
    21ba:	88 83       	st	Y, r24
    21bc:	11 23       	and	r17, r17
    21be:	29 f0       	breq	.+10     	; 0x21ca <sync+0x96>
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	9b 81       	ldd	r25, Y+3	; 0x03
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	09 f0       	breq	.+2      	; 0x21ca <sync+0x96>
    21c8:	78 94       	sei
    21ca:	b6 01       	movw	r22, r12
    21cc:	ce 01       	movw	r24, r28
    21ce:	f7 01       	movw	r30, r14
    21d0:	09 95       	icall
    21d2:	f8 2e       	mov	r15, r24
    21d4:	09 2f       	mov	r16, r25
    21d6:	8f b7       	in	r24, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	19 82       	std	Y+1, r1	; 0x01
    21dc:	18 82       	st	Y, r1
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	82 30       	cpi	r24, 0x02	; 2
    21e4:	91 05       	cpc	r25, r1
    21e6:	38 f0       	brcs	.+14     	; 0x21f6 <sync+0xc2>
    21e8:	1b 82       	std	Y+3, r1	; 0x03
    21ea:	1a 82       	std	Y+2, r1	; 0x02
    21ec:	fc 01       	movw	r30, r24
    21ee:	15 82       	std	Z+5, r1	; 0x05
    21f0:	14 82       	std	Z+4, r1	; 0x04
    21f2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <dispatch>
    21f6:	11 23       	and	r17, r17
    21f8:	51 f0       	breq	.+20     	; 0x220e <sync+0xda>
    21fa:	78 94       	sei
    21fc:	8f 2d       	mov	r24, r15
    21fe:	90 2f       	mov	r25, r16
    2200:	1d c0       	rjmp	.+58     	; 0x223c <sync+0x108>
    2202:	8f ef       	ldi	r24, 0xFF	; 255
    2204:	9f ef       	ldi	r25, 0xFF	; 255
    2206:	1a c0       	rjmp	.+52     	; 0x223c <sync+0x108>
    2208:	8f ef       	ldi	r24, 0xFF	; 255
    220a:	9f ef       	ldi	r25, 0xFF	; 255
    220c:	17 c0       	rjmp	.+46     	; 0x223c <sync+0x108>
    220e:	8f 2d       	mov	r24, r15
    2210:	90 2f       	mov	r25, r16
    2212:	14 c0       	rjmp	.+40     	; 0x223c <sync+0x108>
    2214:	3b 83       	std	Y+3, r19	; 0x03
    2216:	2a 83       	std	Y+2, r18	; 0x02
    2218:	f9 01       	movw	r30, r18
    221a:	d5 83       	std	Z+5, r29	; 0x05
    221c:	c4 83       	std	Z+4, r28	; 0x04
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <dispatch>
    2224:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <current>
    2228:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <current+0x1>
    222c:	82 81       	ldd	r24, Z+2	; 0x02
    222e:	93 81       	ldd	r25, Z+3	; 0x03
    2230:	89 2b       	or	r24, r25
    2232:	09 f4       	brne	.+2      	; 0x2236 <sync+0x102>
    2234:	b9 cf       	rjmp	.-142    	; 0x21a8 <sync+0x74>
    2236:	f9 83       	std	Y+1, r31	; 0x01
    2238:	e8 83       	st	Y, r30
    223a:	c2 cf       	rjmp	.-124    	; 0x21c0 <sync+0x8c>
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	ff 90       	pop	r15
    2246:	ef 90       	pop	r14
    2248:	df 90       	pop	r13
    224a:	cf 90       	pop	r12
    224c:	08 95       	ret

0000224e <run>:
    224e:	00 91 1e 01 	lds	r16, 0x011E	; 0x80011e <current>
    2252:	10 91 1f 01 	lds	r17, 0x011F	; 0x80011f <current+0x1>
    2256:	86 e3       	ldi	r24, 0x36	; 54
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <dequeue>
    225e:	ec 01       	movw	r28, r24
    2260:	d8 01       	movw	r26, r16
    2262:	13 96       	adiw	r26, 0x03	; 3
    2264:	9c 93       	st	X, r25
    2266:	8e 93       	st	-X, r24
    2268:	12 97       	sbiw	r26, 0x02	; 2
    226a:	78 94       	sei
    226c:	4e 85       	ldd	r20, Y+14	; 0x0e
    226e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2270:	6c 85       	ldd	r22, Y+12	; 0x0c
    2272:	7d 85       	ldd	r23, Y+13	; 0x0d
    2274:	8a 85       	ldd	r24, Y+10	; 0x0a
    2276:	9b 85       	ldd	r25, Y+11	; 0x0b
    2278:	0e 94 9a 10 	call	0x2134	; 0x2134 <sync>
    227c:	8f b7       	in	r24, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <msgPool>
    2284:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <msgPool+0x1>
    2288:	99 83       	std	Y+1, r25	; 0x01
    228a:	88 83       	st	Y, r24
    228c:	d0 93 25 01 	sts	0x0125, r29	; 0x800125 <msgPool+0x1>
    2290:	c0 93 24 01 	sts	0x0124, r28	; 0x800124 <msgPool>
    2294:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <activeStack>
    2298:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <activeStack+0x1>
    229c:	00 81       	ld	r16, Z
    229e:	11 81       	ldd	r17, Z+1	; 0x01
    22a0:	e8 01       	movw	r28, r16
    22a2:	2a 81       	ldd	r18, Y+2	; 0x02
    22a4:	3b 81       	ldd	r19, Y+3	; 0x03
    22a6:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <msgQ>
    22aa:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <msgQ+0x1>
    22ae:	10 97       	sbiw	r26, 0x00	; 0
    22b0:	c1 f0       	breq	.+48     	; 0x22e2 <run+0x94>
    22b2:	21 15       	cp	r18, r1
    22b4:	31 05       	cpc	r19, r1
    22b6:	59 f2       	breq	.-106    	; 0x224e <run>
    22b8:	16 96       	adiw	r26, 0x06	; 6
    22ba:	8d 91       	ld	r24, X+
    22bc:	9d 91       	ld	r25, X+
    22be:	0d 90       	ld	r0, X+
    22c0:	bc 91       	ld	r27, X
    22c2:	a0 2d       	mov	r26, r0
    22c4:	e9 01       	movw	r28, r18
    22c6:	4e 81       	ldd	r20, Y+6	; 0x06
    22c8:	5f 81       	ldd	r21, Y+7	; 0x07
    22ca:	68 85       	ldd	r22, Y+8	; 0x08
    22cc:	79 85       	ldd	r23, Y+9	; 0x09
    22ce:	84 1b       	sub	r24, r20
    22d0:	95 0b       	sbc	r25, r21
    22d2:	a6 0b       	sbc	r26, r22
    22d4:	b7 0b       	sbc	r27, r23
    22d6:	18 16       	cp	r1, r24
    22d8:	19 06       	cpc	r1, r25
    22da:	1a 06       	cpc	r1, r26
    22dc:	1b 06       	cpc	r1, r27
    22de:	0c f0       	brlt	.+2      	; 0x22e2 <run+0x94>
    22e0:	b6 cf       	rjmp	.-148    	; 0x224e <run>
    22e2:	10 93 21 01 	sts	0x0121, r17	; 0x800121 <activeStack+0x1>
    22e6:	00 93 20 01 	sts	0x0120, r16	; 0x800120 <activeStack>
    22ea:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <threadPool>
    22ee:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <threadPool+0x1>
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
    22f6:	f0 93 23 01 	sts	0x0123, r31	; 0x800123 <threadPool+0x1>
    22fa:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <threadPool>
    22fe:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <activeStack>
    2302:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <activeStack+0x1>
    2306:	14 96       	adiw	r26, 0x04	; 4
    2308:	ed 91       	ld	r30, X+
    230a:	fc 91       	ld	r31, X
    230c:	15 97       	sbiw	r26, 0x05	; 5
    230e:	30 97       	sbiw	r30, 0x00	; 0
    2310:	41 f0       	breq	.+16     	; 0x2322 <run+0xd4>
    2312:	a0 81       	ld	r26, Z
    2314:	b1 81       	ldd	r27, Z+1	; 0x01
    2316:	14 96       	adiw	r26, 0x04	; 4
    2318:	ed 91       	ld	r30, X+
    231a:	fc 91       	ld	r31, X
    231c:	15 97       	sbiw	r26, 0x05	; 5
    231e:	30 97       	sbiw	r30, 0x00	; 0
    2320:	c1 f7       	brne	.-16     	; 0x2312 <run+0xc4>
    2322:	cd 01       	movw	r24, r26
    2324:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <dispatch>
    2328:	92 cf       	rjmp	.-220    	; 0x224e <run>

0000232a <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    232a:	42 31       	cpi	r20, 0x12	; 18
    232c:	b8 f4       	brcc	.+46     	; 0x235c <install+0x32>
        char status;
        DISABLE(status);
    232e:	2f b7       	in	r18, 0x3f	; 63
    2330:	f8 94       	cli
        otable[i] = obj;
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	44 0f       	add	r20, r20
    2336:	55 1f       	adc	r21, r21
    2338:	fa 01       	movw	r30, r20
    233a:	e8 5c       	subi	r30, 0xC8	; 200
    233c:	fe 4f       	sbci	r31, 0xFE	; 254
    233e:	91 83       	std	Z+1, r25	; 0x01
    2340:	80 83       	st	Z, r24
        mtable[i] = m;
    2342:	fa 01       	movw	r30, r20
    2344:	e0 53       	subi	r30, 0x30	; 48
    2346:	fe 4f       	sbci	r31, 0xFE	; 254
    2348:	71 83       	std	Z+1, r23	; 0x01
    234a:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	fc 01       	movw	r30, r24
    2352:	53 83       	std	Z+3, r21	; 0x03
    2354:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2356:	22 23       	and	r18, r18
    2358:	0c f4       	brge	.+2      	; 0x235c <install+0x32>
    235a:	78 94       	sei
    235c:	08 95       	ret

0000235e <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    235e:	8c 01       	movw	r16, r24
    2360:	7b 01       	movw	r14, r22
    2362:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2364:	8f b7       	in	r24, 0x3f	; 63
    2366:	f8 94       	cli
    initialize();
    2368:	0e 94 87 05 	call	0xb0e	; 0xb0e <initialize>
    ENABLE(1);
    236c:	78 94       	sei
    if (m != NULL)
    236e:	e1 14       	cp	r14, r1
    2370:	f1 04       	cpc	r15, r1
    2372:	41 f0       	breq	.+16     	; 0x2384 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	a9 01       	movw	r20, r18
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	cb 01       	movw	r24, r22
    2380:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <async>
    DISABLE(status);
    2384:	8f b7       	in	r24, 0x3f	; 63
    2386:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2388:	0e 94 12 06 	call	0xc24	; 0xc24 <schedule>
    ENABLE(1);
    238c:	78 94       	sei
    while (1) {
        SLEEP();
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	83 bf       	out	0x33, r24	; 51
    2392:	88 95       	sleep
    2394:	fd cf       	rjmp	.-6      	; 0x2390 <tinytimber+0x32>

00002396 <USART_Init>:

void USART_Init(serialObj* self)
{
/* Set baud rate */
//UBRR0H = (unsigned char)(MYUBRR>>8);
UBRR0L = (unsigned char)(MYUBRR);
    2396:	83 e3       	ldi	r24, 0x33	; 51
    2398:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>



/* Enable receiver and transmitter  and enables interupts*/
UCSR0B |= (1<<RXEN0)|(1<<TXEN0);  // receiver and transmitter 
    239c:	e1 ec       	ldi	r30, 0xC1	; 193
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	88 61       	ori	r24, 0x18	; 24
    23a4:	80 83       	st	Z, r24
UCSR0B |= (1 << RXCIE0);          //interupts
    23a6:	80 81       	ld	r24, Z
    23a8:	80 68       	ori	r24, 0x80	; 128
    23aa:	80 83       	st	Z, r24
//UCSR0B |= (1 << TXCIE0);          // transmit inter



/* Set frame format:  */
UCSR0C &= ~(1<<USBS0);   //   1 stop bit 
    23ac:	e2 ec       	ldi	r30, 0xC2	; 194
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	87 7f       	andi	r24, 0xF7	; 247
    23b4:	80 83       	st	Z, r24
UCSR0C |= (1<<UCSZ00); 
    23b6:	80 81       	ld	r24, Z
    23b8:	82 60       	ori	r24, 0x02	; 2
    23ba:	80 83       	st	Z, r24
UCSR0C |= (1<<UCSZ01); // 8 data,
    23bc:	80 81       	ld	r24, Z
    23be:	84 60       	ori	r24, 0x04	; 4
    23c0:	80 83       	st	Z, r24
    23c2:	08 95       	ret

000023c4 <USART_Receive>:

}


unsigned int USART_Receive(serialObj* self)
{
    23c4:	dc 01       	movw	r26, r24
	while(!(UCSR0A & (1<<RXC0)));
    23c6:	e0 ec       	ldi	r30, 0xC0	; 192
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	90 81       	ld	r25, Z
    23cc:	99 23       	and	r25, r25
    23ce:	ec f7       	brge	.-6      	; 0x23ca <USART_Receive+0x6>
	self->inData = UDR0;
    23d0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	15 96       	adiw	r26, 0x05	; 5
    23d8:	3c 93       	st	X, r19
    23da:	2e 93       	st	-X, r18
    23dc:	14 97       	sbiw	r26, 0x04	; 4

}
    23de:	08 95       	ret

000023e0 <USART_Transmit>:


void USART_Transmit(serialObj* self, unsigned int data )
{
/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0))) ;
    23e0:	e0 ec       	ldi	r30, 0xC0	; 192
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	85 ff       	sbrs	r24, 5
    23e8:	fd cf       	rjmp	.-6      	; 0x23e4 <USART_Transmit+0x4>
/* Put data into buffer, sends the data */
UDR0 = data;
    23ea:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    23ee:	08 95       	ret

000023f0 <__divmodsi4>:
    23f0:	05 2e       	mov	r0, r21
    23f2:	97 fb       	bst	r25, 7
    23f4:	1e f4       	brtc	.+6      	; 0x23fc <__divmodsi4+0xc>
    23f6:	00 94       	com	r0
    23f8:	0e 94 0f 12 	call	0x241e	; 0x241e <__negsi2>
    23fc:	57 fd       	sbrc	r21, 7
    23fe:	07 d0       	rcall	.+14     	; 0x240e <__divmodsi4_neg2>
    2400:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodsi4>
    2404:	07 fc       	sbrc	r0, 7
    2406:	03 d0       	rcall	.+6      	; 0x240e <__divmodsi4_neg2>
    2408:	4e f4       	brtc	.+18     	; 0x241c <__divmodsi4_exit>
    240a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__negsi2>

0000240e <__divmodsi4_neg2>:
    240e:	50 95       	com	r21
    2410:	40 95       	com	r20
    2412:	30 95       	com	r19
    2414:	21 95       	neg	r18
    2416:	3f 4f       	sbci	r19, 0xFF	; 255
    2418:	4f 4f       	sbci	r20, 0xFF	; 255
    241a:	5f 4f       	sbci	r21, 0xFF	; 255

0000241c <__divmodsi4_exit>:
    241c:	08 95       	ret

0000241e <__negsi2>:
    241e:	90 95       	com	r25
    2420:	80 95       	com	r24
    2422:	70 95       	com	r23
    2424:	61 95       	neg	r22
    2426:	7f 4f       	sbci	r23, 0xFF	; 255
    2428:	8f 4f       	sbci	r24, 0xFF	; 255
    242a:	9f 4f       	sbci	r25, 0xFF	; 255
    242c:	08 95       	ret

0000242e <__tablejump2__>:
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	05 90       	lpm	r0, Z+
    2434:	f4 91       	lpm	r31, Z
    2436:	e0 2d       	mov	r30, r0
    2438:	09 94       	ijmp

0000243a <__udivmodsi4>:
    243a:	a1 e2       	ldi	r26, 0x21	; 33
    243c:	1a 2e       	mov	r1, r26
    243e:	aa 1b       	sub	r26, r26
    2440:	bb 1b       	sub	r27, r27
    2442:	fd 01       	movw	r30, r26
    2444:	0d c0       	rjmp	.+26     	; 0x2460 <__udivmodsi4_ep>

00002446 <__udivmodsi4_loop>:
    2446:	aa 1f       	adc	r26, r26
    2448:	bb 1f       	adc	r27, r27
    244a:	ee 1f       	adc	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	a2 17       	cp	r26, r18
    2450:	b3 07       	cpc	r27, r19
    2452:	e4 07       	cpc	r30, r20
    2454:	f5 07       	cpc	r31, r21
    2456:	20 f0       	brcs	.+8      	; 0x2460 <__udivmodsi4_ep>
    2458:	a2 1b       	sub	r26, r18
    245a:	b3 0b       	sbc	r27, r19
    245c:	e4 0b       	sbc	r30, r20
    245e:	f5 0b       	sbc	r31, r21

00002460 <__udivmodsi4_ep>:
    2460:	66 1f       	adc	r22, r22
    2462:	77 1f       	adc	r23, r23
    2464:	88 1f       	adc	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	1a 94       	dec	r1
    246a:	69 f7       	brne	.-38     	; 0x2446 <__udivmodsi4_loop>
    246c:	60 95       	com	r22
    246e:	70 95       	com	r23
    2470:	80 95       	com	r24
    2472:	90 95       	com	r25
    2474:	9b 01       	movw	r18, r22
    2476:	ac 01       	movw	r20, r24
    2478:	bd 01       	movw	r22, r26
    247a:	cf 01       	movw	r24, r30
    247c:	08 95       	ret

0000247e <setjmp>:
    247e:	dc 01       	movw	r26, r24
    2480:	2d 92       	st	X+, r2
    2482:	3d 92       	st	X+, r3
    2484:	4d 92       	st	X+, r4
    2486:	5d 92       	st	X+, r5
    2488:	6d 92       	st	X+, r6
    248a:	7d 92       	st	X+, r7
    248c:	8d 92       	st	X+, r8
    248e:	9d 92       	st	X+, r9
    2490:	ad 92       	st	X+, r10
    2492:	bd 92       	st	X+, r11
    2494:	cd 92       	st	X+, r12
    2496:	dd 92       	st	X+, r13
    2498:	ed 92       	st	X+, r14
    249a:	fd 92       	st	X+, r15
    249c:	0d 93       	st	X+, r16
    249e:	1d 93       	st	X+, r17
    24a0:	cd 93       	st	X+, r28
    24a2:	dd 93       	st	X+, r29
    24a4:	ff 91       	pop	r31
    24a6:	ef 91       	pop	r30
    24a8:	8d b7       	in	r24, 0x3d	; 61
    24aa:	8d 93       	st	X+, r24
    24ac:	8e b7       	in	r24, 0x3e	; 62
    24ae:	8d 93       	st	X+, r24
    24b0:	8f b7       	in	r24, 0x3f	; 63
    24b2:	8d 93       	st	X+, r24
    24b4:	ed 93       	st	X+, r30
    24b6:	fd 93       	st	X+, r31
    24b8:	88 27       	eor	r24, r24
    24ba:	99 27       	eor	r25, r25
    24bc:	09 94       	ijmp

000024be <longjmp>:
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	91 05       	cpc	r25, r1
    24c6:	81 1d       	adc	r24, r1
    24c8:	2d 90       	ld	r2, X+
    24ca:	3d 90       	ld	r3, X+
    24cc:	4d 90       	ld	r4, X+
    24ce:	5d 90       	ld	r5, X+
    24d0:	6d 90       	ld	r6, X+
    24d2:	7d 90       	ld	r7, X+
    24d4:	8d 90       	ld	r8, X+
    24d6:	9d 90       	ld	r9, X+
    24d8:	ad 90       	ld	r10, X+
    24da:	bd 90       	ld	r11, X+
    24dc:	cd 90       	ld	r12, X+
    24de:	dd 90       	ld	r13, X+
    24e0:	ed 90       	ld	r14, X+
    24e2:	fd 90       	ld	r15, X+
    24e4:	0d 91       	ld	r16, X+
    24e6:	1d 91       	ld	r17, X+
    24e8:	cd 91       	ld	r28, X+
    24ea:	dd 91       	ld	r29, X+
    24ec:	ed 91       	ld	r30, X+
    24ee:	fd 91       	ld	r31, X+
    24f0:	0d 90       	ld	r0, X+
    24f2:	f8 94       	cli
    24f4:	fe bf       	out	0x3e, r31	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	ed bf       	out	0x3d, r30	; 61
    24fa:	ed 91       	ld	r30, X+
    24fc:	fd 91       	ld	r31, X+
    24fe:	09 94       	ijmp

00002500 <_exit>:
    2500:	f8 94       	cli

00002502 <__stop_program>:
    2502:	ff cf       	rjmp	.-2      	; 0x2502 <__stop_program>
