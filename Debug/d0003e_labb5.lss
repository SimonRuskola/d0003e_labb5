
d0003e_labb5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000020a4  00002138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800122  00800122  0000215a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000215a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000218c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027a7  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001025  00000000  00000000  00004bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f2  00000000  00000000  00005be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b78  00000000  00000000  000070dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000955  00000000  00000000  00007c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026bd  00000000  00000000  000085a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000ac66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 35 04 	jmp	0x86a	; 0x86a <__vector_1>
       8:	0c 94 a1 04 	jmp	0x942	; 0x942 <__vector_2>
       c:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__vector_3>
      10:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_4>
      14:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_9>
      28:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__vector_10>
      2c:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__vector_11>
      30:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_12>
      34:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_13>
      38:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__vector_14>
      3c:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__vector_15>
      40:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_16>
      44:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_17>
      48:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__vector_18>
      4c:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__vector_19>
      50:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <__vector_20>
      54:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__vector_21>
      58:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__vector_22>
      5c:	8f 00       	.word	0x008f	; ????
      5e:	71 00       	.word	0x0071	; ????
      60:	74 00       	.word	0x0074	; ????
      62:	77 00       	.word	0x0077	; ????
      64:	7a 00       	.word	0x007a	; ????
      66:	7d 00       	.word	0x007d	; ????
      68:	80 00       	.word	0x0080	; ????
      6a:	83 00       	.word	0x0083	; ????
      6c:	86 00       	.word	0x0086	; ????
      6e:	89 00       	.word	0x0089	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 ea       	ldi	r30, 0xA4	; 164
      84:	f0 e2       	ldi	r31, 0x20	; 32
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 32       	cpi	r26, 0x22	; 34
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a2 e2       	ldi	r26, 0x22	; 34
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ad 37       	cpi	r26, 0x7D	; 125
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <main>
      a6:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:
#include "lcd.h"



void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
      b6:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      b8:	87 eb       	ldi	r24, 0xB7	; 183
      ba:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
      be:	87 e0       	ldi	r24, 0x07	; 7
      c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
      c4:	8f e0       	ldi	r24, 0x0F	; 15
      c6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
      ca:	80 ec       	ldi	r24, 0xC0	; 192
      cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
      d0:	08 95       	ret

000000d2 <getValueArray>:
}

int getValueArray(int i){

    switch (i)
      d2:	8a 30       	cpi	r24, 0x0A	; 10
      d4:	91 05       	cpc	r25, r1
      d6:	00 f5       	brcc	.+64     	; 0x118 <getValueArray+0x46>
      d8:	fc 01       	movw	r30, r24
      da:	e2 5d       	subi	r30, 0xD2	; 210
      dc:	ff 4f       	sbci	r31, 0xFF	; 255
      de:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__tablejump2__>
    {
    case 0:
        return ZeroValue;

    case 1:
        return OneValue;
      e2:	80 e8       	ldi	r24, 0x80	; 128
      e4:	90 e2       	ldi	r25, 0x20	; 32
      e6:	08 95       	ret
    
    case 2:
        return TwoValue;
      e8:	81 e1       	ldi	r24, 0x11	; 17
      ea:	9e e1       	ldi	r25, 0x1E	; 30
      ec:	08 95       	ret

    case 3:
        return ThreeValue;
      ee:	81 e1       	ldi	r24, 0x11	; 17
      f0:	9b e1       	ldi	r25, 0x1B	; 27
      f2:	08 95       	ret
    
    case 4:
        return FourValue;
      f4:	80 e5       	ldi	r24, 0x50	; 80
      f6:	9b e0       	ldi	r25, 0x0B	; 11
      f8:	08 95       	ret

    case 5:
        return FiveValue;
      fa:	81 e4       	ldi	r24, 0x41	; 65
      fc:	9b e1       	ldi	r25, 0x1B	; 27
      fe:	08 95       	ret
    
    case 6:
        return SixValue;
     100:	81 e4       	ldi	r24, 0x41	; 65
     102:	9f e1       	ldi	r25, 0x1F	; 31
     104:	08 95       	ret
    
    case 7:
        return SevenValue;
     106:	81 e1       	ldi	r24, 0x11	; 17
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
        
    case 8:
        return EightValue;
     10c:	81 e5       	ldi	r24, 0x51	; 81
     10e:	9f e1       	ldi	r25, 0x1F	; 31
     110:	08 95       	ret
    
    case 9:
        return NineValue;
     112:	81 e5       	ldi	r24, 0x51	; 81
     114:	9b e0       	ldi	r25, 0x0B	; 11
     116:	08 95       	ret
    
    default: // 10
        return BlankValue;
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
int getValueArray(int i){

    switch (i)
    {
    case 0:
        return ZeroValue;
     11e:	81 e5       	ldi	r24, 0x51	; 81
     120:	95 e1       	ldi	r25, 0x15	; 21
        return NineValue;
    
    default: // 10
        return BlankValue;
    }
}
     122:	08 95       	ret

00000124 <writeChar>:


void writeChar(char ch, int pos) {
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <writeChar+0xc>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62

	volatile int i = 0;
     134:	1a 82       	std	Y+2, r1	; 0x02
     136:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
     138:	66 30       	cpi	r22, 0x06	; 6
     13a:	71 05       	cpc	r23, r1
     13c:	08 f0       	brcs	.+2      	; 0x140 <writeChar+0x1c>
     13e:	fe c1       	rjmp	.+1020   	; 0x53c <__stack+0x3d>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
     140:	90 ed       	ldi	r25, 0xD0	; 208
     142:	98 0f       	add	r25, r24
     144:	9a 30       	cpi	r25, 0x0A	; 10
     146:	28 f0       	brcs	.+10     	; 0x152 <writeChar+0x2e>
		i=10;
     148:	8a e0       	ldi	r24, 0x0A	; 10
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	9a 83       	std	Y+2, r25	; 0x02
     14e:	89 83       	std	Y+1, r24	; 0x01
     150:	04 c0       	rjmp	.+8      	; 0x15a <writeChar+0x36>
	}else{
        i = ch - 48;
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	c0 97       	sbiw	r24, 0x30	; 48
     156:	9a 83       	std	Y+2, r25	; 0x02
     158:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
     15a:	61 15       	cp	r22, r1
     15c:	71 05       	cpc	r23, r1
     15e:	09 f0       	breq	.+2      	; 0x162 <writeChar+0x3e>
     160:	4e c0       	rjmp	.+156    	; 0x1fe <writeChar+0xda>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&getValueArray(i))<<0;
     162:	0f 2e       	mov	r0, r31
     164:	fc ee       	ldi	r31, 0xEC	; 236
     166:	ef 2e       	mov	r14, r31
     168:	f1 2c       	mov	r15, r1
     16a:	f0 2d       	mov	r31, r0
     16c:	f7 01       	movw	r30, r14
     16e:	10 81       	ld	r17, Z
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	9a 81       	ldd	r25, Y+2	; 0x02
     174:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     178:	10 7f       	andi	r17, 0xF0	; 240
     17a:	8f 70       	andi	r24, 0x0F	; 15
     17c:	81 2b       	or	r24, r17
     17e:	f7 01       	movw	r30, r14
     180:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     182:	0f 2e       	mov	r0, r31
     184:	f1 ef       	ldi	r31, 0xF1	; 241
     186:	ef 2e       	mov	r14, r31
     188:	f1 2c       	mov	r15, r1
     18a:	f0 2d       	mov	r31, r0
     18c:	f7 01       	movw	r30, r14
     18e:	10 81       	ld	r17, Z
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     198:	80 7f       	andi	r24, 0xF0	; 240
     19a:	99 27       	eor	r25, r25
     19c:	95 95       	asr	r25
     19e:	87 95       	ror	r24
     1a0:	95 95       	asr	r25
     1a2:	87 95       	ror	r24
     1a4:	95 95       	asr	r25
     1a6:	87 95       	ror	r24
     1a8:	95 95       	asr	r25
     1aa:	87 95       	ror	r24
     1ac:	10 7f       	andi	r17, 0xF0	; 240
     1ae:	81 2b       	or	r24, r17
     1b0:	f7 01       	movw	r30, r14
     1b2:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     1b4:	0f 2e       	mov	r0, r31
     1b6:	f6 ef       	ldi	r31, 0xF6	; 246
     1b8:	ef 2e       	mov	r14, r31
     1ba:	f1 2c       	mov	r15, r1
     1bc:	f0 2d       	mov	r31, r0
     1be:	f7 01       	movw	r30, r14
     1c0:	10 81       	ld	r17, Z
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     1ca:	88 27       	eor	r24, r24
     1cc:	9f 70       	andi	r25, 0x0F	; 15
     1ce:	10 7f       	andi	r17, 0xF0	; 240
     1d0:	19 2b       	or	r17, r25
     1d2:	f7 01       	movw	r30, r14
     1d4:	10 83       	st	Z, r17
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     1d6:	0f 2e       	mov	r0, r31
     1d8:	fb ef       	ldi	r31, 0xFB	; 251
     1da:	ef 2e       	mov	r14, r31
     1dc:	f1 2c       	mov	r15, r1
     1de:	f0 2d       	mov	r31, r0
     1e0:	f7 01       	movw	r30, r14
     1e2:	10 81       	ld	r17, Z
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     1ec:	10 7f       	andi	r17, 0xF0	; 240
     1ee:	95 95       	asr	r25
     1f0:	95 95       	asr	r25
     1f2:	95 95       	asr	r25
     1f4:	95 95       	asr	r25
     1f6:	91 2b       	or	r25, r17
     1f8:	f7 01       	movw	r30, r14
     1fa:	90 83       	st	Z, r25
     1fc:	9f c1       	rjmp	.+830    	; 0x53c <__stack+0x3d>
		
	} else if(pos==1){
     1fe:	61 30       	cpi	r22, 0x01	; 1
     200:	71 05       	cpc	r23, r1
     202:	09 f0       	breq	.+2      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
     204:	50 c0       	rjmp	.+160    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&getValueArray(i))<<4);
     206:	0f 2e       	mov	r0, r31
     208:	fc ee       	ldi	r31, 0xEC	; 236
     20a:	ef 2e       	mov	r14, r31
     20c:	f1 2c       	mov	r15, r1
     20e:	f0 2d       	mov	r31, r0
     210:	f7 01       	movw	r30, r14
     212:	10 81       	ld	r17, Z
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	9a 81       	ldd	r25, Y+2	; 0x02
     218:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     21c:	1f 70       	andi	r17, 0x0F	; 15
     21e:	82 95       	swap	r24
     220:	92 95       	swap	r25
     222:	90 7f       	andi	r25, 0xF0	; 240
     224:	98 27       	eor	r25, r24
     226:	80 7f       	andi	r24, 0xF0	; 240
     228:	98 27       	eor	r25, r24
     22a:	81 2b       	or	r24, r17
     22c:	f7 01       	movw	r30, r14
     22e:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     230:	0f 2e       	mov	r0, r31
     232:	f1 ef       	ldi	r31, 0xF1	; 241
     234:	ef 2e       	mov	r14, r31
     236:	f1 2c       	mov	r15, r1
     238:	f0 2d       	mov	r31, r0
     23a:	f7 01       	movw	r30, r14
     23c:	10 81       	ld	r17, Z
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     246:	1f 70       	andi	r17, 0x0F	; 15
     248:	80 7f       	andi	r24, 0xF0	; 240
     24a:	81 2b       	or	r24, r17
     24c:	f7 01       	movw	r30, r14
     24e:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     250:	0f 2e       	mov	r0, r31
     252:	f6 ef       	ldi	r31, 0xF6	; 246
     254:	ef 2e       	mov	r14, r31
     256:	f1 2c       	mov	r15, r1
     258:	f0 2d       	mov	r31, r0
     25a:	f7 01       	movw	r30, r14
     25c:	10 81       	ld	r17, Z
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     266:	88 27       	eor	r24, r24
     268:	9f 70       	andi	r25, 0x0F	; 15
     26a:	95 95       	asr	r25
     26c:	87 95       	ror	r24
     26e:	95 95       	asr	r25
     270:	87 95       	ror	r24
     272:	95 95       	asr	r25
     274:	87 95       	ror	r24
     276:	95 95       	asr	r25
     278:	87 95       	ror	r24
     27a:	1f 70       	andi	r17, 0x0F	; 15
     27c:	81 2b       	or	r24, r17
     27e:	f7 01       	movw	r30, r14
     280:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     282:	0f 2e       	mov	r0, r31
     284:	fb ef       	ldi	r31, 0xFB	; 251
     286:	ef 2e       	mov	r14, r31
     288:	f1 2c       	mov	r15, r1
     28a:	f0 2d       	mov	r31, r0
     28c:	f7 01       	movw	r30, r14
     28e:	10 81       	ld	r17, Z
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     298:	88 27       	eor	r24, r24
     29a:	90 7f       	andi	r25, 0xF0	; 240
     29c:	1f 70       	andi	r17, 0x0F	; 15
     29e:	19 2b       	or	r17, r25
     2a0:	f7 01       	movw	r30, r14
     2a2:	10 83       	st	Z, r17
     2a4:	4b c1       	rjmp	.+662    	; 0x53c <__stack+0x3d>
	} else if(pos==2){
     2a6:	62 30       	cpi	r22, 0x02	; 2
     2a8:	71 05       	cpc	r23, r1
     2aa:	09 f0       	breq	.+2      	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
     2ac:	4e c0       	rjmp	.+156    	; 0x34a <__EEPROM_REGION_LENGTH__+0x14a>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&getValueArray(i))<<0;
     2ae:	0f 2e       	mov	r0, r31
     2b0:	fd ee       	ldi	r31, 0xED	; 237
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f1 2c       	mov	r15, r1
     2b6:	f0 2d       	mov	r31, r0
     2b8:	f7 01       	movw	r30, r14
     2ba:	10 81       	ld	r17, Z
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
     2c0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     2c4:	10 7f       	andi	r17, 0xF0	; 240
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	81 2b       	or	r24, r17
     2ca:	f7 01       	movw	r30, r14
     2cc:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     2ce:	0f 2e       	mov	r0, r31
     2d0:	f2 ef       	ldi	r31, 0xF2	; 242
     2d2:	ef 2e       	mov	r14, r31
     2d4:	f1 2c       	mov	r15, r1
     2d6:	f0 2d       	mov	r31, r0
     2d8:	f7 01       	movw	r30, r14
     2da:	10 81       	ld	r17, Z
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     2e4:	80 7f       	andi	r24, 0xF0	; 240
     2e6:	99 27       	eor	r25, r25
     2e8:	95 95       	asr	r25
     2ea:	87 95       	ror	r24
     2ec:	95 95       	asr	r25
     2ee:	87 95       	ror	r24
     2f0:	95 95       	asr	r25
     2f2:	87 95       	ror	r24
     2f4:	95 95       	asr	r25
     2f6:	87 95       	ror	r24
     2f8:	10 7f       	andi	r17, 0xF0	; 240
     2fa:	81 2b       	or	r24, r17
     2fc:	f7 01       	movw	r30, r14
     2fe:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     300:	0f 2e       	mov	r0, r31
     302:	f7 ef       	ldi	r31, 0xF7	; 247
     304:	ef 2e       	mov	r14, r31
     306:	f1 2c       	mov	r15, r1
     308:	f0 2d       	mov	r31, r0
     30a:	f7 01       	movw	r30, r14
     30c:	10 81       	ld	r17, Z
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     316:	88 27       	eor	r24, r24
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	10 7f       	andi	r17, 0xF0	; 240
     31c:	19 2b       	or	r17, r25
     31e:	f7 01       	movw	r30, r14
     320:	10 83       	st	Z, r17
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     322:	0f 2e       	mov	r0, r31
     324:	fc ef       	ldi	r31, 0xFC	; 252
     326:	ef 2e       	mov	r14, r31
     328:	f1 2c       	mov	r15, r1
     32a:	f0 2d       	mov	r31, r0
     32c:	f7 01       	movw	r30, r14
     32e:	10 81       	ld	r17, Z
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	9a 81       	ldd	r25, Y+2	; 0x02
     334:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     338:	10 7f       	andi	r17, 0xF0	; 240
     33a:	95 95       	asr	r25
     33c:	95 95       	asr	r25
     33e:	95 95       	asr	r25
     340:	95 95       	asr	r25
     342:	91 2b       	or	r25, r17
     344:	f7 01       	movw	r30, r14
     346:	90 83       	st	Z, r25
     348:	f9 c0       	rjmp	.+498    	; 0x53c <__stack+0x3d>
		
	} else if(pos==3){
     34a:	63 30       	cpi	r22, 0x03	; 3
     34c:	71 05       	cpc	r23, r1
     34e:	09 f0       	breq	.+2      	; 0x352 <__EEPROM_REGION_LENGTH__+0x152>
     350:	50 c0       	rjmp	.+160    	; 0x3f2 <__EEPROM_REGION_LENGTH__+0x1f2>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&getValueArray(i))<<4);
     352:	0f 2e       	mov	r0, r31
     354:	fd ee       	ldi	r31, 0xED	; 237
     356:	ef 2e       	mov	r14, r31
     358:	f1 2c       	mov	r15, r1
     35a:	f0 2d       	mov	r31, r0
     35c:	f7 01       	movw	r30, r14
     35e:	10 81       	ld	r17, Z
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	9a 81       	ldd	r25, Y+2	; 0x02
     364:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     368:	1f 70       	andi	r17, 0x0F	; 15
     36a:	82 95       	swap	r24
     36c:	92 95       	swap	r25
     36e:	90 7f       	andi	r25, 0xF0	; 240
     370:	98 27       	eor	r25, r24
     372:	80 7f       	andi	r24, 0xF0	; 240
     374:	98 27       	eor	r25, r24
     376:	81 2b       	or	r24, r17
     378:	f7 01       	movw	r30, r14
     37a:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     37c:	0f 2e       	mov	r0, r31
     37e:	f2 ef       	ldi	r31, 0xF2	; 242
     380:	ef 2e       	mov	r14, r31
     382:	f1 2c       	mov	r15, r1
     384:	f0 2d       	mov	r31, r0
     386:	f7 01       	movw	r30, r14
     388:	10 81       	ld	r17, Z
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     392:	1f 70       	andi	r17, 0x0F	; 15
     394:	80 7f       	andi	r24, 0xF0	; 240
     396:	81 2b       	or	r24, r17
     398:	f7 01       	movw	r30, r14
     39a:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     39c:	0f 2e       	mov	r0, r31
     39e:	f7 ef       	ldi	r31, 0xF7	; 247
     3a0:	ef 2e       	mov	r14, r31
     3a2:	f1 2c       	mov	r15, r1
     3a4:	f0 2d       	mov	r31, r0
     3a6:	f7 01       	movw	r30, r14
     3a8:	10 81       	ld	r17, Z
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     3b2:	88 27       	eor	r24, r24
     3b4:	9f 70       	andi	r25, 0x0F	; 15
     3b6:	95 95       	asr	r25
     3b8:	87 95       	ror	r24
     3ba:	95 95       	asr	r25
     3bc:	87 95       	ror	r24
     3be:	95 95       	asr	r25
     3c0:	87 95       	ror	r24
     3c2:	95 95       	asr	r25
     3c4:	87 95       	ror	r24
     3c6:	1f 70       	andi	r17, 0x0F	; 15
     3c8:	81 2b       	or	r24, r17
     3ca:	f7 01       	movw	r30, r14
     3cc:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     3ce:	0f 2e       	mov	r0, r31
     3d0:	fc ef       	ldi	r31, 0xFC	; 252
     3d2:	ef 2e       	mov	r14, r31
     3d4:	f1 2c       	mov	r15, r1
     3d6:	f0 2d       	mov	r31, r0
     3d8:	f7 01       	movw	r30, r14
     3da:	10 81       	ld	r17, Z
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     3e4:	88 27       	eor	r24, r24
     3e6:	90 7f       	andi	r25, 0xF0	; 240
     3e8:	1f 70       	andi	r17, 0x0F	; 15
     3ea:	19 2b       	or	r17, r25
     3ec:	f7 01       	movw	r30, r14
     3ee:	10 83       	st	Z, r17
     3f0:	a5 c0       	rjmp	.+330    	; 0x53c <__stack+0x3d>
		
	} else if(pos==4){
     3f2:	64 30       	cpi	r22, 0x04	; 4
     3f4:	71 05       	cpc	r23, r1
     3f6:	09 f0       	breq	.+2      	; 0x3fa <__EEPROM_REGION_LENGTH__+0x1fa>
     3f8:	4e c0       	rjmp	.+156    	; 0x496 <__DATA_REGION_LENGTH__+0x96>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&getValueArray(i))<<0;
     3fa:	0f 2e       	mov	r0, r31
     3fc:	fe ee       	ldi	r31, 0xEE	; 238
     3fe:	ef 2e       	mov	r14, r31
     400:	f1 2c       	mov	r15, r1
     402:	f0 2d       	mov	r31, r0
     404:	f7 01       	movw	r30, r14
     406:	10 81       	ld	r17, Z
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	9a 81       	ldd	r25, Y+2	; 0x02
     40c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     410:	10 7f       	andi	r17, 0xF0	; 240
     412:	8f 70       	andi	r24, 0x0F	; 15
     414:	81 2b       	or	r24, r17
     416:	f7 01       	movw	r30, r14
     418:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     41a:	0f 2e       	mov	r0, r31
     41c:	f3 ef       	ldi	r31, 0xF3	; 243
     41e:	ef 2e       	mov	r14, r31
     420:	f1 2c       	mov	r15, r1
     422:	f0 2d       	mov	r31, r0
     424:	f7 01       	movw	r30, r14
     426:	10 81       	ld	r17, Z
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     430:	80 7f       	andi	r24, 0xF0	; 240
     432:	99 27       	eor	r25, r25
     434:	95 95       	asr	r25
     436:	87 95       	ror	r24
     438:	95 95       	asr	r25
     43a:	87 95       	ror	r24
     43c:	95 95       	asr	r25
     43e:	87 95       	ror	r24
     440:	95 95       	asr	r25
     442:	87 95       	ror	r24
     444:	10 7f       	andi	r17, 0xF0	; 240
     446:	81 2b       	or	r24, r17
     448:	f7 01       	movw	r30, r14
     44a:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     44c:	0f 2e       	mov	r0, r31
     44e:	f8 ef       	ldi	r31, 0xF8	; 248
     450:	ef 2e       	mov	r14, r31
     452:	f1 2c       	mov	r15, r1
     454:	f0 2d       	mov	r31, r0
     456:	f7 01       	movw	r30, r14
     458:	10 81       	ld	r17, Z
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     462:	88 27       	eor	r24, r24
     464:	9f 70       	andi	r25, 0x0F	; 15
     466:	10 7f       	andi	r17, 0xF0	; 240
     468:	19 2b       	or	r17, r25
     46a:	f7 01       	movw	r30, r14
     46c:	10 83       	st	Z, r17
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     46e:	0f 2e       	mov	r0, r31
     470:	fd ef       	ldi	r31, 0xFD	; 253
     472:	ef 2e       	mov	r14, r31
     474:	f1 2c       	mov	r15, r1
     476:	f0 2d       	mov	r31, r0
     478:	f7 01       	movw	r30, r14
     47a:	10 81       	ld	r17, Z
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	9a 81       	ldd	r25, Y+2	; 0x02
     480:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     484:	10 7f       	andi	r17, 0xF0	; 240
     486:	95 95       	asr	r25
     488:	95 95       	asr	r25
     48a:	95 95       	asr	r25
     48c:	95 95       	asr	r25
     48e:	91 2b       	or	r25, r17
     490:	f7 01       	movw	r30, r14
     492:	90 83       	st	Z, r25
     494:	53 c0       	rjmp	.+166    	; 0x53c <__stack+0x3d>
		
	} else if(pos==5){
     496:	65 30       	cpi	r22, 0x05	; 5
     498:	71 05       	cpc	r23, r1
     49a:	09 f0       	breq	.+2      	; 0x49e <__DATA_REGION_LENGTH__+0x9e>
     49c:	4f c0       	rjmp	.+158    	; 0x53c <__stack+0x3d>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&getValueArray(i))<<4);
     49e:	0f 2e       	mov	r0, r31
     4a0:	fe ee       	ldi	r31, 0xEE	; 238
     4a2:	ef 2e       	mov	r14, r31
     4a4:	f1 2c       	mov	r15, r1
     4a6:	f0 2d       	mov	r31, r0
     4a8:	f7 01       	movw	r30, r14
     4aa:	10 81       	ld	r17, Z
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4b4:	1f 70       	andi	r17, 0x0F	; 15
     4b6:	82 95       	swap	r24
     4b8:	92 95       	swap	r25
     4ba:	90 7f       	andi	r25, 0xF0	; 240
     4bc:	98 27       	eor	r25, r24
     4be:	80 7f       	andi	r24, 0xF0	; 240
     4c0:	98 27       	eor	r25, r24
     4c2:	81 2b       	or	r24, r17
     4c4:	f7 01       	movw	r30, r14
     4c6:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     4c8:	0f 2e       	mov	r0, r31
     4ca:	f3 ef       	ldi	r31, 0xF3	; 243
     4cc:	ef 2e       	mov	r14, r31
     4ce:	f1 2c       	mov	r15, r1
     4d0:	f0 2d       	mov	r31, r0
     4d2:	f7 01       	movw	r30, r14
     4d4:	10 81       	ld	r17, Z
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4de:	1f 70       	andi	r17, 0x0F	; 15
     4e0:	80 7f       	andi	r24, 0xF0	; 240
     4e2:	81 2b       	or	r24, r17
     4e4:	f7 01       	movw	r30, r14
     4e6:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     4e8:	0f 2e       	mov	r0, r31
     4ea:	f8 ef       	ldi	r31, 0xF8	; 248
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f1 2c       	mov	r15, r1
     4f0:	f0 2d       	mov	r31, r0
     4f2:	f7 01       	movw	r30, r14
     4f4:	10 81       	ld	r17, Z
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4fe:	88 27       	eor	r24, r24
     500:	9f 70       	andi	r25, 0x0F	; 15
     502:	95 95       	asr	r25
     504:	87 95       	ror	r24
     506:	95 95       	asr	r25
     508:	87 95       	ror	r24
     50a:	95 95       	asr	r25
     50c:	87 95       	ror	r24
     50e:	95 95       	asr	r25
     510:	87 95       	ror	r24
     512:	1f 70       	andi	r17, 0x0F	; 15
     514:	81 2b       	or	r24, r17
     516:	f7 01       	movw	r30, r14
     518:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     51a:	0f 2e       	mov	r0, r31
     51c:	fd ef       	ldi	r31, 0xFD	; 253
     51e:	ef 2e       	mov	r14, r31
     520:	f1 2c       	mov	r15, r1
     522:	f0 2d       	mov	r31, r0
     524:	f7 01       	movw	r30, r14
     526:	10 81       	ld	r17, Z
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     530:	88 27       	eor	r24, r24
     532:	90 7f       	andi	r25, 0xF0	; 240
     534:	1f 70       	andi	r17, 0x0F	; 15
     536:	19 2b       	or	r17, r25
     538:	f7 01       	movw	r30, r14
     53a:	10 83       	st	Z, r17
		
	}
	

}
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	08 95       	ret

0000054c <printAt>:

void printAt(long num, int pos) {
     54c:	8f 92       	push	r8
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	4b 01       	movw	r8, r22
     562:	5c 01       	movw	r10, r24
     564:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     566:	24 e6       	ldi	r18, 0x64	; 100
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodsi4>
     572:	0f 2e       	mov	r0, r31
     574:	fa e0       	ldi	r31, 0x0A	; 10
     576:	cf 2e       	mov	r12, r31
     578:	d1 2c       	mov	r13, r1
     57a:	e1 2c       	mov	r14, r1
     57c:	f1 2c       	mov	r15, r1
     57e:	f0 2d       	mov	r31, r0
     580:	a7 01       	movw	r20, r14
     582:	96 01       	movw	r18, r12
     584:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodsi4>
     588:	be 01       	movw	r22, r28
     58a:	80 e3       	ldi	r24, 0x30	; 48
     58c:	82 0f       	add	r24, r18
     58e:	0e 94 92 00 	call	0x124	; 0x124 <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     592:	21 96       	adiw	r28, 0x01	; 1
     594:	c5 01       	movw	r24, r10
     596:	b4 01       	movw	r22, r8
     598:	a7 01       	movw	r20, r14
     59a:	96 01       	movw	r18, r12
     59c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodsi4>
     5a0:	86 2f       	mov	r24, r22
     5a2:	be 01       	movw	r22, r28
     5a4:	80 5d       	subi	r24, 0xD0	; 208
     5a6:	0e 94 92 00 	call	0x124	; 0x124 <writeChar>
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	08 95       	ret

000005c0 <lightUpdate>:
    }
    updateLCD(self);
}

void lightUpdate(lightsObject* self){
    if(self->direction == north){
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 89       	ldd	r18, Z+16	; 0x10
     5c4:	31 89       	ldd	r19, Z+17	; 0x11
     5c6:	21 30       	cpi	r18, 0x01	; 1
     5c8:	31 05       	cpc	r19, r1
     5ca:	29 f4       	brne	.+10     	; 0x5d6 <lightUpdate+0x16>
        self->direction == south;
        self->southLight = 1;
     5cc:	21 e0       	ldi	r18, 0x01	; 1
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	35 87       	std	Z+13, r19	; 0x0d
     5d2:	24 87       	std	Z+12, r18	; 0x0c
     5d4:	08 95       	ret
        //send info to pc about light switch
    }else if(self->direction == south){
     5d6:	23 2b       	or	r18, r19
     5d8:	29 f4       	brne	.+10     	; 0x5e4 <lightUpdate+0x24>
        self->direction == north;
        self->northLight = 1;
     5da:	21 e0       	ldi	r18, 0x01	; 1
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	fc 01       	movw	r30, r24
     5e0:	37 87       	std	Z+15, r19	; 0x0f
     5e2:	26 87       	std	Z+14, r18	; 0x0e
     5e4:	08 95       	ret

000005e6 <main>:


int main( void )
{

    TINYTIMBER(&mainObj, run, NULL);
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	68 e4       	ldi	r22, 0x48	; 72
     5ec:	73 e0       	ldi	r23, 0x03	; 3
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <tinytimber>
     5f6:	ff cf       	rjmp	.-2      	; 0x5f6 <main+0x10>

000005f8 <sensorRead>:

#include "run.h"


void sensorRead(runObj* self){
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	ec 01       	movw	r28, r24
    SYNC(self->serial, USART_Receive, NULL );
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	6f eb       	ldi	r22, 0xBF	; 191
     604:	7f e0       	ldi	r23, 0x0F	; 15
     606:	8c 81       	ldd	r24, Y+4	; 0x04
     608:	9d 81       	ldd	r25, Y+5	; 0x05
     60a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <sync>

	if(self->serial->inData & (1)){ // true if north car arrival
     60e:	ec 81       	ldd	r30, Y+4	; 0x04
     610:	fd 81       	ldd	r31, Y+5	; 0x05
     612:	84 81       	ldd	r24, Z+4	; 0x04
     614:	80 ff       	sbrs	r24, 0
     616:	07 c0       	rjmp	.+14     	; 0x626 <sensorRead+0x2e>
        self->lights->carsNorth++;
     618:	ee 81       	ldd	r30, Y+6	; 0x06
     61a:	ff 81       	ldd	r31, Y+7	; 0x07
     61c:	80 85       	ldd	r24, Z+8	; 0x08
     61e:	91 85       	ldd	r25, Z+9	; 0x09
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	91 87       	std	Z+9, r25	; 0x09
     624:	80 87       	std	Z+8, r24	; 0x08
		    
	}if(self->serial->inData & (1<<1)){ // true if north car bridge entry
     626:	ec 81       	ldd	r30, Y+4	; 0x04
     628:	fd 81       	ldd	r31, Y+5	; 0x05
     62a:	84 81       	ldd	r24, Z+4	; 0x04
     62c:	81 ff       	sbrs	r24, 1
     62e:	0e c0       	rjmp	.+28     	; 0x64c <sensorRead+0x54>
        self->lights->carsNorth--;
     630:	ee 81       	ldd	r30, Y+6	; 0x06
     632:	ff 81       	ldd	r31, Y+7	; 0x07
     634:	80 85       	ldd	r24, Z+8	; 0x08
     636:	91 85       	ldd	r25, Z+9	; 0x09
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	91 87       	std	Z+9, r25	; 0x09
     63c:	80 87       	std	Z+8, r24	; 0x08
        self->lights->carsOnBridge++;
     63e:	ee 81       	ldd	r30, Y+6	; 0x06
     640:	ff 81       	ldd	r31, Y+7	; 0x07
     642:	86 81       	ldd	r24, Z+6	; 0x06
     644:	97 81       	ldd	r25, Z+7	; 0x07
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	97 83       	std	Z+7, r25	; 0x07
     64a:	86 83       	std	Z+6, r24	; 0x06

	}if(self->serial->inData & (1<<2)){ // true if south car arrival
     64c:	ec 81       	ldd	r30, Y+4	; 0x04
     64e:	fd 81       	ldd	r31, Y+5	; 0x05
     650:	84 81       	ldd	r24, Z+4	; 0x04
     652:	82 ff       	sbrs	r24, 2
     654:	07 c0       	rjmp	.+14     	; 0x664 <sensorRead+0x6c>
        self->lights->carsSouth++;
     656:	ee 81       	ldd	r30, Y+6	; 0x06
     658:	ff 81       	ldd	r31, Y+7	; 0x07
     65a:	82 85       	ldd	r24, Z+10	; 0x0a
     65c:	93 85       	ldd	r25, Z+11	; 0x0b
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	93 87       	std	Z+11, r25	; 0x0b
     662:	82 87       	std	Z+10, r24	; 0x0a

	}if(self->serial->inData & (1<<3)){ // true if south car bridge entry
     664:	ec 81       	ldd	r30, Y+4	; 0x04
     666:	fd 81       	ldd	r31, Y+5	; 0x05
     668:	84 81       	ldd	r24, Z+4	; 0x04
     66a:	83 ff       	sbrs	r24, 3
     66c:	0e c0       	rjmp	.+28     	; 0x68a <sensorRead+0x92>
        self->lights->carsSouth--;
     66e:	ee 81       	ldd	r30, Y+6	; 0x06
     670:	ff 81       	ldd	r31, Y+7	; 0x07
     672:	82 85       	ldd	r24, Z+10	; 0x0a
     674:	93 85       	ldd	r25, Z+11	; 0x0b
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	93 87       	std	Z+11, r25	; 0x0b
     67a:	82 87       	std	Z+10, r24	; 0x0a
        self->lights->carsOnBridge++;
     67c:	ee 81       	ldd	r30, Y+6	; 0x06
     67e:	ff 81       	ldd	r31, Y+7	; 0x07
     680:	86 81       	ldd	r24, Z+6	; 0x06
     682:	97 81       	ldd	r25, Z+7	; 0x07
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	97 83       	std	Z+7, r25	; 0x07
     688:	86 83       	std	Z+6, r24	; 0x06

	}

	

}
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <run>:

void run(runObj* self){
     690:	ec 01       	movw	r28, r24
    LCD_Init();
     692:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
    USART_Init (self->serial);
     696:	8c 81       	ldd	r24, Y+4	; 0x04
     698:	9d 81       	ldd	r25, Y+5	; 0x05
     69a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <USART_Init>

    INSTALL(self, sensorRead, IRQ_USART0_RX);
     69e:	48 e0       	ldi	r20, 0x08	; 8
     6a0:	6c ef       	ldi	r22, 0xFC	; 252
     6a2:	72 e0       	ldi	r23, 0x02	; 2
     6a4:	ce 01       	movw	r24, r28
     6a6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <install>

    ASYNC(self->lights, lightUpdate, NULL);
     6aa:	0e 81       	ldd	r16, Y+6	; 0x06
     6ac:	1f 81       	ldd	r17, Y+7	; 0x07
     6ae:	c1 2c       	mov	r12, r1
     6b0:	d1 2c       	mov	r13, r1
     6b2:	0f 2e       	mov	r0, r31
     6b4:	f0 ee       	ldi	r31, 0xE0	; 224
     6b6:	ef 2e       	mov	r14, r31
     6b8:	f2 e0       	ldi	r31, 0x02	; 2
     6ba:	ff 2e       	mov	r15, r31
     6bc:	f0 2d       	mov	r31, r0
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	a9 01       	movw	r20, r18
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	cb 01       	movw	r24, r22
     6ca:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <async>

    //INSTALL(self,interupts, IRQ_USART0_RX);
    //INSTALL(self,interupts, IRQ_USART0_UDRE);
    //INSTALL(self,interupts, IRQ_USART0_TX);
    printAt(0, 4);
     6ce:	44 e0       	ldi	r20, 0x04	; 4
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	cb 01       	movw	r24, r22
     6d8:	0e 94 a6 02 	call	0x54c	; 0x54c <printAt>
     6dc:	ff cf       	rjmp	.-2      	; 0x6dc <run+0x4c>

000006de <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <initialize+0x6>
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <initialize+0x8>
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	8d e1       	ldi	r24, 0x1D	; 29
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	2d ef       	ldi	r18, 0xFD	; 253
     6f0:	32 e0       	ldi	r19, 0x02	; 2
     6f2:	fc 01       	movw	r30, r24
     6f4:	70 97       	sbiw	r30, 0x10	; 16
     6f6:	91 83       	std	Z+1, r25	; 0x01
     6f8:	80 83       	st	Z, r24
     6fa:	40 96       	adiw	r24, 0x10	; 16
     6fc:	82 17       	cp	r24, r18
     6fe:	93 07       	cpc	r25, r19
     700:	c1 f7       	brne	.-16     	; 0x6f2 <initialize+0x14>
     702:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <messages+0xe1>
     706:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <messages+0xe0>
     70a:	e8 e5       	ldi	r30, 0x58	; 88
     70c:	f1 e0       	ldi	r31, 0x01	; 1
     70e:	85 e7       	ldi	r24, 0x75	; 117
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	91 83       	std	Z+1, r25	; 0x01
     714:	80 83       	st	Z, r24
     716:	82 e9       	ldi	r24, 0x92	; 146
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	96 8f       	std	Z+30, r25	; 0x1e
     71c:	85 8f       	std	Z+29, r24	; 0x1d
     71e:	af ea       	ldi	r26, 0xAF	; 175
     720:	b1 e0       	ldi	r27, 0x01	; 1
     722:	b3 af       	std	Z+59, r27	; 0x3b
     724:	a2 af       	std	Z+58, r26	; 0x3a
     726:	1d 92       	st	X+, r1
     728:	1c 92       	st	X, r1
     72a:	fa 83       	std	Y+2, r31	; 0x02
     72c:	e9 83       	std	Y+1, r30	; 0x01
     72e:	e9 e5       	ldi	r30, 0x59	; 89
     730:	f3 e0       	ldi	r31, 0x03	; 3
     732:	fc 83       	std	Y+4, r31	; 0x04
     734:	eb 83       	std	Y+3, r30	; 0x03
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	9a 81       	ldd	r25, Y+2	; 0x02
     73a:	06 96       	adiw	r24, 0x06	; 6
     73c:	0e 94 0f 10 	call	0x201e	; 0x201e <setjmp>
     740:	8b 81       	ldd	r24, Y+3	; 0x03
     742:	9c 81       	ldd	r25, Y+4	; 0x04
     744:	e9 81       	ldd	r30, Y+1	; 0x01
     746:	fa 81       	ldd	r31, Y+2	; 0x02
     748:	97 8b       	std	Z+23, r25	; 0x17
     74a:	86 8b       	std	Z+22, r24	; 0x16
     74c:	91 8f       	std	Z+25, r25	; 0x19
     74e:	80 8f       	std	Z+24, r24	; 0x18
     750:	8f e0       	ldi	r24, 0x0F	; 15
     752:	9f e0       	ldi	r25, 0x0F	; 15
     754:	94 8f       	std	Z+28, r25	; 0x1c
     756:	83 8f       	std	Z+27, r24	; 0x1b
     758:	15 82       	std	Z+5, r1	; 0x05
     75a:	14 82       	std	Z+4, r1	; 0x04
     75c:	7d 96       	adiw	r30, 0x1d	; 29
     75e:	fa 83       	std	Y+2, r31	; 0x02
     760:	e9 83       	std	Y+1, r30	; 0x01
     762:	eb 81       	ldd	r30, Y+3	; 0x03
     764:	fc 81       	ldd	r31, Y+4	; 0x04
     766:	e0 5a       	subi	r30, 0xA0	; 160
     768:	ff 4f       	sbci	r31, 0xFF	; 255
     76a:	fc 83       	std	Y+4, r31	; 0x04
     76c:	eb 83       	std	Y+3, r30	; 0x03
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	8c 5c       	subi	r24, 0xCC	; 204
     774:	91 40       	sbci	r25, 0x01	; 1
     776:	f9 f6       	brne	.-66     	; 0x736 <initialize+0x58>
     778:	e0 ef       	ldi	r30, 0xF0	; 240
     77a:	f1 e0       	ldi	r31, 0x01	; 1
     77c:	11 82       	std	Z+1, r1	; 0x01
     77e:	10 82       	st	Z, r1
     780:	15 82       	std	Z+5, r1	; 0x05
     782:	14 82       	std	Z+4, r1	; 0x04
     784:	13 82       	std	Z+3, r1	; 0x03
     786:	12 82       	std	Z+2, r1	; 0x02
     788:	e1 e6       	ldi	r30, 0x61	; 97
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 e8       	ldi	r24, 0x80	; 128
     78e:	80 83       	st	Z, r24
     790:	10 82       	st	Z, r1
     792:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     796:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     79a:	84 e0       	ldi	r24, 0x04	; 4
     79c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <dispatch>:
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <dispatch+0x6>
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	9a 83       	std	Y+2, r25	; 0x02
     7c0:	89 83       	std	Y+1, r24	; 0x01
     7c2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <current>
     7c6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <current+0x1>
     7ca:	06 96       	adiw	r24, 0x06	; 6
     7cc:	0e 94 0f 10 	call	0x201e	; 0x201e <setjmp>
     7d0:	89 2b       	or	r24, r25
     7d2:	59 f4       	brne	.+22     	; 0x7ea <dispatch+0x36>
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <current+0x1>
     7dc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <current>
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	06 96       	adiw	r24, 0x06	; 6
     7e6:	0e 94 2f 10 	call	0x205e	; 0x205e <longjmp>
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <schedule>:
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <msgQ>
     800:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <msgQ+0x1>
     804:	30 97       	sbiw	r30, 0x00	; 0
     806:	61 f1       	breq	.+88     	; 0x860 <schedule+0x6c>
     808:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <threadPool>
     80c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <threadPool+0x1>
     810:	00 97       	sbiw	r24, 0x00	; 0
     812:	31 f1       	breq	.+76     	; 0x860 <schedule+0x6c>
     814:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <activeStack>
     818:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <activeStack+0x1>
     81c:	aa 81       	ldd	r26, Y+2	; 0x02
     81e:	bb 81       	ldd	r27, Y+3	; 0x03
     820:	10 97       	sbiw	r26, 0x00	; 0
     822:	79 f0       	breq	.+30     	; 0x842 <schedule+0x4e>
     824:	46 81       	ldd	r20, Z+6	; 0x06
     826:	57 81       	ldd	r21, Z+7	; 0x07
     828:	60 85       	ldd	r22, Z+8	; 0x08
     82a:	71 85       	ldd	r23, Z+9	; 0x09
     82c:	16 96       	adiw	r26, 0x06	; 6
     82e:	0d 91       	ld	r16, X+
     830:	1d 91       	ld	r17, X+
     832:	2d 91       	ld	r18, X+
     834:	3c 91       	ld	r19, X
     836:	19 97       	sbiw	r26, 0x09	; 9
     838:	40 1b       	sub	r20, r16
     83a:	51 0b       	sbc	r21, r17
     83c:	62 0b       	sbc	r22, r18
     83e:	73 0b       	sbc	r23, r19
     840:	7a f4       	brpl	.+30     	; 0x860 <schedule+0x6c>
     842:	fc 01       	movw	r30, r24
     844:	20 81       	ld	r18, Z
     846:	31 81       	ldd	r19, Z+1	; 0x01
     848:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <threadPool+0x1>
     84c:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <threadPool>
     850:	d1 83       	std	Z+1, r29	; 0x01
     852:	c0 83       	st	Z, r28
     854:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <activeStack+0x1>
     858:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <activeStack>
     85c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <dispatch>
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	08 95       	ret

0000086a <__vector_1>:
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	2f 93       	push	r18
     876:	3f 93       	push	r19
     878:	4f 93       	push	r20
     87a:	5f 93       	push	r21
     87c:	6f 93       	push	r22
     87e:	7f 93       	push	r23
     880:	8f 93       	push	r24
     882:	9f 93       	push	r25
     884:	af 93       	push	r26
     886:	bf 93       	push	r27
     888:	ef 93       	push	r30
     88a:	ff 93       	push	r31
     88c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
     890:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
     894:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     898:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     89c:	c9 01       	movw	r24, r18
     89e:	03 2e       	mov	r0, r19
     8a0:	00 0c       	add	r0, r0
     8a2:	aa 0b       	sbc	r26, r26
     8a4:	bb 0b       	sbc	r27, r27
     8a6:	dc 01       	movw	r26, r24
     8a8:	99 27       	eor	r25, r25
     8aa:	88 27       	eor	r24, r24
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	84 2b       	or	r24, r20
     8b2:	95 2b       	or	r25, r21
     8b4:	a6 2b       	or	r26, r22
     8b6:	b7 2b       	or	r27, r23
     8b8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     8bc:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     8c0:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     8c4:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     8c8:	b0 9b       	sbis	0x16, 0	; 22
     8ca:	1b c0       	rjmp	.+54     	; 0x902 <__vector_1+0x98>
     8cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     8d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     8d4:	c9 01       	movw	r24, r18
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	09 2e       	mov	r0, r25
     8da:	00 0c       	add	r0, r0
     8dc:	aa 0b       	sbc	r26, r26
     8de:	bb 0b       	sbc	r27, r27
     8e0:	dc 01       	movw	r26, r24
     8e2:	99 27       	eor	r25, r25
     8e4:	88 27       	eor	r24, r24
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	84 2b       	or	r24, r20
     8ec:	95 2b       	or	r25, r21
     8ee:	a6 2b       	or	r26, r22
     8f0:	b7 2b       	or	r27, r23
     8f2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     8f6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     8fa:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     8fe:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     902:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable>
     906:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0x1>
     90a:	30 97       	sbiw	r30, 0x00	; 0
     90c:	39 f0       	breq	.+14     	; 0x91c <__vector_1+0xb2>
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable>
     916:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0x1>
     91a:	09 95       	icall
     91c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
     920:	ff 91       	pop	r31
     922:	ef 91       	pop	r30
     924:	bf 91       	pop	r27
     926:	af 91       	pop	r26
     928:	9f 91       	pop	r25
     92a:	8f 91       	pop	r24
     92c:	7f 91       	pop	r23
     92e:	6f 91       	pop	r22
     930:	5f 91       	pop	r21
     932:	4f 91       	pop	r20
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f 90       	pop	r0
     93e:	1f 90       	pop	r1
     940:	18 95       	reti

00000942 <__vector_2>:
     942:	1f 92       	push	r1
     944:	0f 92       	push	r0
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	0f 92       	push	r0
     94a:	11 24       	eor	r1, r1
     94c:	2f 93       	push	r18
     94e:	3f 93       	push	r19
     950:	4f 93       	push	r20
     952:	5f 93       	push	r21
     954:	6f 93       	push	r22
     956:	7f 93       	push	r23
     958:	8f 93       	push	r24
     95a:	9f 93       	push	r25
     95c:	af 93       	push	r26
     95e:	bf 93       	push	r27
     960:	ef 93       	push	r30
     962:	ff 93       	push	r31
     964:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
     968:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
     96c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     970:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     974:	c9 01       	movw	r24, r18
     976:	03 2e       	mov	r0, r19
     978:	00 0c       	add	r0, r0
     97a:	aa 0b       	sbc	r26, r26
     97c:	bb 0b       	sbc	r27, r27
     97e:	dc 01       	movw	r26, r24
     980:	99 27       	eor	r25, r25
     982:	88 27       	eor	r24, r24
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	84 2b       	or	r24, r20
     98a:	95 2b       	or	r25, r21
     98c:	a6 2b       	or	r26, r22
     98e:	b7 2b       	or	r27, r23
     990:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     994:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     998:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     99c:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     9a0:	b0 9b       	sbis	0x16, 0	; 22
     9a2:	1b c0       	rjmp	.+54     	; 0x9da <__vector_2+0x98>
     9a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     9a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9ac:	c9 01       	movw	r24, r18
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	09 2e       	mov	r0, r25
     9b2:	00 0c       	add	r0, r0
     9b4:	aa 0b       	sbc	r26, r26
     9b6:	bb 0b       	sbc	r27, r27
     9b8:	dc 01       	movw	r26, r24
     9ba:	99 27       	eor	r25, r25
     9bc:	88 27       	eor	r24, r24
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	84 2b       	or	r24, r20
     9c4:	95 2b       	or	r25, r21
     9c6:	a6 2b       	or	r26, r22
     9c8:	b7 2b       	or	r27, r23
     9ca:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     9ce:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     9d2:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     9d6:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     9da:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x2>
     9de:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x3>
     9e2:	30 97       	sbiw	r30, 0x00	; 0
     9e4:	39 f0       	breq	.+14     	; 0x9f4 <__vector_2+0xb2>
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x2>
     9ee:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x3>
     9f2:	09 95       	icall
     9f4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
     9f8:	ff 91       	pop	r31
     9fa:	ef 91       	pop	r30
     9fc:	bf 91       	pop	r27
     9fe:	af 91       	pop	r26
     a00:	9f 91       	pop	r25
     a02:	8f 91       	pop	r24
     a04:	7f 91       	pop	r23
     a06:	6f 91       	pop	r22
     a08:	5f 91       	pop	r21
     a0a:	4f 91       	pop	r20
     a0c:	3f 91       	pop	r19
     a0e:	2f 91       	pop	r18
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <__vector_3>:
     a1a:	1f 92       	push	r1
     a1c:	0f 92       	push	r0
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	0f 92       	push	r0
     a22:	11 24       	eor	r1, r1
     a24:	2f 93       	push	r18
     a26:	3f 93       	push	r19
     a28:	4f 93       	push	r20
     a2a:	5f 93       	push	r21
     a2c:	6f 93       	push	r22
     a2e:	7f 93       	push	r23
     a30:	8f 93       	push	r24
     a32:	9f 93       	push	r25
     a34:	af 93       	push	r26
     a36:	bf 93       	push	r27
     a38:	ef 93       	push	r30
     a3a:	ff 93       	push	r31
     a3c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
     a40:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
     a44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a4c:	c9 01       	movw	r24, r18
     a4e:	03 2e       	mov	r0, r19
     a50:	00 0c       	add	r0, r0
     a52:	aa 0b       	sbc	r26, r26
     a54:	bb 0b       	sbc	r27, r27
     a56:	dc 01       	movw	r26, r24
     a58:	99 27       	eor	r25, r25
     a5a:	88 27       	eor	r24, r24
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	84 2b       	or	r24, r20
     a62:	95 2b       	or	r25, r21
     a64:	a6 2b       	or	r26, r22
     a66:	b7 2b       	or	r27, r23
     a68:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     a6c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     a70:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     a74:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     a78:	b0 9b       	sbis	0x16, 0	; 22
     a7a:	1b c0       	rjmp	.+54     	; 0xab2 <__vector_3+0x98>
     a7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a84:	c9 01       	movw	r24, r18
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	09 2e       	mov	r0, r25
     a8a:	00 0c       	add	r0, r0
     a8c:	aa 0b       	sbc	r26, r26
     a8e:	bb 0b       	sbc	r27, r27
     a90:	dc 01       	movw	r26, r24
     a92:	99 27       	eor	r25, r25
     a94:	88 27       	eor	r24, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	84 2b       	or	r24, r20
     a9c:	95 2b       	or	r25, r21
     a9e:	a6 2b       	or	r26, r22
     aa0:	b7 2b       	or	r27, r23
     aa2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     aa6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     aaa:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     aae:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     ab2:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x4>
     ab6:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x5>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	39 f0       	breq	.+14     	; 0xacc <__vector_3+0xb2>
     abe:	62 e0       	ldi	r22, 0x02	; 2
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x4>
     ac6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x5>
     aca:	09 95       	icall
     acc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
     ad0:	ff 91       	pop	r31
     ad2:	ef 91       	pop	r30
     ad4:	bf 91       	pop	r27
     ad6:	af 91       	pop	r26
     ad8:	9f 91       	pop	r25
     ada:	8f 91       	pop	r24
     adc:	7f 91       	pop	r23
     ade:	6f 91       	pop	r22
     ae0:	5f 91       	pop	r21
     ae2:	4f 91       	pop	r20
     ae4:	3f 91       	pop	r19
     ae6:	2f 91       	pop	r18
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <__vector_4>:
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	2f 93       	push	r18
     afe:	3f 93       	push	r19
     b00:	4f 93       	push	r20
     b02:	5f 93       	push	r21
     b04:	6f 93       	push	r22
     b06:	7f 93       	push	r23
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	af 93       	push	r26
     b0e:	bf 93       	push	r27
     b10:	ef 93       	push	r30
     b12:	ff 93       	push	r31
     b14:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
     b18:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
     b1c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b20:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b24:	c9 01       	movw	r24, r18
     b26:	03 2e       	mov	r0, r19
     b28:	00 0c       	add	r0, r0
     b2a:	aa 0b       	sbc	r26, r26
     b2c:	bb 0b       	sbc	r27, r27
     b2e:	dc 01       	movw	r26, r24
     b30:	99 27       	eor	r25, r25
     b32:	88 27       	eor	r24, r24
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	84 2b       	or	r24, r20
     b3a:	95 2b       	or	r25, r21
     b3c:	a6 2b       	or	r26, r22
     b3e:	b7 2b       	or	r27, r23
     b40:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     b44:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     b48:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     b4c:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     b50:	b0 9b       	sbis	0x16, 0	; 22
     b52:	1b c0       	rjmp	.+54     	; 0xb8a <__vector_4+0x98>
     b54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b5c:	c9 01       	movw	r24, r18
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	09 2e       	mov	r0, r25
     b62:	00 0c       	add	r0, r0
     b64:	aa 0b       	sbc	r26, r26
     b66:	bb 0b       	sbc	r27, r27
     b68:	dc 01       	movw	r26, r24
     b6a:	99 27       	eor	r25, r25
     b6c:	88 27       	eor	r24, r24
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	84 2b       	or	r24, r20
     b74:	95 2b       	or	r25, r21
     b76:	a6 2b       	or	r26, r22
     b78:	b7 2b       	or	r27, r23
     b7a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     b7e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     b82:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     b86:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     b8a:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x6>
     b8e:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x7>
     b92:	30 97       	sbiw	r30, 0x00	; 0
     b94:	39 f0       	breq	.+14     	; 0xba4 <__vector_4+0xb2>
     b96:	63 e0       	ldi	r22, 0x03	; 3
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x6>
     b9e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x7>
     ba2:	09 95       	icall
     ba4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	bf 91       	pop	r27
     bae:	af 91       	pop	r26
     bb0:	9f 91       	pop	r25
     bb2:	8f 91       	pop	r24
     bb4:	7f 91       	pop	r23
     bb6:	6f 91       	pop	r22
     bb8:	5f 91       	pop	r21
     bba:	4f 91       	pop	r20
     bbc:	3f 91       	pop	r19
     bbe:	2f 91       	pop	r18
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <__vector_5>:
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	0f 92       	push	r0
     bd2:	11 24       	eor	r1, r1
     bd4:	2f 93       	push	r18
     bd6:	3f 93       	push	r19
     bd8:	4f 93       	push	r20
     bda:	5f 93       	push	r21
     bdc:	6f 93       	push	r22
     bde:	7f 93       	push	r23
     be0:	8f 93       	push	r24
     be2:	9f 93       	push	r25
     be4:	af 93       	push	r26
     be6:	bf 93       	push	r27
     be8:	ef 93       	push	r30
     bea:	ff 93       	push	r31
     bec:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
     bf0:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
     bf4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bf8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bfc:	c9 01       	movw	r24, r18
     bfe:	03 2e       	mov	r0, r19
     c00:	00 0c       	add	r0, r0
     c02:	aa 0b       	sbc	r26, r26
     c04:	bb 0b       	sbc	r27, r27
     c06:	dc 01       	movw	r26, r24
     c08:	99 27       	eor	r25, r25
     c0a:	88 27       	eor	r24, r24
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	84 2b       	or	r24, r20
     c12:	95 2b       	or	r25, r21
     c14:	a6 2b       	or	r26, r22
     c16:	b7 2b       	or	r27, r23
     c18:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     c1c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     c20:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     c24:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     c28:	b0 9b       	sbis	0x16, 0	; 22
     c2a:	1b c0       	rjmp	.+54     	; 0xc62 <__vector_5+0x98>
     c2c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c30:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c34:	c9 01       	movw	r24, r18
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	09 2e       	mov	r0, r25
     c3a:	00 0c       	add	r0, r0
     c3c:	aa 0b       	sbc	r26, r26
     c3e:	bb 0b       	sbc	r27, r27
     c40:	dc 01       	movw	r26, r24
     c42:	99 27       	eor	r25, r25
     c44:	88 27       	eor	r24, r24
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	84 2b       	or	r24, r20
     c4c:	95 2b       	or	r25, r21
     c4e:	a6 2b       	or	r26, r22
     c50:	b7 2b       	or	r27, r23
     c52:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     c56:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     c5a:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     c5e:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     c62:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x8>
     c66:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x9>
     c6a:	30 97       	sbiw	r30, 0x00	; 0
     c6c:	39 f0       	breq	.+14     	; 0xc7c <__vector_5+0xb2>
     c6e:	64 e0       	ldi	r22, 0x04	; 4
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x8>
     c76:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x9>
     c7a:	09 95       	icall
     c7c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <__vector_10>:
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	2f 93       	push	r18
     cae:	3f 93       	push	r19
     cb0:	4f 93       	push	r20
     cb2:	5f 93       	push	r21
     cb4:	6f 93       	push	r22
     cb6:	7f 93       	push	r23
     cb8:	8f 93       	push	r24
     cba:	9f 93       	push	r25
     cbc:	af 93       	push	r26
     cbe:	bf 93       	push	r27
     cc0:	ef 93       	push	r30
     cc2:	ff 93       	push	r31
     cc4:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
     cc8:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
     ccc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cd0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cd4:	c9 01       	movw	r24, r18
     cd6:	03 2e       	mov	r0, r19
     cd8:	00 0c       	add	r0, r0
     cda:	aa 0b       	sbc	r26, r26
     cdc:	bb 0b       	sbc	r27, r27
     cde:	dc 01       	movw	r26, r24
     ce0:	99 27       	eor	r25, r25
     ce2:	88 27       	eor	r24, r24
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	84 2b       	or	r24, r20
     cea:	95 2b       	or	r25, r21
     cec:	a6 2b       	or	r26, r22
     cee:	b7 2b       	or	r27, r23
     cf0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     cf4:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     cf8:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     cfc:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     d00:	b0 9b       	sbis	0x16, 0	; 22
     d02:	1b c0       	rjmp	.+54     	; 0xd3a <__vector_10+0x98>
     d04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d0c:	c9 01       	movw	r24, r18
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	09 2e       	mov	r0, r25
     d12:	00 0c       	add	r0, r0
     d14:	aa 0b       	sbc	r26, r26
     d16:	bb 0b       	sbc	r27, r27
     d18:	dc 01       	movw	r26, r24
     d1a:	99 27       	eor	r25, r25
     d1c:	88 27       	eor	r24, r24
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	84 2b       	or	r24, r20
     d24:	95 2b       	or	r25, r21
     d26:	a6 2b       	or	r26, r22
     d28:	b7 2b       	or	r27, r23
     d2a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     d2e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     d32:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     d36:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     d3a:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0xa>
     d3e:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0xb>
     d42:	30 97       	sbiw	r30, 0x00	; 0
     d44:	39 f0       	breq	.+14     	; 0xd54 <__vector_10+0xb2>
     d46:	65 e0       	ldi	r22, 0x05	; 5
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0xa>
     d4e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0xb>
     d52:	09 95       	icall
     d54:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
     d58:	ff 91       	pop	r31
     d5a:	ef 91       	pop	r30
     d5c:	bf 91       	pop	r27
     d5e:	af 91       	pop	r26
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	7f 91       	pop	r23
     d66:	6f 91       	pop	r22
     d68:	5f 91       	pop	r21
     d6a:	4f 91       	pop	r20
     d6c:	3f 91       	pop	r19
     d6e:	2f 91       	pop	r18
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	1f 90       	pop	r1
     d78:	18 95       	reti

00000d7a <__vector_11>:
     d7a:	1f 92       	push	r1
     d7c:	0f 92       	push	r0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	0f 92       	push	r0
     d82:	11 24       	eor	r1, r1
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	ef 93       	push	r30
     d9a:	ff 93       	push	r31
     d9c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
     da0:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
     da4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     da8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dac:	c9 01       	movw	r24, r18
     dae:	03 2e       	mov	r0, r19
     db0:	00 0c       	add	r0, r0
     db2:	aa 0b       	sbc	r26, r26
     db4:	bb 0b       	sbc	r27, r27
     db6:	dc 01       	movw	r26, r24
     db8:	99 27       	eor	r25, r25
     dba:	88 27       	eor	r24, r24
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	84 2b       	or	r24, r20
     dc2:	95 2b       	or	r25, r21
     dc4:	a6 2b       	or	r26, r22
     dc6:	b7 2b       	or	r27, r23
     dc8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     dcc:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     dd0:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     dd4:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     dd8:	b0 9b       	sbis	0x16, 0	; 22
     dda:	1b c0       	rjmp	.+54     	; 0xe12 <__vector_11+0x98>
     ddc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     de0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     de4:	c9 01       	movw	r24, r18
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	09 2e       	mov	r0, r25
     dea:	00 0c       	add	r0, r0
     dec:	aa 0b       	sbc	r26, r26
     dee:	bb 0b       	sbc	r27, r27
     df0:	dc 01       	movw	r26, r24
     df2:	99 27       	eor	r25, r25
     df4:	88 27       	eor	r24, r24
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	84 2b       	or	r24, r20
     dfc:	95 2b       	or	r25, r21
     dfe:	a6 2b       	or	r26, r22
     e00:	b7 2b       	or	r27, r23
     e02:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     e06:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     e0a:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     e0e:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     e12:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0xc>
     e16:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0xd>
     e1a:	30 97       	sbiw	r30, 0x00	; 0
     e1c:	39 f0       	breq	.+14     	; 0xe2c <__vector_11+0xb2>
     e1e:	66 e0       	ldi	r22, 0x06	; 6
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0xc>
     e26:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0xd>
     e2a:	09 95       	icall
     e2c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
     e30:	ff 91       	pop	r31
     e32:	ef 91       	pop	r30
     e34:	bf 91       	pop	r27
     e36:	af 91       	pop	r26
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	7f 91       	pop	r23
     e3e:	6f 91       	pop	r22
     e40:	5f 91       	pop	r21
     e42:	4f 91       	pop	r20
     e44:	3f 91       	pop	r19
     e46:	2f 91       	pop	r18
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti

00000e52 <__vector_12>:
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
     e74:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
     e78:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
     e7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e84:	c9 01       	movw	r24, r18
     e86:	03 2e       	mov	r0, r19
     e88:	00 0c       	add	r0, r0
     e8a:	aa 0b       	sbc	r26, r26
     e8c:	bb 0b       	sbc	r27, r27
     e8e:	dc 01       	movw	r26, r24
     e90:	99 27       	eor	r25, r25
     e92:	88 27       	eor	r24, r24
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	84 2b       	or	r24, r20
     e9a:	95 2b       	or	r25, r21
     e9c:	a6 2b       	or	r26, r22
     e9e:	b7 2b       	or	r27, r23
     ea0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     ea4:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     ea8:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     eac:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     eb0:	b0 9b       	sbis	0x16, 0	; 22
     eb2:	1b c0       	rjmp	.+54     	; 0xeea <__vector_12+0x98>
     eb4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eb8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ebc:	c9 01       	movw	r24, r18
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	09 2e       	mov	r0, r25
     ec2:	00 0c       	add	r0, r0
     ec4:	aa 0b       	sbc	r26, r26
     ec6:	bb 0b       	sbc	r27, r27
     ec8:	dc 01       	movw	r26, r24
     eca:	99 27       	eor	r25, r25
     ecc:	88 27       	eor	r24, r24
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	84 2b       	or	r24, r20
     ed4:	95 2b       	or	r25, r21
     ed6:	a6 2b       	or	r26, r22
     ed8:	b7 2b       	or	r27, r23
     eda:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     ede:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     ee2:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     ee6:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     eea:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0xe>
     eee:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0xf>
     ef2:	30 97       	sbiw	r30, 0x00	; 0
     ef4:	39 f0       	breq	.+14     	; 0xf04 <__vector_12+0xb2>
     ef6:	67 e0       	ldi	r22, 0x07	; 7
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0xe>
     efe:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0xf>
     f02:	09 95       	icall
     f04:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	bf 91       	pop	r27
     f0e:	af 91       	pop	r26
     f10:	9f 91       	pop	r25
     f12:	8f 91       	pop	r24
     f14:	7f 91       	pop	r23
     f16:	6f 91       	pop	r22
     f18:	5f 91       	pop	r21
     f1a:	4f 91       	pop	r20
     f1c:	3f 91       	pop	r19
     f1e:	2f 91       	pop	r18
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_13>:
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	2f 93       	push	r18
     f36:	3f 93       	push	r19
     f38:	4f 93       	push	r20
     f3a:	5f 93       	push	r21
     f3c:	6f 93       	push	r22
     f3e:	7f 93       	push	r23
     f40:	8f 93       	push	r24
     f42:	9f 93       	push	r25
     f44:	af 93       	push	r26
     f46:	bf 93       	push	r27
     f48:	ef 93       	push	r30
     f4a:	ff 93       	push	r31
     f4c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
     f50:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
     f54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f5c:	c9 01       	movw	r24, r18
     f5e:	03 2e       	mov	r0, r19
     f60:	00 0c       	add	r0, r0
     f62:	aa 0b       	sbc	r26, r26
     f64:	bb 0b       	sbc	r27, r27
     f66:	dc 01       	movw	r26, r24
     f68:	99 27       	eor	r25, r25
     f6a:	88 27       	eor	r24, r24
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	84 2b       	or	r24, r20
     f72:	95 2b       	or	r25, r21
     f74:	a6 2b       	or	r26, r22
     f76:	b7 2b       	or	r27, r23
     f78:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     f7c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     f80:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     f84:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     f88:	b0 9b       	sbis	0x16, 0	; 22
     f8a:	1b c0       	rjmp	.+54     	; 0xfc2 <__vector_13+0x98>
     f8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f94:	c9 01       	movw	r24, r18
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	09 2e       	mov	r0, r25
     f9a:	00 0c       	add	r0, r0
     f9c:	aa 0b       	sbc	r26, r26
     f9e:	bb 0b       	sbc	r27, r27
     fa0:	dc 01       	movw	r26, r24
     fa2:	99 27       	eor	r25, r25
     fa4:	88 27       	eor	r24, r24
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	84 2b       	or	r24, r20
     fac:	95 2b       	or	r25, r21
     fae:	a6 2b       	or	r26, r22
     fb0:	b7 2b       	or	r27, r23
     fb2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
     fb6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
     fba:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
     fbe:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
     fc2:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x10>
     fc6:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x11>
     fca:	30 97       	sbiw	r30, 0x00	; 0
     fcc:	39 f0       	breq	.+14     	; 0xfdc <__vector_13+0xb2>
     fce:	68 e0       	ldi	r22, 0x08	; 8
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x10>
     fd6:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x11>
     fda:	09 95       	icall
     fdc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
     fe0:	ff 91       	pop	r31
     fe2:	ef 91       	pop	r30
     fe4:	bf 91       	pop	r27
     fe6:	af 91       	pop	r26
     fe8:	9f 91       	pop	r25
     fea:	8f 91       	pop	r24
     fec:	7f 91       	pop	r23
     fee:	6f 91       	pop	r22
     ff0:	5f 91       	pop	r21
     ff2:	4f 91       	pop	r20
     ff4:	3f 91       	pop	r19
     ff6:	2f 91       	pop	r18
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <__vector_14>:
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
    1028:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
    102c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1030:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1034:	c9 01       	movw	r24, r18
    1036:	03 2e       	mov	r0, r19
    1038:	00 0c       	add	r0, r0
    103a:	aa 0b       	sbc	r26, r26
    103c:	bb 0b       	sbc	r27, r27
    103e:	dc 01       	movw	r26, r24
    1040:	99 27       	eor	r25, r25
    1042:	88 27       	eor	r24, r24
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	84 2b       	or	r24, r20
    104a:	95 2b       	or	r25, r21
    104c:	a6 2b       	or	r26, r22
    104e:	b7 2b       	or	r27, r23
    1050:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    1054:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    1058:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    105c:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    1060:	b0 9b       	sbis	0x16, 0	; 22
    1062:	1b c0       	rjmp	.+54     	; 0x109a <__vector_14+0x98>
    1064:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1068:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    106c:	c9 01       	movw	r24, r18
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	09 2e       	mov	r0, r25
    1072:	00 0c       	add	r0, r0
    1074:	aa 0b       	sbc	r26, r26
    1076:	bb 0b       	sbc	r27, r27
    1078:	dc 01       	movw	r26, r24
    107a:	99 27       	eor	r25, r25
    107c:	88 27       	eor	r24, r24
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	84 2b       	or	r24, r20
    1084:	95 2b       	or	r25, r21
    1086:	a6 2b       	or	r26, r22
    1088:	b7 2b       	or	r27, r23
    108a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    108e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    1092:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    1096:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    109a:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x12>
    109e:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x13>
    10a2:	30 97       	sbiw	r30, 0x00	; 0
    10a4:	39 f0       	breq	.+14     	; 0x10b4 <__vector_14+0xb2>
    10a6:	69 e0       	ldi	r22, 0x09	; 9
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x12>
    10ae:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x13>
    10b2:	09 95       	icall
    10b4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	bf 91       	pop	r27
    10be:	af 91       	pop	r26
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	7f 91       	pop	r23
    10c6:	6f 91       	pop	r22
    10c8:	5f 91       	pop	r21
    10ca:	4f 91       	pop	r20
    10cc:	3f 91       	pop	r19
    10ce:	2f 91       	pop	r18
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti

000010da <__vector_15>:
    10da:	1f 92       	push	r1
    10dc:	0f 92       	push	r0
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	0f 92       	push	r0
    10e2:	11 24       	eor	r1, r1
    10e4:	2f 93       	push	r18
    10e6:	3f 93       	push	r19
    10e8:	4f 93       	push	r20
    10ea:	5f 93       	push	r21
    10ec:	6f 93       	push	r22
    10ee:	7f 93       	push	r23
    10f0:	8f 93       	push	r24
    10f2:	9f 93       	push	r25
    10f4:	af 93       	push	r26
    10f6:	bf 93       	push	r27
    10f8:	ef 93       	push	r30
    10fa:	ff 93       	push	r31
    10fc:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
    1100:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
    1104:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1108:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    110c:	c9 01       	movw	r24, r18
    110e:	03 2e       	mov	r0, r19
    1110:	00 0c       	add	r0, r0
    1112:	aa 0b       	sbc	r26, r26
    1114:	bb 0b       	sbc	r27, r27
    1116:	dc 01       	movw	r26, r24
    1118:	99 27       	eor	r25, r25
    111a:	88 27       	eor	r24, r24
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	84 2b       	or	r24, r20
    1122:	95 2b       	or	r25, r21
    1124:	a6 2b       	or	r26, r22
    1126:	b7 2b       	or	r27, r23
    1128:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    112c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    1130:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    1134:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    1138:	b0 9b       	sbis	0x16, 0	; 22
    113a:	1b c0       	rjmp	.+54     	; 0x1172 <__vector_15+0x98>
    113c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1140:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1144:	c9 01       	movw	r24, r18
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	09 2e       	mov	r0, r25
    114a:	00 0c       	add	r0, r0
    114c:	aa 0b       	sbc	r26, r26
    114e:	bb 0b       	sbc	r27, r27
    1150:	dc 01       	movw	r26, r24
    1152:	99 27       	eor	r25, r25
    1154:	88 27       	eor	r24, r24
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	84 2b       	or	r24, r20
    115c:	95 2b       	or	r25, r21
    115e:	a6 2b       	or	r26, r22
    1160:	b7 2b       	or	r27, r23
    1162:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    1166:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    116a:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    116e:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    1172:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x14>
    1176:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x15>
    117a:	30 97       	sbiw	r30, 0x00	; 0
    117c:	39 f0       	breq	.+14     	; 0x118c <__vector_15+0xb2>
    117e:	6a e0       	ldi	r22, 0x0A	; 10
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x14>
    1186:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x15>
    118a:	09 95       	icall
    118c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <__vector_16>:
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    11bc:	2f 93       	push	r18
    11be:	3f 93       	push	r19
    11c0:	4f 93       	push	r20
    11c2:	5f 93       	push	r21
    11c4:	6f 93       	push	r22
    11c6:	7f 93       	push	r23
    11c8:	8f 93       	push	r24
    11ca:	9f 93       	push	r25
    11cc:	af 93       	push	r26
    11ce:	bf 93       	push	r27
    11d0:	ef 93       	push	r30
    11d2:	ff 93       	push	r31
    11d4:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
    11d8:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
    11dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11e4:	c9 01       	movw	r24, r18
    11e6:	03 2e       	mov	r0, r19
    11e8:	00 0c       	add	r0, r0
    11ea:	aa 0b       	sbc	r26, r26
    11ec:	bb 0b       	sbc	r27, r27
    11ee:	dc 01       	movw	r26, r24
    11f0:	99 27       	eor	r25, r25
    11f2:	88 27       	eor	r24, r24
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	84 2b       	or	r24, r20
    11fa:	95 2b       	or	r25, r21
    11fc:	a6 2b       	or	r26, r22
    11fe:	b7 2b       	or	r27, r23
    1200:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    1204:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    1208:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    120c:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    1210:	b0 9b       	sbis	0x16, 0	; 22
    1212:	1b c0       	rjmp	.+54     	; 0x124a <__vector_16+0x98>
    1214:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1218:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    121c:	c9 01       	movw	r24, r18
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	09 2e       	mov	r0, r25
    1222:	00 0c       	add	r0, r0
    1224:	aa 0b       	sbc	r26, r26
    1226:	bb 0b       	sbc	r27, r27
    1228:	dc 01       	movw	r26, r24
    122a:	99 27       	eor	r25, r25
    122c:	88 27       	eor	r24, r24
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	84 2b       	or	r24, r20
    1234:	95 2b       	or	r25, r21
    1236:	a6 2b       	or	r26, r22
    1238:	b7 2b       	or	r27, r23
    123a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    123e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    1242:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    1246:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    124a:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x16>
    124e:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x17>
    1252:	30 97       	sbiw	r30, 0x00	; 0
    1254:	39 f0       	breq	.+14     	; 0x1264 <__vector_16+0xb2>
    1256:	6b e0       	ldi	r22, 0x0B	; 11
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x16>
    125e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x17>
    1262:	09 95       	icall
    1264:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
    1268:	ff 91       	pop	r31
    126a:	ef 91       	pop	r30
    126c:	bf 91       	pop	r27
    126e:	af 91       	pop	r26
    1270:	9f 91       	pop	r25
    1272:	8f 91       	pop	r24
    1274:	7f 91       	pop	r23
    1276:	6f 91       	pop	r22
    1278:	5f 91       	pop	r21
    127a:	4f 91       	pop	r20
    127c:	3f 91       	pop	r19
    127e:	2f 91       	pop	r18
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	0f 90       	pop	r0
    1286:	1f 90       	pop	r1
    1288:	18 95       	reti

0000128a <__vector_17>:
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	11 24       	eor	r1, r1
    1294:	2f 93       	push	r18
    1296:	3f 93       	push	r19
    1298:	4f 93       	push	r20
    129a:	5f 93       	push	r21
    129c:	6f 93       	push	r22
    129e:	7f 93       	push	r23
    12a0:	8f 93       	push	r24
    12a2:	9f 93       	push	r25
    12a4:	af 93       	push	r26
    12a6:	bf 93       	push	r27
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
    12ac:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
    12b0:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
    12b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12bc:	c9 01       	movw	r24, r18
    12be:	03 2e       	mov	r0, r19
    12c0:	00 0c       	add	r0, r0
    12c2:	aa 0b       	sbc	r26, r26
    12c4:	bb 0b       	sbc	r27, r27
    12c6:	dc 01       	movw	r26, r24
    12c8:	99 27       	eor	r25, r25
    12ca:	88 27       	eor	r24, r24
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	84 2b       	or	r24, r20
    12d2:	95 2b       	or	r25, r21
    12d4:	a6 2b       	or	r26, r22
    12d6:	b7 2b       	or	r27, r23
    12d8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    12dc:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    12e0:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    12e4:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    12e8:	b0 9b       	sbis	0x16, 0	; 22
    12ea:	1b c0       	rjmp	.+54     	; 0x1322 <__vector_17+0x98>
    12ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12f4:	c9 01       	movw	r24, r18
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	09 2e       	mov	r0, r25
    12fa:	00 0c       	add	r0, r0
    12fc:	aa 0b       	sbc	r26, r26
    12fe:	bb 0b       	sbc	r27, r27
    1300:	dc 01       	movw	r26, r24
    1302:	99 27       	eor	r25, r25
    1304:	88 27       	eor	r24, r24
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	84 2b       	or	r24, r20
    130c:	95 2b       	or	r25, r21
    130e:	a6 2b       	or	r26, r22
    1310:	b7 2b       	or	r27, r23
    1312:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    1316:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    131a:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    131e:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    1322:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0x18>
    1326:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x19>
    132a:	30 97       	sbiw	r30, 0x00	; 0
    132c:	39 f0       	breq	.+14     	; 0x133c <__vector_17+0xb2>
    132e:	6c e0       	ldi	r22, 0x0C	; 12
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0x18>
    1336:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x19>
    133a:	09 95       	icall
    133c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	bf 91       	pop	r27
    1346:	af 91       	pop	r26
    1348:	9f 91       	pop	r25
    134a:	8f 91       	pop	r24
    134c:	7f 91       	pop	r23
    134e:	6f 91       	pop	r22
    1350:	5f 91       	pop	r21
    1352:	4f 91       	pop	r20
    1354:	3f 91       	pop	r19
    1356:	2f 91       	pop	r18
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	0f 90       	pop	r0
    135e:	1f 90       	pop	r1
    1360:	18 95       	reti

00001362 <__vector_18>:
    1362:	1f 92       	push	r1
    1364:	0f 92       	push	r0
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	0f 92       	push	r0
    136a:	11 24       	eor	r1, r1
    136c:	2f 93       	push	r18
    136e:	3f 93       	push	r19
    1370:	4f 93       	push	r20
    1372:	5f 93       	push	r21
    1374:	6f 93       	push	r22
    1376:	7f 93       	push	r23
    1378:	8f 93       	push	r24
    137a:	9f 93       	push	r25
    137c:	af 93       	push	r26
    137e:	bf 93       	push	r27
    1380:	ef 93       	push	r30
    1382:	ff 93       	push	r31
    1384:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
    1388:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
    138c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1390:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1394:	c9 01       	movw	r24, r18
    1396:	03 2e       	mov	r0, r19
    1398:	00 0c       	add	r0, r0
    139a:	aa 0b       	sbc	r26, r26
    139c:	bb 0b       	sbc	r27, r27
    139e:	dc 01       	movw	r26, r24
    13a0:	99 27       	eor	r25, r25
    13a2:	88 27       	eor	r24, r24
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	84 2b       	or	r24, r20
    13aa:	95 2b       	or	r25, r21
    13ac:	a6 2b       	or	r26, r22
    13ae:	b7 2b       	or	r27, r23
    13b0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    13b4:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    13b8:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    13bc:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    13c0:	b0 9b       	sbis	0x16, 0	; 22
    13c2:	1b c0       	rjmp	.+54     	; 0x13fa <__vector_18+0x98>
    13c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13cc:	c9 01       	movw	r24, r18
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	09 2e       	mov	r0, r25
    13d2:	00 0c       	add	r0, r0
    13d4:	aa 0b       	sbc	r26, r26
    13d6:	bb 0b       	sbc	r27, r27
    13d8:	dc 01       	movw	r26, r24
    13da:	99 27       	eor	r25, r25
    13dc:	88 27       	eor	r24, r24
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	84 2b       	or	r24, r20
    13e4:	95 2b       	or	r25, r21
    13e6:	a6 2b       	or	r26, r22
    13e8:	b7 2b       	or	r27, r23
    13ea:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    13ee:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    13f2:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    13f6:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    13fa:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x1a>
    13fe:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x1b>
    1402:	30 97       	sbiw	r30, 0x00	; 0
    1404:	39 f0       	breq	.+14     	; 0x1414 <__vector_18+0xb2>
    1406:	6d e0       	ldi	r22, 0x0D	; 13
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x1a>
    140e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x1b>
    1412:	09 95       	icall
    1414:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
    1418:	ff 91       	pop	r31
    141a:	ef 91       	pop	r30
    141c:	bf 91       	pop	r27
    141e:	af 91       	pop	r26
    1420:	9f 91       	pop	r25
    1422:	8f 91       	pop	r24
    1424:	7f 91       	pop	r23
    1426:	6f 91       	pop	r22
    1428:	5f 91       	pop	r21
    142a:	4f 91       	pop	r20
    142c:	3f 91       	pop	r19
    142e:	2f 91       	pop	r18
    1430:	0f 90       	pop	r0
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	0f 90       	pop	r0
    1436:	1f 90       	pop	r1
    1438:	18 95       	reti

0000143a <__vector_19>:
    143a:	1f 92       	push	r1
    143c:	0f 92       	push	r0
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	0f 92       	push	r0
    1442:	11 24       	eor	r1, r1
    1444:	2f 93       	push	r18
    1446:	3f 93       	push	r19
    1448:	4f 93       	push	r20
    144a:	5f 93       	push	r21
    144c:	6f 93       	push	r22
    144e:	7f 93       	push	r23
    1450:	8f 93       	push	r24
    1452:	9f 93       	push	r25
    1454:	af 93       	push	r26
    1456:	bf 93       	push	r27
    1458:	ef 93       	push	r30
    145a:	ff 93       	push	r31
    145c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
    1460:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
    1464:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1468:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    146c:	c9 01       	movw	r24, r18
    146e:	03 2e       	mov	r0, r19
    1470:	00 0c       	add	r0, r0
    1472:	aa 0b       	sbc	r26, r26
    1474:	bb 0b       	sbc	r27, r27
    1476:	dc 01       	movw	r26, r24
    1478:	99 27       	eor	r25, r25
    147a:	88 27       	eor	r24, r24
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	84 2b       	or	r24, r20
    1482:	95 2b       	or	r25, r21
    1484:	a6 2b       	or	r26, r22
    1486:	b7 2b       	or	r27, r23
    1488:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    148c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    1490:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    1494:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    1498:	b0 9b       	sbis	0x16, 0	; 22
    149a:	1b c0       	rjmp	.+54     	; 0x14d2 <__vector_19+0x98>
    149c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14a4:	c9 01       	movw	r24, r18
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	09 2e       	mov	r0, r25
    14aa:	00 0c       	add	r0, r0
    14ac:	aa 0b       	sbc	r26, r26
    14ae:	bb 0b       	sbc	r27, r27
    14b0:	dc 01       	movw	r26, r24
    14b2:	99 27       	eor	r25, r25
    14b4:	88 27       	eor	r24, r24
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	84 2b       	or	r24, r20
    14bc:	95 2b       	or	r25, r21
    14be:	a6 2b       	or	r26, r22
    14c0:	b7 2b       	or	r27, r23
    14c2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    14c6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    14ca:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    14ce:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    14d2:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x1c>
    14d6:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x1d>
    14da:	30 97       	sbiw	r30, 0x00	; 0
    14dc:	39 f0       	breq	.+14     	; 0x14ec <__vector_19+0xb2>
    14de:	6e e0       	ldi	r22, 0x0E	; 14
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x1c>
    14e6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x1d>
    14ea:	09 95       	icall
    14ec:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
    14f0:	ff 91       	pop	r31
    14f2:	ef 91       	pop	r30
    14f4:	bf 91       	pop	r27
    14f6:	af 91       	pop	r26
    14f8:	9f 91       	pop	r25
    14fa:	8f 91       	pop	r24
    14fc:	7f 91       	pop	r23
    14fe:	6f 91       	pop	r22
    1500:	5f 91       	pop	r21
    1502:	4f 91       	pop	r20
    1504:	3f 91       	pop	r19
    1506:	2f 91       	pop	r18
    1508:	0f 90       	pop	r0
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	0f 90       	pop	r0
    150e:	1f 90       	pop	r1
    1510:	18 95       	reti

00001512 <__vector_20>:
    1512:	1f 92       	push	r1
    1514:	0f 92       	push	r0
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	0f 92       	push	r0
    151a:	11 24       	eor	r1, r1
    151c:	2f 93       	push	r18
    151e:	3f 93       	push	r19
    1520:	4f 93       	push	r20
    1522:	5f 93       	push	r21
    1524:	6f 93       	push	r22
    1526:	7f 93       	push	r23
    1528:	8f 93       	push	r24
    152a:	9f 93       	push	r25
    152c:	af 93       	push	r26
    152e:	bf 93       	push	r27
    1530:	ef 93       	push	r30
    1532:	ff 93       	push	r31
    1534:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
    1538:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
    153c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1540:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1544:	c9 01       	movw	r24, r18
    1546:	03 2e       	mov	r0, r19
    1548:	00 0c       	add	r0, r0
    154a:	aa 0b       	sbc	r26, r26
    154c:	bb 0b       	sbc	r27, r27
    154e:	dc 01       	movw	r26, r24
    1550:	99 27       	eor	r25, r25
    1552:	88 27       	eor	r24, r24
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	84 2b       	or	r24, r20
    155a:	95 2b       	or	r25, r21
    155c:	a6 2b       	or	r26, r22
    155e:	b7 2b       	or	r27, r23
    1560:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    1564:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    1568:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    156c:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    1570:	b0 9b       	sbis	0x16, 0	; 22
    1572:	1b c0       	rjmp	.+54     	; 0x15aa <__vector_20+0x98>
    1574:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1578:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    157c:	c9 01       	movw	r24, r18
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	09 2e       	mov	r0, r25
    1582:	00 0c       	add	r0, r0
    1584:	aa 0b       	sbc	r26, r26
    1586:	bb 0b       	sbc	r27, r27
    1588:	dc 01       	movw	r26, r24
    158a:	99 27       	eor	r25, r25
    158c:	88 27       	eor	r24, r24
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	84 2b       	or	r24, r20
    1594:	95 2b       	or	r25, r21
    1596:	a6 2b       	or	r26, r22
    1598:	b7 2b       	or	r27, r23
    159a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    159e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    15a2:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    15a6:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    15aa:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x1e>
    15ae:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x1f>
    15b2:	30 97       	sbiw	r30, 0x00	; 0
    15b4:	39 f0       	breq	.+14     	; 0x15c4 <__vector_20+0xb2>
    15b6:	6f e0       	ldi	r22, 0x0F	; 15
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x1e>
    15be:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x1f>
    15c2:	09 95       	icall
    15c4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
    15c8:	ff 91       	pop	r31
    15ca:	ef 91       	pop	r30
    15cc:	bf 91       	pop	r27
    15ce:	af 91       	pop	r26
    15d0:	9f 91       	pop	r25
    15d2:	8f 91       	pop	r24
    15d4:	7f 91       	pop	r23
    15d6:	6f 91       	pop	r22
    15d8:	5f 91       	pop	r21
    15da:	4f 91       	pop	r20
    15dc:	3f 91       	pop	r19
    15de:	2f 91       	pop	r18
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	0f 90       	pop	r0
    15e6:	1f 90       	pop	r1
    15e8:	18 95       	reti

000015ea <__vector_21>:
    15ea:	1f 92       	push	r1
    15ec:	0f 92       	push	r0
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	0f 92       	push	r0
    15f2:	11 24       	eor	r1, r1
    15f4:	2f 93       	push	r18
    15f6:	3f 93       	push	r19
    15f8:	4f 93       	push	r20
    15fa:	5f 93       	push	r21
    15fc:	6f 93       	push	r22
    15fe:	7f 93       	push	r23
    1600:	8f 93       	push	r24
    1602:	9f 93       	push	r25
    1604:	af 93       	push	r26
    1606:	bf 93       	push	r27
    1608:	ef 93       	push	r30
    160a:	ff 93       	push	r31
    160c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
    1610:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
    1614:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1618:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    161c:	c9 01       	movw	r24, r18
    161e:	03 2e       	mov	r0, r19
    1620:	00 0c       	add	r0, r0
    1622:	aa 0b       	sbc	r26, r26
    1624:	bb 0b       	sbc	r27, r27
    1626:	dc 01       	movw	r26, r24
    1628:	99 27       	eor	r25, r25
    162a:	88 27       	eor	r24, r24
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	84 2b       	or	r24, r20
    1632:	95 2b       	or	r25, r21
    1634:	a6 2b       	or	r26, r22
    1636:	b7 2b       	or	r27, r23
    1638:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    163c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    1640:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    1644:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    1648:	b0 9b       	sbis	0x16, 0	; 22
    164a:	1b c0       	rjmp	.+54     	; 0x1682 <__vector_21+0x98>
    164c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1650:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1654:	c9 01       	movw	r24, r18
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	09 2e       	mov	r0, r25
    165a:	00 0c       	add	r0, r0
    165c:	aa 0b       	sbc	r26, r26
    165e:	bb 0b       	sbc	r27, r27
    1660:	dc 01       	movw	r26, r24
    1662:	99 27       	eor	r25, r25
    1664:	88 27       	eor	r24, r24
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	84 2b       	or	r24, r20
    166c:	95 2b       	or	r25, r21
    166e:	a6 2b       	or	r26, r22
    1670:	b7 2b       	or	r27, r23
    1672:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    1676:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    167a:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    167e:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    1682:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x20>
    1686:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x21>
    168a:	30 97       	sbiw	r30, 0x00	; 0
    168c:	39 f0       	breq	.+14     	; 0x169c <__vector_21+0xb2>
    168e:	60 e1       	ldi	r22, 0x10	; 16
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x20>
    1696:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x21>
    169a:	09 95       	icall
    169c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
    16a0:	ff 91       	pop	r31
    16a2:	ef 91       	pop	r30
    16a4:	bf 91       	pop	r27
    16a6:	af 91       	pop	r26
    16a8:	9f 91       	pop	r25
    16aa:	8f 91       	pop	r24
    16ac:	7f 91       	pop	r23
    16ae:	6f 91       	pop	r22
    16b0:	5f 91       	pop	r21
    16b2:	4f 91       	pop	r20
    16b4:	3f 91       	pop	r19
    16b6:	2f 91       	pop	r18
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	1f 90       	pop	r1
    16c0:	18 95       	reti

000016c2 <__vector_22>:
    16c2:	1f 92       	push	r1
    16c4:	0f 92       	push	r0
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	0f 92       	push	r0
    16ca:	11 24       	eor	r1, r1
    16cc:	2f 93       	push	r18
    16ce:	3f 93       	push	r19
    16d0:	4f 93       	push	r20
    16d2:	5f 93       	push	r21
    16d4:	6f 93       	push	r22
    16d6:	7f 93       	push	r23
    16d8:	8f 93       	push	r24
    16da:	9f 93       	push	r25
    16dc:	af 93       	push	r26
    16de:	bf 93       	push	r27
    16e0:	ef 93       	push	r30
    16e2:	ff 93       	push	r31
    16e4:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
    16e8:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
    16ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16f4:	c9 01       	movw	r24, r18
    16f6:	03 2e       	mov	r0, r19
    16f8:	00 0c       	add	r0, r0
    16fa:	aa 0b       	sbc	r26, r26
    16fc:	bb 0b       	sbc	r27, r27
    16fe:	dc 01       	movw	r26, r24
    1700:	99 27       	eor	r25, r25
    1702:	88 27       	eor	r24, r24
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	84 2b       	or	r24, r20
    170a:	95 2b       	or	r25, r21
    170c:	a6 2b       	or	r26, r22
    170e:	b7 2b       	or	r27, r23
    1710:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    1714:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    1718:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    171c:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    1720:	b0 9b       	sbis	0x16, 0	; 22
    1722:	1b c0       	rjmp	.+54     	; 0x175a <__vector_22+0x98>
    1724:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1728:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    172c:	c9 01       	movw	r24, r18
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	09 2e       	mov	r0, r25
    1732:	00 0c       	add	r0, r0
    1734:	aa 0b       	sbc	r26, r26
    1736:	bb 0b       	sbc	r27, r27
    1738:	dc 01       	movw	r26, r24
    173a:	99 27       	eor	r25, r25
    173c:	88 27       	eor	r24, r24
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	84 2b       	or	r24, r20
    1744:	95 2b       	or	r25, r21
    1746:	a6 2b       	or	r26, r22
    1748:	b7 2b       	or	r27, r23
    174a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timestamp>
    174e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timestamp+0x1>
    1752:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timestamp+0x2>
    1756:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timestamp+0x3>
    175a:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x22>
    175e:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x23>
    1762:	30 97       	sbiw	r30, 0x00	; 0
    1764:	39 f0       	breq	.+14     	; 0x1774 <__vector_22+0xb2>
    1766:	61 e1       	ldi	r22, 0x11	; 17
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x22>
    176e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x23>
    1772:	09 95       	icall
    1774:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
    1778:	ff 91       	pop	r31
    177a:	ef 91       	pop	r30
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	0f 90       	pop	r0
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	0f 90       	pop	r0
    1796:	1f 90       	pop	r1
    1798:	18 95       	reti

0000179a <enqueueByDeadline>:
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	7b 01       	movw	r14, r22
    17a8:	eb 01       	movw	r28, r22
    17aa:	a8 81       	ld	r26, Y
    17ac:	b9 81       	ldd	r27, Y+1	; 0x01
    17ae:	10 97       	sbiw	r26, 0x00	; 0
    17b0:	61 f1       	breq	.+88     	; 0x180a <enqueueByDeadline+0x70>
    17b2:	fc 01       	movw	r30, r24
    17b4:	06 81       	ldd	r16, Z+6	; 0x06
    17b6:	17 81       	ldd	r17, Z+7	; 0x07
    17b8:	20 85       	ldd	r18, Z+8	; 0x08
    17ba:	31 85       	ldd	r19, Z+9	; 0x09
    17bc:	16 96       	adiw	r26, 0x06	; 6
    17be:	4d 91       	ld	r20, X+
    17c0:	5d 91       	ld	r21, X+
    17c2:	6d 91       	ld	r22, X+
    17c4:	7c 91       	ld	r23, X
    17c6:	19 97       	sbiw	r26, 0x09	; 9
    17c8:	04 17       	cp	r16, r20
    17ca:	15 07       	cpc	r17, r21
    17cc:	26 07       	cpc	r18, r22
    17ce:	37 07       	cpc	r19, r23
    17d0:	14 f4       	brge	.+4      	; 0x17d6 <enqueueByDeadline+0x3c>
    17d2:	1b c0       	rjmp	.+54     	; 0x180a <enqueueByDeadline+0x70>
    17d4:	df 01       	movw	r26, r30
    17d6:	ed 91       	ld	r30, X+
    17d8:	fc 91       	ld	r31, X
    17da:	11 97       	sbiw	r26, 0x01	; 1
    17dc:	30 97       	sbiw	r30, 0x00	; 0
    17de:	49 f0       	breq	.+18     	; 0x17f2 <enqueueByDeadline+0x58>
    17e0:	46 81       	ldd	r20, Z+6	; 0x06
    17e2:	57 81       	ldd	r21, Z+7	; 0x07
    17e4:	60 85       	ldd	r22, Z+8	; 0x08
    17e6:	71 85       	ldd	r23, Z+9	; 0x09
    17e8:	04 17       	cp	r16, r20
    17ea:	15 07       	cpc	r17, r21
    17ec:	26 07       	cpc	r18, r22
    17ee:	37 07       	cpc	r19, r23
    17f0:	8c f7       	brge	.-30     	; 0x17d4 <enqueueByDeadline+0x3a>
    17f2:	ec 01       	movw	r28, r24
    17f4:	f9 83       	std	Y+1, r31	; 0x01
    17f6:	e8 83       	st	Y, r30
    17f8:	10 97       	sbiw	r26, 0x00	; 0
    17fa:	21 f4       	brne	.+8      	; 0x1804 <enqueueByDeadline+0x6a>
    17fc:	f7 01       	movw	r30, r14
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	07 c0       	rjmp	.+14     	; 0x1812 <enqueueByDeadline+0x78>
    1804:	8d 93       	st	X+, r24
    1806:	9c 93       	st	X, r25
    1808:	04 c0       	rjmp	.+8      	; 0x1812 <enqueueByDeadline+0x78>
    180a:	ec 01       	movw	r28, r24
    180c:	b9 83       	std	Y+1, r27	; 0x01
    180e:	a8 83       	st	Y, r26
    1810:	f5 cf       	rjmp	.-22     	; 0x17fc <enqueueByDeadline+0x62>
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	08 95       	ret

00001820 <enqueueByBaseline>:
    1820:	ef 92       	push	r14
    1822:	ff 92       	push	r15
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	7b 01       	movw	r14, r22
    182e:	eb 01       	movw	r28, r22
    1830:	a8 81       	ld	r26, Y
    1832:	b9 81       	ldd	r27, Y+1	; 0x01
    1834:	10 97       	sbiw	r26, 0x00	; 0
    1836:	61 f1       	breq	.+88     	; 0x1890 <enqueueByBaseline+0x70>
    1838:	fc 01       	movw	r30, r24
    183a:	02 81       	ldd	r16, Z+2	; 0x02
    183c:	13 81       	ldd	r17, Z+3	; 0x03
    183e:	24 81       	ldd	r18, Z+4	; 0x04
    1840:	35 81       	ldd	r19, Z+5	; 0x05
    1842:	12 96       	adiw	r26, 0x02	; 2
    1844:	4d 91       	ld	r20, X+
    1846:	5d 91       	ld	r21, X+
    1848:	6d 91       	ld	r22, X+
    184a:	7c 91       	ld	r23, X
    184c:	15 97       	sbiw	r26, 0x05	; 5
    184e:	04 17       	cp	r16, r20
    1850:	15 07       	cpc	r17, r21
    1852:	26 07       	cpc	r18, r22
    1854:	37 07       	cpc	r19, r23
    1856:	14 f4       	brge	.+4      	; 0x185c <enqueueByBaseline+0x3c>
    1858:	1b c0       	rjmp	.+54     	; 0x1890 <enqueueByBaseline+0x70>
    185a:	df 01       	movw	r26, r30
    185c:	ed 91       	ld	r30, X+
    185e:	fc 91       	ld	r31, X
    1860:	11 97       	sbiw	r26, 0x01	; 1
    1862:	30 97       	sbiw	r30, 0x00	; 0
    1864:	49 f0       	breq	.+18     	; 0x1878 <enqueueByBaseline+0x58>
    1866:	42 81       	ldd	r20, Z+2	; 0x02
    1868:	53 81       	ldd	r21, Z+3	; 0x03
    186a:	64 81       	ldd	r22, Z+4	; 0x04
    186c:	75 81       	ldd	r23, Z+5	; 0x05
    186e:	04 17       	cp	r16, r20
    1870:	15 07       	cpc	r17, r21
    1872:	26 07       	cpc	r18, r22
    1874:	37 07       	cpc	r19, r23
    1876:	8c f7       	brge	.-30     	; 0x185a <enqueueByBaseline+0x3a>
    1878:	ec 01       	movw	r28, r24
    187a:	f9 83       	std	Y+1, r31	; 0x01
    187c:	e8 83       	st	Y, r30
    187e:	10 97       	sbiw	r26, 0x00	; 0
    1880:	21 f4       	brne	.+8      	; 0x188a <enqueueByBaseline+0x6a>
    1882:	f7 01       	movw	r30, r14
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	07 c0       	rjmp	.+14     	; 0x1898 <enqueueByBaseline+0x78>
    188a:	8d 93       	st	X+, r24
    188c:	9c 93       	st	X, r25
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <enqueueByBaseline+0x78>
    1890:	ec 01       	movw	r28, r24
    1892:	b9 83       	std	Y+1, r27	; 0x01
    1894:	a8 83       	st	Y, r26
    1896:	f5 cf       	rjmp	.-22     	; 0x1882 <enqueueByBaseline+0x62>
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	08 95       	ret

000018a6 <dequeue>:
    18a6:	dc 01       	movw	r26, r24
    18a8:	ed 91       	ld	r30, X+
    18aa:	fc 91       	ld	r31, X
    18ac:	11 97       	sbiw	r26, 0x01	; 1
    18ae:	30 97       	sbiw	r30, 0x00	; 0
    18b0:	59 f4       	brne	.+22     	; 0x18c8 <dequeue+0x22>
    18b2:	8f ef       	ldi	r24, 0xFF	; 255
    18b4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    18b8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    18bc:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	83 bf       	out	0x33, r24	; 51
    18c4:	88 95       	sleep
    18c6:	fd cf       	rjmp	.-6      	; 0x18c2 <dequeue+0x1c>
    18c8:	20 81       	ld	r18, Z
    18ca:	31 81       	ldd	r19, Z+1	; 0x01
    18cc:	2d 93       	st	X+, r18
    18ce:	3c 93       	st	X, r19
    18d0:	cf 01       	movw	r24, r30
    18d2:	08 95       	ret

000018d4 <__vector_9>:
    18d4:	1f 92       	push	r1
    18d6:	0f 92       	push	r0
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	2f 93       	push	r18
    18e0:	3f 93       	push	r19
    18e2:	4f 93       	push	r20
    18e4:	5f 93       	push	r21
    18e6:	6f 93       	push	r22
    18e8:	7f 93       	push	r23
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	ef 93       	push	r30
    18f0:	ff 93       	push	r31
    18f2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <overflows>
    18f6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <overflows+0x1>
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <overflows+0x1>
    1900:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <overflows>
    1904:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <timerQ>
    1908:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <timerQ+0x1>
    190c:	30 97       	sbiw	r30, 0x00	; 0
    190e:	01 f1       	breq	.+64     	; 0x1950 <__vector_9+0x7c>
    1910:	42 81       	ldd	r20, Z+2	; 0x02
    1912:	53 81       	ldd	r21, Z+3	; 0x03
    1914:	64 81       	ldd	r22, Z+4	; 0x04
    1916:	75 81       	ldd	r23, Z+5	; 0x05
    1918:	86 17       	cp	r24, r22
    191a:	97 07       	cpc	r25, r23
    191c:	c9 f4       	brne	.+50     	; 0x1950 <__vector_9+0x7c>
    191e:	ca 01       	movw	r24, r20
    1920:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1924:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1928:	42 1b       	sub	r20, r18
    192a:	53 0b       	sbc	r21, r19
    192c:	41 30       	cpi	r20, 0x01	; 1
    192e:	51 05       	cpc	r21, r1
    1930:	29 f4       	brne	.+10     	; 0x193c <__vector_9+0x68>
    1932:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1936:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1940:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1944:	ef e6       	ldi	r30, 0x6F	; 111
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	82 60       	ori	r24, 0x02	; 2
    194c:	80 83       	st	Z, r24
    194e:	05 c0       	rjmp	.+10     	; 0x195a <__vector_9+0x86>
    1950:	ef e6       	ldi	r30, 0x6F	; 111
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8d 7f       	andi	r24, 0xFD	; 253
    1958:	80 83       	st	Z, r24
    195a:	ff 91       	pop	r31
    195c:	ef 91       	pop	r30
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	7f 91       	pop	r23
    1964:	6f 91       	pop	r22
    1966:	5f 91       	pop	r21
    1968:	4f 91       	pop	r20
    196a:	3f 91       	pop	r19
    196c:	2f 91       	pop	r18
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <__vector_7>:
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	2f 93       	push	r18
    198c:	3f 93       	push	r19
    198e:	4f 93       	push	r20
    1990:	5f 93       	push	r21
    1992:	6f 93       	push	r22
    1994:	7f 93       	push	r23
    1996:	8f 93       	push	r24
    1998:	9f 93       	push	r25
    199a:	af 93       	push	r26
    199c:	bf 93       	push	r27
    199e:	ef 93       	push	r30
    19a0:	ff 93       	push	r31
    19a2:	c0 90 2a 01 	lds	r12, 0x012A	; 0x80012a <overflows>
    19a6:	d0 90 2b 01 	lds	r13, 0x012B	; 0x80012b <overflows+0x1>
    19aa:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19ae:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19b2:	b0 99       	sbic	0x16, 0	; 22
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <__vector_7+0x5c>
    19b6:	0d 2c       	mov	r0, r13
    19b8:	00 0c       	add	r0, r0
    19ba:	ee 08       	sbc	r14, r14
    19bc:	ff 08       	sbc	r15, r15
    19be:	d6 01       	movw	r26, r12
    19c0:	99 27       	eor	r25, r25
    19c2:	88 27       	eor	r24, r24
    19c4:	69 01       	movw	r12, r18
    19c6:	e1 2c       	mov	r14, r1
    19c8:	f1 2c       	mov	r15, r1
    19ca:	c8 2a       	or	r12, r24
    19cc:	d9 2a       	or	r13, r25
    19ce:	ea 2a       	or	r14, r26
    19d0:	fb 2a       	or	r15, r27
    19d2:	15 c0       	rjmp	.+42     	; 0x19fe <__vector_7+0x86>
    19d4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19d8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19dc:	8f ef       	ldi	r24, 0xFF	; 255
    19de:	c8 1a       	sub	r12, r24
    19e0:	d8 0a       	sbc	r13, r24
    19e2:	0d 2c       	mov	r0, r13
    19e4:	00 0c       	add	r0, r0
    19e6:	ee 08       	sbc	r14, r14
    19e8:	ff 08       	sbc	r15, r15
    19ea:	d6 01       	movw	r26, r12
    19ec:	99 27       	eor	r25, r25
    19ee:	88 27       	eor	r24, r24
    19f0:	69 01       	movw	r12, r18
    19f2:	e1 2c       	mov	r14, r1
    19f4:	f1 2c       	mov	r15, r1
    19f6:	c8 2a       	or	r12, r24
    19f8:	d9 2a       	or	r13, r25
    19fa:	ea 2a       	or	r14, r26
    19fc:	fb 2a       	or	r15, r27
    19fe:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <timerQ>
    1a02:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <timerQ+0x1>
    1a06:	30 97       	sbiw	r30, 0x00	; 0
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <__vector_7+0x94>
    1a0a:	42 c0       	rjmp	.+132    	; 0x1a90 <__vector_7+0x118>
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	a4 81       	ldd	r26, Z+4	; 0x04
    1a12:	b5 81       	ldd	r27, Z+5	; 0x05
    1a14:	8c 19       	sub	r24, r12
    1a16:	9d 09       	sbc	r25, r13
    1a18:	ae 09       	sbc	r26, r14
    1a1a:	bf 09       	sbc	r27, r15
    1a1c:	18 16       	cp	r1, r24
    1a1e:	19 06       	cpc	r1, r25
    1a20:	1a 06       	cpc	r1, r26
    1a22:	1b 06       	cpc	r1, r27
    1a24:	ec f1       	brlt	.+122    	; 0x1aa0 <__vector_7+0x128>
    1a26:	80 e3       	ldi	r24, 0x30	; 48
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <dequeue>
    1a2e:	62 e3       	ldi	r22, 0x32	; 50
    1a30:	71 e0       	ldi	r23, 0x01	; 1
    1a32:	0e 94 cd 0b 	call	0x179a	; 0x179a <enqueueByDeadline>
    1a36:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <timerQ>
    1a3a:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <timerQ+0x1>
    1a3e:	30 97       	sbiw	r30, 0x00	; 0
    1a40:	39 f1       	breq	.+78     	; 0x1a90 <__vector_7+0x118>
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	a4 81       	ldd	r26, Z+4	; 0x04
    1a48:	b5 81       	ldd	r27, Z+5	; 0x05
    1a4a:	8c 19       	sub	r24, r12
    1a4c:	9d 09       	sbc	r25, r13
    1a4e:	ae 09       	sbc	r26, r14
    1a50:	bf 09       	sbc	r27, r15
    1a52:	18 16       	cp	r1, r24
    1a54:	19 06       	cpc	r1, r25
    1a56:	1a 06       	cpc	r1, r26
    1a58:	1b 06       	cpc	r1, r27
    1a5a:	2c f7       	brge	.-54     	; 0x1a26 <__vector_7+0xae>
    1a5c:	21 c0       	rjmp	.+66     	; 0x1aa0 <__vector_7+0x128>
    1a5e:	9c 01       	movw	r18, r24
    1a60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a68:	84 1b       	sub	r24, r20
    1a6a:	95 0b       	sbc	r25, r21
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	31 f4       	brne	.+12     	; 0x1a7c <__vector_7+0x104>
    1a70:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a74:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a78:	2f 5f       	subi	r18, 0xFF	; 255
    1a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1a80:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1a84:	ef e6       	ldi	r30, 0x6F	; 111
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 60       	ori	r24, 0x02	; 2
    1a8c:	80 83       	st	Z, r24
    1a8e:	05 c0       	rjmp	.+10     	; 0x1a9a <__vector_7+0x122>
    1a90:	ef e6       	ldi	r30, 0x6F	; 111
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	8d 7f       	andi	r24, 0xFD	; 253
    1a98:	80 83       	st	Z, r24
    1a9a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
    1a9e:	0c c0       	rjmp	.+24     	; 0x1ab8 <__vector_7+0x140>
    1aa0:	82 81       	ldd	r24, Z+2	; 0x02
    1aa2:	93 81       	ldd	r25, Z+3	; 0x03
    1aa4:	a4 81       	ldd	r26, Z+4	; 0x04
    1aa6:	b5 81       	ldd	r27, Z+5	; 0x05
    1aa8:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
    1aac:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
    1ab0:	2a 17       	cp	r18, r26
    1ab2:	3b 07       	cpc	r19, r27
    1ab4:	69 f7       	brne	.-38     	; 0x1a90 <__vector_7+0x118>
    1ab6:	d3 cf       	rjmp	.-90     	; 0x1a5e <__vector_7+0xe6>
    1ab8:	ff 91       	pop	r31
    1aba:	ef 91       	pop	r30
    1abc:	bf 91       	pop	r27
    1abe:	af 91       	pop	r26
    1ac0:	9f 91       	pop	r25
    1ac2:	8f 91       	pop	r24
    1ac4:	7f 91       	pop	r23
    1ac6:	6f 91       	pop	r22
    1ac8:	5f 91       	pop	r21
    1aca:	4f 91       	pop	r20
    1acc:	3f 91       	pop	r19
    1ace:	2f 91       	pop	r18
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	cf 90       	pop	r12
    1ad8:	0f 90       	pop	r0
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	0f 90       	pop	r0
    1ade:	1f 90       	pop	r1
    1ae0:	18 95       	reti

00001ae2 <async>:
    1ae2:	3f 92       	push	r3
    1ae4:	4f 92       	push	r4
    1ae6:	5f 92       	push	r5
    1ae8:	6f 92       	push	r6
    1aea:	7f 92       	push	r7
    1aec:	8f 92       	push	r8
    1aee:	9f 92       	push	r9
    1af0:	af 92       	push	r10
    1af2:	bf 92       	push	r11
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	2b 01       	movw	r4, r22
    1b06:	3c 01       	movw	r6, r24
    1b08:	49 01       	movw	r8, r18
    1b0a:	5a 01       	movw	r10, r20
    1b0c:	8f b7       	in	r24, 0x3f	; 63
    1b0e:	80 78       	andi	r24, 0x80	; 128
    1b10:	38 2e       	mov	r3, r24
    1b12:	f8 94       	cli
    1b14:	80 e2       	ldi	r24, 0x20	; 32
    1b16:	91 e0       	ldi	r25, 0x01	; 1
    1b18:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <dequeue>
    1b1c:	ec 01       	movw	r28, r24
    1b1e:	1b 87       	std	Y+11, r17	; 0x0b
    1b20:	0a 87       	std	Y+10, r16	; 0x0a
    1b22:	fd 86       	std	Y+13, r15	; 0x0d
    1b24:	ec 86       	std	Y+12, r14	; 0x0c
    1b26:	df 86       	std	Y+15, r13	; 0x0f
    1b28:	ce 86       	std	Y+14, r12	; 0x0e
    1b2a:	33 20       	and	r3, r3
    1b2c:	61 f0       	breq	.+24     	; 0x1b46 <async+0x64>
    1b2e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <current>
    1b32:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <current+0x1>
    1b36:	02 80       	ldd	r0, Z+2	; 0x02
    1b38:	f3 81       	ldd	r31, Z+3	; 0x03
    1b3a:	e0 2d       	mov	r30, r0
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	a4 81       	ldd	r26, Z+4	; 0x04
    1b42:	b5 81       	ldd	r27, Z+5	; 0x05
    1b44:	08 c0       	rjmp	.+16     	; 0x1b56 <async+0x74>
    1b46:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <timestamp>
    1b4a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <timestamp+0x1>
    1b4e:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <timestamp+0x2>
    1b52:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <timestamp+0x3>
    1b56:	48 0e       	add	r4, r24
    1b58:	59 1e       	adc	r5, r25
    1b5a:	6a 1e       	adc	r6, r26
    1b5c:	7b 1e       	adc	r7, r27
    1b5e:	4a 82       	std	Y+2, r4	; 0x02
    1b60:	5b 82       	std	Y+3, r5	; 0x03
    1b62:	6c 82       	std	Y+4, r6	; 0x04
    1b64:	7d 82       	std	Y+5, r7	; 0x05
    1b66:	18 14       	cp	r1, r8
    1b68:	19 04       	cpc	r1, r9
    1b6a:	1a 04       	cpc	r1, r10
    1b6c:	1b 04       	cpc	r1, r11
    1b6e:	44 f0       	brlt	.+16     	; 0x1b80 <async+0x9e>
    1b70:	0f 2e       	mov	r0, r31
    1b72:	88 24       	eor	r8, r8
    1b74:	8a 94       	dec	r8
    1b76:	98 2c       	mov	r9, r8
    1b78:	a8 2c       	mov	r10, r8
    1b7a:	ff e7       	ldi	r31, 0x7F	; 127
    1b7c:	bf 2e       	mov	r11, r31
    1b7e:	f0 2d       	mov	r31, r0
    1b80:	84 0c       	add	r8, r4
    1b82:	95 1c       	adc	r9, r5
    1b84:	a6 1c       	adc	r10, r6
    1b86:	b7 1c       	adc	r11, r7
    1b88:	8e 82       	std	Y+6, r8	; 0x06
    1b8a:	9f 82       	std	Y+7, r9	; 0x07
    1b8c:	a8 86       	std	Y+8, r10	; 0x08
    1b8e:	b9 86       	std	Y+9, r11	; 0x09
    1b90:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <overflows>
    1b94:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <overflows+0x1>
    1b98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ba0:	b0 99       	sbic	0x16, 0	; 22
    1ba2:	0e c0       	rjmp	.+28     	; 0x1bc0 <async+0xde>
    1ba4:	09 2e       	mov	r0, r25
    1ba6:	00 0c       	add	r0, r0
    1ba8:	aa 0b       	sbc	r26, r26
    1baa:	bb 0b       	sbc	r27, r27
    1bac:	dc 01       	movw	r26, r24
    1bae:	99 27       	eor	r25, r25
    1bb0:	88 27       	eor	r24, r24
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	84 2b       	or	r24, r20
    1bb8:	95 2b       	or	r25, r21
    1bba:	a6 2b       	or	r26, r22
    1bbc:	b7 2b       	or	r27, r23
    1bbe:	13 c0       	rjmp	.+38     	; 0x1be6 <async+0x104>
    1bc0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bc4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bc8:	01 96       	adiw	r24, 0x01	; 1
    1bca:	09 2e       	mov	r0, r25
    1bcc:	00 0c       	add	r0, r0
    1bce:	aa 0b       	sbc	r26, r26
    1bd0:	bb 0b       	sbc	r27, r27
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	99 27       	eor	r25, r25
    1bd6:	88 27       	eor	r24, r24
    1bd8:	a9 01       	movw	r20, r18
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	84 2b       	or	r24, r20
    1be0:	95 2b       	or	r25, r21
    1be2:	a6 2b       	or	r26, r22
    1be4:	b7 2b       	or	r27, r23
    1be6:	48 1a       	sub	r4, r24
    1be8:	59 0a       	sbc	r5, r25
    1bea:	6a 0a       	sbc	r6, r26
    1bec:	7b 0a       	sbc	r7, r27
    1bee:	14 14       	cp	r1, r4
    1bf0:	15 04       	cpc	r1, r5
    1bf2:	16 04       	cpc	r1, r6
    1bf4:	17 04       	cpc	r1, r7
    1bf6:	ac f5       	brge	.+106    	; 0x1c62 <async+0x180>
    1bf8:	60 e3       	ldi	r22, 0x30	; 48
    1bfa:	71 e0       	ldi	r23, 0x01	; 1
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	0e 94 10 0c 	call	0x1820	; 0x1820 <enqueueByBaseline>
    1c02:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <timerQ>
    1c06:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <timerQ+0x1>
    1c0a:	30 97       	sbiw	r30, 0x00	; 0
    1c0c:	21 f1       	breq	.+72     	; 0x1c56 <async+0x174>
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	a4 81       	ldd	r26, Z+4	; 0x04
    1c14:	b5 81       	ldd	r27, Z+5	; 0x05
    1c16:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <overflows>
    1c1a:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <overflows+0x1>
    1c1e:	2a 17       	cp	r18, r26
    1c20:	3b 07       	cpc	r19, r27
    1c22:	c9 f4       	brne	.+50     	; 0x1c56 <async+0x174>
    1c24:	9c 01       	movw	r18, r24
    1c26:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c2a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c2e:	84 1b       	sub	r24, r20
    1c30:	95 0b       	sbc	r25, r21
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	31 f4       	brne	.+12     	; 0x1c42 <async+0x160>
    1c36:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c3a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c3e:	2f 5f       	subi	r18, 0xFF	; 255
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1c46:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1c4a:	ef e6       	ldi	r30, 0x6F	; 111
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	82 60       	ori	r24, 0x02	; 2
    1c52:	80 83       	st	Z, r24
    1c54:	41 c0       	rjmp	.+130    	; 0x1cd8 <async+0x1f6>
    1c56:	ef e6       	ldi	r30, 0x6F	; 111
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	8d 7f       	andi	r24, 0xFD	; 253
    1c5e:	80 83       	st	Z, r24
    1c60:	3b c0       	rjmp	.+118    	; 0x1cd8 <async+0x1f6>
    1c62:	62 e3       	ldi	r22, 0x32	; 50
    1c64:	71 e0       	ldi	r23, 0x01	; 1
    1c66:	ce 01       	movw	r24, r28
    1c68:	0e 94 cd 0b 	call	0x179a	; 0x179a <enqueueByDeadline>
    1c6c:	33 20       	and	r3, r3
    1c6e:	b9 f1       	breq	.+110    	; 0x1cde <async+0x1fc>
    1c70:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <threadPool>
    1c74:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <threadPool+0x1>
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	81 f1       	breq	.+96     	; 0x1cdc <async+0x1fa>
    1c7c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <activeStack>
    1c80:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <activeStack+0x1>
    1c84:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <msgQ>
    1c88:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <msgQ+0x1>
    1c8c:	02 81       	ldd	r16, Z+2	; 0x02
    1c8e:	13 81       	ldd	r17, Z+3	; 0x03
    1c90:	d9 01       	movw	r26, r18
    1c92:	16 96       	adiw	r26, 0x06	; 6
    1c94:	4d 91       	ld	r20, X+
    1c96:	5d 91       	ld	r21, X+
    1c98:	6d 91       	ld	r22, X+
    1c9a:	7c 91       	ld	r23, X
    1c9c:	19 97       	sbiw	r26, 0x09	; 9
    1c9e:	d8 01       	movw	r26, r16
    1ca0:	16 96       	adiw	r26, 0x06	; 6
    1ca2:	0d 91       	ld	r16, X+
    1ca4:	1d 91       	ld	r17, X+
    1ca6:	2d 91       	ld	r18, X+
    1ca8:	3c 91       	ld	r19, X
    1caa:	19 97       	sbiw	r26, 0x09	; 9
    1cac:	40 1b       	sub	r20, r16
    1cae:	51 0b       	sbc	r21, r17
    1cb0:	62 0b       	sbc	r22, r18
    1cb2:	73 0b       	sbc	r23, r19
    1cb4:	9a f4       	brpl	.+38     	; 0x1cdc <async+0x1fa>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	2d 91       	ld	r18, X+
    1cba:	3c 91       	ld	r19, X
    1cbc:	11 97       	sbiw	r26, 0x01	; 1
    1cbe:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <threadPool+0x1>
    1cc2:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <threadPool>
    1cc6:	ed 93       	st	X+, r30
    1cc8:	fc 93       	st	X, r31
    1cca:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <activeStack+0x1>
    1cce:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <activeStack>
    1cd2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <dispatch>
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <async+0x1fa>
    1cd8:	33 20       	and	r3, r3
    1cda:	09 f0       	breq	.+2      	; 0x1cde <async+0x1fc>
    1cdc:	78 94       	sei
    1cde:	ce 01       	movw	r24, r28
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
    1cf0:	bf 90       	pop	r11
    1cf2:	af 90       	pop	r10
    1cf4:	9f 90       	pop	r9
    1cf6:	8f 90       	pop	r8
    1cf8:	7f 90       	pop	r7
    1cfa:	6f 90       	pop	r6
    1cfc:	5f 90       	pop	r5
    1cfe:	4f 90       	pop	r4
    1d00:	3f 90       	pop	r3
    1d02:	08 95       	ret

00001d04 <sync>:
    1d04:	cf 92       	push	r12
    1d06:	df 92       	push	r13
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	ec 01       	movw	r28, r24
    1d16:	7b 01       	movw	r14, r22
    1d18:	6a 01       	movw	r12, r20
    1d1a:	1f b7       	in	r17, 0x3f	; 63
    1d1c:	10 78       	andi	r17, 0x80	; 128
    1d1e:	f8 94       	cli
    1d20:	a8 81       	ld	r26, Y
    1d22:	b9 81       	ldd	r27, Y+1	; 0x01
    1d24:	10 97       	sbiw	r26, 0x00	; 0
    1d26:	61 f1       	breq	.+88     	; 0x1d80 <sync+0x7c>
    1d28:	14 96       	adiw	r26, 0x04	; 4
    1d2a:	ed 91       	ld	r30, X+
    1d2c:	fc 91       	ld	r31, X
    1d2e:	15 97       	sbiw	r26, 0x05	; 5
    1d30:	30 97       	sbiw	r30, 0x00	; 0
    1d32:	41 f0       	breq	.+16     	; 0x1d44 <sync+0x40>
    1d34:	a0 81       	ld	r26, Z
    1d36:	b1 81       	ldd	r27, Z+1	; 0x01
    1d38:	14 96       	adiw	r26, 0x04	; 4
    1d3a:	ed 91       	ld	r30, X+
    1d3c:	fc 91       	ld	r31, X
    1d3e:	15 97       	sbiw	r26, 0x05	; 5
    1d40:	30 97       	sbiw	r30, 0x00	; 0
    1d42:	c1 f7       	brne	.-16     	; 0x1d34 <sync+0x30>
    1d44:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <current>
    1d48:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <current+0x1>
    1d4c:	2a 17       	cp	r18, r26
    1d4e:	3b 07       	cpc	r19, r27
    1d50:	21 f0       	breq	.+8      	; 0x1d5a <sync+0x56>
    1d52:	11 23       	and	r17, r17
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <sync+0x54>
    1d56:	3d c0       	rjmp	.+122    	; 0x1dd2 <sync+0xce>
    1d58:	07 c0       	rjmp	.+14     	; 0x1d68 <sync+0x64>
    1d5a:	11 23       	and	r17, r17
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <sync+0x5c>
    1d5e:	3c c0       	rjmp	.+120    	; 0x1dd8 <sync+0xd4>
    1d60:	78 94       	sei
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	9f ef       	ldi	r25, 0xFF	; 255
    1d66:	52 c0       	rjmp	.+164    	; 0x1e0c <sync+0x108>
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	d1 f1       	breq	.+116    	; 0x1de4 <sync+0xe0>
    1d70:	fc 01       	movw	r30, r24
    1d72:	15 82       	std	Z+5, r1	; 0x05
    1d74:	14 82       	std	Z+4, r1	; 0x04
    1d76:	36 c0       	rjmp	.+108    	; 0x1de4 <sync+0xe0>
    1d78:	78 94       	sei
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	46 c0       	rjmp	.+140    	; 0x1e0c <sync+0x108>
    1d80:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <current>
    1d84:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <current+0x1>
    1d88:	99 83       	std	Y+1, r25	; 0x01
    1d8a:	88 83       	st	Y, r24
    1d8c:	11 23       	and	r17, r17
    1d8e:	29 f0       	breq	.+10     	; 0x1d9a <sync+0x96>
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <sync+0x96>
    1d98:	78 94       	sei
    1d9a:	b6 01       	movw	r22, r12
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	f7 01       	movw	r30, r14
    1da0:	09 95       	icall
    1da2:	f8 2e       	mov	r15, r24
    1da4:	09 2f       	mov	r16, r25
    1da6:	8f b7       	in	r24, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	19 82       	std	Y+1, r1	; 0x01
    1dac:	18 82       	st	Y, r1
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	9b 81       	ldd	r25, Y+3	; 0x03
    1db2:	82 30       	cpi	r24, 0x02	; 2
    1db4:	91 05       	cpc	r25, r1
    1db6:	38 f0       	brcs	.+14     	; 0x1dc6 <sync+0xc2>
    1db8:	1b 82       	std	Y+3, r1	; 0x03
    1dba:	1a 82       	std	Y+2, r1	; 0x02
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	15 82       	std	Z+5, r1	; 0x05
    1dc0:	14 82       	std	Z+4, r1	; 0x04
    1dc2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <dispatch>
    1dc6:	11 23       	and	r17, r17
    1dc8:	51 f0       	breq	.+20     	; 0x1dde <sync+0xda>
    1dca:	78 94       	sei
    1dcc:	8f 2d       	mov	r24, r15
    1dce:	90 2f       	mov	r25, r16
    1dd0:	1d c0       	rjmp	.+58     	; 0x1e0c <sync+0x108>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	9f ef       	ldi	r25, 0xFF	; 255
    1dd6:	1a c0       	rjmp	.+52     	; 0x1e0c <sync+0x108>
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	9f ef       	ldi	r25, 0xFF	; 255
    1ddc:	17 c0       	rjmp	.+46     	; 0x1e0c <sync+0x108>
    1dde:	8f 2d       	mov	r24, r15
    1de0:	90 2f       	mov	r25, r16
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <sync+0x108>
    1de4:	3b 83       	std	Y+3, r19	; 0x03
    1de6:	2a 83       	std	Y+2, r18	; 0x02
    1de8:	f9 01       	movw	r30, r18
    1dea:	d5 83       	std	Z+5, r29	; 0x05
    1dec:	c4 83       	std	Z+4, r28	; 0x04
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <dispatch>
    1df4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <current>
    1df8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <current+0x1>
    1dfc:	82 81       	ldd	r24, Z+2	; 0x02
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	89 2b       	or	r24, r25
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <sync+0x102>
    1e04:	b9 cf       	rjmp	.-142    	; 0x1d78 <sync+0x74>
    1e06:	f9 83       	std	Y+1, r31	; 0x01
    1e08:	e8 83       	st	Y, r30
    1e0a:	c2 cf       	rjmp	.-124    	; 0x1d90 <sync+0x8c>
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	df 90       	pop	r13
    1e1a:	cf 90       	pop	r12
    1e1c:	08 95       	ret

00001e1e <run>:
    1e1e:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <current>
    1e22:	10 91 1b 01 	lds	r17, 0x011B	; 0x80011b <current+0x1>
    1e26:	82 e3       	ldi	r24, 0x32	; 50
    1e28:	91 e0       	ldi	r25, 0x01	; 1
    1e2a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <dequeue>
    1e2e:	ec 01       	movw	r28, r24
    1e30:	d8 01       	movw	r26, r16
    1e32:	13 96       	adiw	r26, 0x03	; 3
    1e34:	9c 93       	st	X, r25
    1e36:	8e 93       	st	-X, r24
    1e38:	12 97       	sbiw	r26, 0x02	; 2
    1e3a:	78 94       	sei
    1e3c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e3e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e40:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e42:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e48:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <sync>
    1e4c:	8f b7       	in	r24, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <msgPool>
    1e54:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <msgPool+0x1>
    1e58:	99 83       	std	Y+1, r25	; 0x01
    1e5a:	88 83       	st	Y, r24
    1e5c:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <msgPool+0x1>
    1e60:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <msgPool>
    1e64:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <activeStack>
    1e68:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <activeStack+0x1>
    1e6c:	00 81       	ld	r16, Z
    1e6e:	11 81       	ldd	r17, Z+1	; 0x01
    1e70:	e8 01       	movw	r28, r16
    1e72:	2a 81       	ldd	r18, Y+2	; 0x02
    1e74:	3b 81       	ldd	r19, Y+3	; 0x03
    1e76:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <msgQ>
    1e7a:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <msgQ+0x1>
    1e7e:	10 97       	sbiw	r26, 0x00	; 0
    1e80:	c1 f0       	breq	.+48     	; 0x1eb2 <run+0x94>
    1e82:	21 15       	cp	r18, r1
    1e84:	31 05       	cpc	r19, r1
    1e86:	59 f2       	breq	.-106    	; 0x1e1e <run>
    1e88:	16 96       	adiw	r26, 0x06	; 6
    1e8a:	8d 91       	ld	r24, X+
    1e8c:	9d 91       	ld	r25, X+
    1e8e:	0d 90       	ld	r0, X+
    1e90:	bc 91       	ld	r27, X
    1e92:	a0 2d       	mov	r26, r0
    1e94:	e9 01       	movw	r28, r18
    1e96:	4e 81       	ldd	r20, Y+6	; 0x06
    1e98:	5f 81       	ldd	r21, Y+7	; 0x07
    1e9a:	68 85       	ldd	r22, Y+8	; 0x08
    1e9c:	79 85       	ldd	r23, Y+9	; 0x09
    1e9e:	84 1b       	sub	r24, r20
    1ea0:	95 0b       	sbc	r25, r21
    1ea2:	a6 0b       	sbc	r26, r22
    1ea4:	b7 0b       	sbc	r27, r23
    1ea6:	18 16       	cp	r1, r24
    1ea8:	19 06       	cpc	r1, r25
    1eaa:	1a 06       	cpc	r1, r26
    1eac:	1b 06       	cpc	r1, r27
    1eae:	0c f0       	brlt	.+2      	; 0x1eb2 <run+0x94>
    1eb0:	b6 cf       	rjmp	.-148    	; 0x1e1e <run>
    1eb2:	10 93 1d 01 	sts	0x011D, r17	; 0x80011d <activeStack+0x1>
    1eb6:	00 93 1c 01 	sts	0x011C, r16	; 0x80011c <activeStack>
    1eba:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <threadPool>
    1ebe:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <threadPool+0x1>
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	80 83       	st	Z, r24
    1ec6:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <threadPool+0x1>
    1eca:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <threadPool>
    1ece:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <activeStack>
    1ed2:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <activeStack+0x1>
    1ed6:	14 96       	adiw	r26, 0x04	; 4
    1ed8:	ed 91       	ld	r30, X+
    1eda:	fc 91       	ld	r31, X
    1edc:	15 97       	sbiw	r26, 0x05	; 5
    1ede:	30 97       	sbiw	r30, 0x00	; 0
    1ee0:	41 f0       	breq	.+16     	; 0x1ef2 <run+0xd4>
    1ee2:	a0 81       	ld	r26, Z
    1ee4:	b1 81       	ldd	r27, Z+1	; 0x01
    1ee6:	14 96       	adiw	r26, 0x04	; 4
    1ee8:	ed 91       	ld	r30, X+
    1eea:	fc 91       	ld	r31, X
    1eec:	15 97       	sbiw	r26, 0x05	; 5
    1eee:	30 97       	sbiw	r30, 0x00	; 0
    1ef0:	c1 f7       	brne	.-16     	; 0x1ee2 <run+0xc4>
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 da 03 	call	0x7b4	; 0x7b4 <dispatch>
    1ef8:	92 cf       	rjmp	.-220    	; 0x1e1e <run>

00001efa <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1efa:	42 31       	cpi	r20, 0x12	; 18
    1efc:	b8 f4       	brcc	.+46     	; 0x1f2c <install+0x32>
        char status;
        DISABLE(status);
    1efe:	2f b7       	in	r18, 0x3f	; 63
    1f00:	f8 94       	cli
        otable[i] = obj;
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	44 0f       	add	r20, r20
    1f06:	55 1f       	adc	r21, r21
    1f08:	fa 01       	movw	r30, r20
    1f0a:	ec 5c       	subi	r30, 0xCC	; 204
    1f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
        mtable[i] = m;
    1f12:	fa 01       	movw	r30, r20
    1f14:	e4 53       	subi	r30, 0x34	; 52
    1f16:	fe 4f       	sbci	r31, 0xFE	; 254
    1f18:	71 83       	std	Z+1, r23	; 0x01
    1f1a:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	fc 01       	movw	r30, r24
    1f22:	53 83       	std	Z+3, r21	; 0x03
    1f24:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1f26:	22 23       	and	r18, r18
    1f28:	0c f4       	brge	.+2      	; 0x1f2c <install+0x32>
    1f2a:	78 94       	sei
    1f2c:	08 95       	ret

00001f2e <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1f2e:	8c 01       	movw	r16, r24
    1f30:	7b 01       	movw	r14, r22
    1f32:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1f34:	8f b7       	in	r24, 0x3f	; 63
    1f36:	f8 94       	cli
    initialize();
    1f38:	0e 94 6f 03 	call	0x6de	; 0x6de <initialize>
    ENABLE(1);
    1f3c:	78 94       	sei
    if (m != NULL)
    1f3e:	e1 14       	cp	r14, r1
    1f40:	f1 04       	cpc	r15, r1
    1f42:	41 f0       	breq	.+16     	; 0x1f54 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	a9 01       	movw	r20, r18
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	cb 01       	movw	r24, r22
    1f50:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <async>
    DISABLE(status);
    1f54:	8f b7       	in	r24, 0x3f	; 63
    1f56:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1f58:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <schedule>
    ENABLE(1);
    1f5c:	78 94       	sei
    while (1) {
        SLEEP();
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	83 bf       	out	0x33, r24	; 51
    1f62:	88 95       	sleep
    1f64:	fd cf       	rjmp	.-6      	; 0x1f60 <tinytimber+0x32>

00001f66 <USART_Init>:


void USART_Init(serialObj* self)
{
/* Set baud rate */
UBRR0H = (unsigned char)(MYUBRR>>8);
    1f66:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
UBRR0L = (unsigned char)MYUBRR;
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
/* Enable receiver and transmitter  and enables interupts*/
UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1 << RXCIE0) | (1 << TXCIE0);
    1f70:	88 ed       	ldi	r24, 0xD8	; 216
    1f72:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
/* Set frame format: 8 data, 1 stop bit */
UCSR0C = (0<<USBS0)|(3<<UCSZ00)|(0<<4)|(0<<5); // upm1/upm0
    1f76:	86 e0       	ldi	r24, 0x06	; 6
    1f78:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
    1f7c:	08 95       	ret

00001f7e <USART_Receive>:
unsigned char status, resh, resl;
/* Wait for data to be received */
//while ( !(UCSR0A & (1<<RXC0)) );
/* Get status and 9th bit, then data */
/* from buffer */
status = UCSR0A;
    1f7e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
resh = UCSR0B;
    1f82:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
resl = UDR0;
    1f86:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
}
/* Filter the 9th bit, then return */
resh = (resh >> 1) & 0x01;
return ((resh << 8) | resl  ); 
self->inData = UDR0;
}
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	9f ef       	ldi	r25, 0xFF	; 255
    1f8e:	08 95       	ret

00001f90 <__divmodsi4>:
    1f90:	05 2e       	mov	r0, r21
    1f92:	97 fb       	bst	r25, 7
    1f94:	1e f4       	brtc	.+6      	; 0x1f9c <__divmodsi4+0xc>
    1f96:	00 94       	com	r0
    1f98:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__negsi2>
    1f9c:	57 fd       	sbrc	r21, 7
    1f9e:	07 d0       	rcall	.+14     	; 0x1fae <__divmodsi4_neg2>
    1fa0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__udivmodsi4>
    1fa4:	07 fc       	sbrc	r0, 7
    1fa6:	03 d0       	rcall	.+6      	; 0x1fae <__divmodsi4_neg2>
    1fa8:	4e f4       	brtc	.+18     	; 0x1fbc <__divmodsi4_exit>
    1faa:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__negsi2>

00001fae <__divmodsi4_neg2>:
    1fae:	50 95       	com	r21
    1fb0:	40 95       	com	r20
    1fb2:	30 95       	com	r19
    1fb4:	21 95       	neg	r18
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	4f 4f       	sbci	r20, 0xFF	; 255
    1fba:	5f 4f       	sbci	r21, 0xFF	; 255

00001fbc <__divmodsi4_exit>:
    1fbc:	08 95       	ret

00001fbe <__negsi2>:
    1fbe:	90 95       	com	r25
    1fc0:	80 95       	com	r24
    1fc2:	70 95       	com	r23
    1fc4:	61 95       	neg	r22
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fca:	9f 4f       	sbci	r25, 0xFF	; 255
    1fcc:	08 95       	ret

00001fce <__tablejump2__>:
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	05 90       	lpm	r0, Z+
    1fd4:	f4 91       	lpm	r31, Z
    1fd6:	e0 2d       	mov	r30, r0
    1fd8:	09 94       	ijmp

00001fda <__udivmodsi4>:
    1fda:	a1 e2       	ldi	r26, 0x21	; 33
    1fdc:	1a 2e       	mov	r1, r26
    1fde:	aa 1b       	sub	r26, r26
    1fe0:	bb 1b       	sub	r27, r27
    1fe2:	fd 01       	movw	r30, r26
    1fe4:	0d c0       	rjmp	.+26     	; 0x2000 <__udivmodsi4_ep>

00001fe6 <__udivmodsi4_loop>:
    1fe6:	aa 1f       	adc	r26, r26
    1fe8:	bb 1f       	adc	r27, r27
    1fea:	ee 1f       	adc	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	a2 17       	cp	r26, r18
    1ff0:	b3 07       	cpc	r27, r19
    1ff2:	e4 07       	cpc	r30, r20
    1ff4:	f5 07       	cpc	r31, r21
    1ff6:	20 f0       	brcs	.+8      	; 0x2000 <__udivmodsi4_ep>
    1ff8:	a2 1b       	sub	r26, r18
    1ffa:	b3 0b       	sbc	r27, r19
    1ffc:	e4 0b       	sbc	r30, r20
    1ffe:	f5 0b       	sbc	r31, r21

00002000 <__udivmodsi4_ep>:
    2000:	66 1f       	adc	r22, r22
    2002:	77 1f       	adc	r23, r23
    2004:	88 1f       	adc	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	1a 94       	dec	r1
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <__udivmodsi4_loop>
    200c:	60 95       	com	r22
    200e:	70 95       	com	r23
    2010:	80 95       	com	r24
    2012:	90 95       	com	r25
    2014:	9b 01       	movw	r18, r22
    2016:	ac 01       	movw	r20, r24
    2018:	bd 01       	movw	r22, r26
    201a:	cf 01       	movw	r24, r30
    201c:	08 95       	ret

0000201e <setjmp>:
    201e:	dc 01       	movw	r26, r24
    2020:	2d 92       	st	X+, r2
    2022:	3d 92       	st	X+, r3
    2024:	4d 92       	st	X+, r4
    2026:	5d 92       	st	X+, r5
    2028:	6d 92       	st	X+, r6
    202a:	7d 92       	st	X+, r7
    202c:	8d 92       	st	X+, r8
    202e:	9d 92       	st	X+, r9
    2030:	ad 92       	st	X+, r10
    2032:	bd 92       	st	X+, r11
    2034:	cd 92       	st	X+, r12
    2036:	dd 92       	st	X+, r13
    2038:	ed 92       	st	X+, r14
    203a:	fd 92       	st	X+, r15
    203c:	0d 93       	st	X+, r16
    203e:	1d 93       	st	X+, r17
    2040:	cd 93       	st	X+, r28
    2042:	dd 93       	st	X+, r29
    2044:	ff 91       	pop	r31
    2046:	ef 91       	pop	r30
    2048:	8d b7       	in	r24, 0x3d	; 61
    204a:	8d 93       	st	X+, r24
    204c:	8e b7       	in	r24, 0x3e	; 62
    204e:	8d 93       	st	X+, r24
    2050:	8f b7       	in	r24, 0x3f	; 63
    2052:	8d 93       	st	X+, r24
    2054:	ed 93       	st	X+, r30
    2056:	fd 93       	st	X+, r31
    2058:	88 27       	eor	r24, r24
    205a:	99 27       	eor	r25, r25
    205c:	09 94       	ijmp

0000205e <longjmp>:
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	91 05       	cpc	r25, r1
    2066:	81 1d       	adc	r24, r1
    2068:	2d 90       	ld	r2, X+
    206a:	3d 90       	ld	r3, X+
    206c:	4d 90       	ld	r4, X+
    206e:	5d 90       	ld	r5, X+
    2070:	6d 90       	ld	r6, X+
    2072:	7d 90       	ld	r7, X+
    2074:	8d 90       	ld	r8, X+
    2076:	9d 90       	ld	r9, X+
    2078:	ad 90       	ld	r10, X+
    207a:	bd 90       	ld	r11, X+
    207c:	cd 90       	ld	r12, X+
    207e:	dd 90       	ld	r13, X+
    2080:	ed 90       	ld	r14, X+
    2082:	fd 90       	ld	r15, X+
    2084:	0d 91       	ld	r16, X+
    2086:	1d 91       	ld	r17, X+
    2088:	cd 91       	ld	r28, X+
    208a:	dd 91       	ld	r29, X+
    208c:	ed 91       	ld	r30, X+
    208e:	fd 91       	ld	r31, X+
    2090:	0d 90       	ld	r0, X+
    2092:	f8 94       	cli
    2094:	fe bf       	out	0x3e, r31	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	ed bf       	out	0x3d, r30	; 61
    209a:	ed 91       	ld	r30, X+
    209c:	fd 91       	ld	r31, X+
    209e:	09 94       	ijmp

000020a0 <_exit>:
    20a0:	f8 94       	cli

000020a2 <__stop_program>:
    20a2:	ff cf       	rjmp	.-2      	; 0x20a2 <__stop_program>
