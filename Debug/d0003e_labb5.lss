
d0003e_labb5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000253c  000025d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000253c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800126  00800126  000025f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e22  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e6  00000000  00000000  000056fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001756  00000000  00000000  000067e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c78  00000000  00000000  00007f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b2  00000000  00000000  00008bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ba4  00000000  00000000  00009562  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000c106  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__vector_1>
       8:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__vector_2>
       c:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__vector_3>
      10:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__vector_4>
      14:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__vector_9>
      28:	0c 94 85 08 	jmp	0x110a	; 0x110a <__vector_10>
      2c:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_11>
      30:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__vector_12>
      34:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__vector_13>
      38:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_14>
      3c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__vector_15>
      40:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__vector_16>
      44:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_17>
      48:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__vector_18>
      4c:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_19>
      50:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__vector_20>
      54:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__vector_21>
      58:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__vector_22>
      5c:	8f 00       	.word	0x008f	; ????
      5e:	71 00       	.word	0x0071	; ????
      60:	74 00       	.word	0x0074	; ????
      62:	77 00       	.word	0x0077	; ????
      64:	7a 00       	.word	0x007a	; ????
      66:	7d 00       	.word	0x007d	; ????
      68:	80 00       	.word	0x0080	; ????
      6a:	83 00       	.word	0x0083	; ????
      6c:	86 00       	.word	0x0086	; ????
      6e:	89 00       	.word	0x0089	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e3       	ldi	r30, 0x3C	; 60
      84:	f5 e2       	ldi	r31, 0x25	; 37
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a6 32       	cpi	r26, 0x26	; 38
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a6 e2       	ldi	r26, 0x26	; 38
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a1 38       	cpi	r26, 0x81	; 129
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 80 05 	call	0xb00	; 0xb00 <main>
      a6:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:
#include "lcd.h"



void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
      b6:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      b8:	87 eb       	ldi	r24, 0xB7	; 183
      ba:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
      be:	87 e0       	ldi	r24, 0x07	; 7
      c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
      c4:	8f e0       	ldi	r24, 0x0F	; 15
      c6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
      ca:	80 ec       	ldi	r24, 0xC0	; 192
      cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
      d0:	08 95       	ret

000000d2 <getValueArray>:
}

int getValueArray(int i){

    switch (i)
      d2:	8a 30       	cpi	r24, 0x0A	; 10
      d4:	91 05       	cpc	r25, r1
      d6:	00 f5       	brcc	.+64     	; 0x118 <getValueArray+0x46>
      d8:	fc 01       	movw	r30, r24
      da:	e2 5d       	subi	r30, 0xD2	; 210
      dc:	ff 4f       	sbci	r31, 0xFF	; 255
      de:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__tablejump2__>
    {
    case 0:
        return ZeroValue;

    case 1:
        return OneValue;
      e2:	80 e8       	ldi	r24, 0x80	; 128
      e4:	90 e2       	ldi	r25, 0x20	; 32
      e6:	08 95       	ret
    
    case 2:
        return TwoValue;
      e8:	81 e1       	ldi	r24, 0x11	; 17
      ea:	9e e1       	ldi	r25, 0x1E	; 30
      ec:	08 95       	ret

    case 3:
        return ThreeValue;
      ee:	81 e1       	ldi	r24, 0x11	; 17
      f0:	9b e1       	ldi	r25, 0x1B	; 27
      f2:	08 95       	ret
    
    case 4:
        return FourValue;
      f4:	80 e5       	ldi	r24, 0x50	; 80
      f6:	9b e0       	ldi	r25, 0x0B	; 11
      f8:	08 95       	ret

    case 5:
        return FiveValue;
      fa:	81 e4       	ldi	r24, 0x41	; 65
      fc:	9b e1       	ldi	r25, 0x1B	; 27
      fe:	08 95       	ret
    
    case 6:
        return SixValue;
     100:	81 e4       	ldi	r24, 0x41	; 65
     102:	9f e1       	ldi	r25, 0x1F	; 31
     104:	08 95       	ret
    
    case 7:
        return SevenValue;
     106:	81 e1       	ldi	r24, 0x11	; 17
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
        
    case 8:
        return EightValue;
     10c:	81 e5       	ldi	r24, 0x51	; 81
     10e:	9f e1       	ldi	r25, 0x1F	; 31
     110:	08 95       	ret
    
    case 9:
        return NineValue;
     112:	81 e5       	ldi	r24, 0x51	; 81
     114:	9b e0       	ldi	r25, 0x0B	; 11
     116:	08 95       	ret
    
    default: // 10
        return BlankValue;
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
int getValueArray(int i){

    switch (i)
    {
    case 0:
        return ZeroValue;
     11e:	81 e5       	ldi	r24, 0x51	; 81
     120:	95 e1       	ldi	r25, 0x15	; 21
        return NineValue;
    
    default: // 10
        return BlankValue;
    }
}
     122:	08 95       	ret

00000124 <writeChar>:


void writeChar(char ch, int pos) {
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <writeChar+0xc>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62

	volatile int i = 0;
     134:	1a 82       	std	Y+2, r1	; 0x02
     136:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
     138:	66 30       	cpi	r22, 0x06	; 6
     13a:	71 05       	cpc	r23, r1
     13c:	08 f0       	brcs	.+2      	; 0x140 <writeChar+0x1c>
     13e:	fe c1       	rjmp	.+1020   	; 0x53c <__stack+0x3d>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
     140:	90 ed       	ldi	r25, 0xD0	; 208
     142:	98 0f       	add	r25, r24
     144:	9a 30       	cpi	r25, 0x0A	; 10
     146:	28 f0       	brcs	.+10     	; 0x152 <writeChar+0x2e>
		i=10;
     148:	8a e0       	ldi	r24, 0x0A	; 10
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	9a 83       	std	Y+2, r25	; 0x02
     14e:	89 83       	std	Y+1, r24	; 0x01
     150:	04 c0       	rjmp	.+8      	; 0x15a <writeChar+0x36>
	}else{
        i = ch - 48;
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	c0 97       	sbiw	r24, 0x30	; 48
     156:	9a 83       	std	Y+2, r25	; 0x02
     158:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
     15a:	61 15       	cp	r22, r1
     15c:	71 05       	cpc	r23, r1
     15e:	09 f0       	breq	.+2      	; 0x162 <writeChar+0x3e>
     160:	4e c0       	rjmp	.+156    	; 0x1fe <writeChar+0xda>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&getValueArray(i))<<0;
     162:	0f 2e       	mov	r0, r31
     164:	fc ee       	ldi	r31, 0xEC	; 236
     166:	ef 2e       	mov	r14, r31
     168:	f1 2c       	mov	r15, r1
     16a:	f0 2d       	mov	r31, r0
     16c:	f7 01       	movw	r30, r14
     16e:	10 81       	ld	r17, Z
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	9a 81       	ldd	r25, Y+2	; 0x02
     174:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     178:	10 7f       	andi	r17, 0xF0	; 240
     17a:	8f 70       	andi	r24, 0x0F	; 15
     17c:	81 2b       	or	r24, r17
     17e:	f7 01       	movw	r30, r14
     180:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     182:	0f 2e       	mov	r0, r31
     184:	f1 ef       	ldi	r31, 0xF1	; 241
     186:	ef 2e       	mov	r14, r31
     188:	f1 2c       	mov	r15, r1
     18a:	f0 2d       	mov	r31, r0
     18c:	f7 01       	movw	r30, r14
     18e:	10 81       	ld	r17, Z
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     198:	80 7f       	andi	r24, 0xF0	; 240
     19a:	99 27       	eor	r25, r25
     19c:	95 95       	asr	r25
     19e:	87 95       	ror	r24
     1a0:	95 95       	asr	r25
     1a2:	87 95       	ror	r24
     1a4:	95 95       	asr	r25
     1a6:	87 95       	ror	r24
     1a8:	95 95       	asr	r25
     1aa:	87 95       	ror	r24
     1ac:	10 7f       	andi	r17, 0xF0	; 240
     1ae:	81 2b       	or	r24, r17
     1b0:	f7 01       	movw	r30, r14
     1b2:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     1b4:	0f 2e       	mov	r0, r31
     1b6:	f6 ef       	ldi	r31, 0xF6	; 246
     1b8:	ef 2e       	mov	r14, r31
     1ba:	f1 2c       	mov	r15, r1
     1bc:	f0 2d       	mov	r31, r0
     1be:	f7 01       	movw	r30, r14
     1c0:	10 81       	ld	r17, Z
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     1ca:	88 27       	eor	r24, r24
     1cc:	9f 70       	andi	r25, 0x0F	; 15
     1ce:	10 7f       	andi	r17, 0xF0	; 240
     1d0:	19 2b       	or	r17, r25
     1d2:	f7 01       	movw	r30, r14
     1d4:	10 83       	st	Z, r17
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     1d6:	0f 2e       	mov	r0, r31
     1d8:	fb ef       	ldi	r31, 0xFB	; 251
     1da:	ef 2e       	mov	r14, r31
     1dc:	f1 2c       	mov	r15, r1
     1de:	f0 2d       	mov	r31, r0
     1e0:	f7 01       	movw	r30, r14
     1e2:	10 81       	ld	r17, Z
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     1ec:	10 7f       	andi	r17, 0xF0	; 240
     1ee:	95 95       	asr	r25
     1f0:	95 95       	asr	r25
     1f2:	95 95       	asr	r25
     1f4:	95 95       	asr	r25
     1f6:	91 2b       	or	r25, r17
     1f8:	f7 01       	movw	r30, r14
     1fa:	90 83       	st	Z, r25
     1fc:	9f c1       	rjmp	.+830    	; 0x53c <__stack+0x3d>
		
	} else if(pos==1){
     1fe:	61 30       	cpi	r22, 0x01	; 1
     200:	71 05       	cpc	r23, r1
     202:	09 f0       	breq	.+2      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
     204:	50 c0       	rjmp	.+160    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&getValueArray(i))<<4);
     206:	0f 2e       	mov	r0, r31
     208:	fc ee       	ldi	r31, 0xEC	; 236
     20a:	ef 2e       	mov	r14, r31
     20c:	f1 2c       	mov	r15, r1
     20e:	f0 2d       	mov	r31, r0
     210:	f7 01       	movw	r30, r14
     212:	10 81       	ld	r17, Z
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	9a 81       	ldd	r25, Y+2	; 0x02
     218:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     21c:	1f 70       	andi	r17, 0x0F	; 15
     21e:	82 95       	swap	r24
     220:	92 95       	swap	r25
     222:	90 7f       	andi	r25, 0xF0	; 240
     224:	98 27       	eor	r25, r24
     226:	80 7f       	andi	r24, 0xF0	; 240
     228:	98 27       	eor	r25, r24
     22a:	81 2b       	or	r24, r17
     22c:	f7 01       	movw	r30, r14
     22e:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     230:	0f 2e       	mov	r0, r31
     232:	f1 ef       	ldi	r31, 0xF1	; 241
     234:	ef 2e       	mov	r14, r31
     236:	f1 2c       	mov	r15, r1
     238:	f0 2d       	mov	r31, r0
     23a:	f7 01       	movw	r30, r14
     23c:	10 81       	ld	r17, Z
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     246:	1f 70       	andi	r17, 0x0F	; 15
     248:	80 7f       	andi	r24, 0xF0	; 240
     24a:	81 2b       	or	r24, r17
     24c:	f7 01       	movw	r30, r14
     24e:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     250:	0f 2e       	mov	r0, r31
     252:	f6 ef       	ldi	r31, 0xF6	; 246
     254:	ef 2e       	mov	r14, r31
     256:	f1 2c       	mov	r15, r1
     258:	f0 2d       	mov	r31, r0
     25a:	f7 01       	movw	r30, r14
     25c:	10 81       	ld	r17, Z
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     266:	88 27       	eor	r24, r24
     268:	9f 70       	andi	r25, 0x0F	; 15
     26a:	95 95       	asr	r25
     26c:	87 95       	ror	r24
     26e:	95 95       	asr	r25
     270:	87 95       	ror	r24
     272:	95 95       	asr	r25
     274:	87 95       	ror	r24
     276:	95 95       	asr	r25
     278:	87 95       	ror	r24
     27a:	1f 70       	andi	r17, 0x0F	; 15
     27c:	81 2b       	or	r24, r17
     27e:	f7 01       	movw	r30, r14
     280:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     282:	0f 2e       	mov	r0, r31
     284:	fb ef       	ldi	r31, 0xFB	; 251
     286:	ef 2e       	mov	r14, r31
     288:	f1 2c       	mov	r15, r1
     28a:	f0 2d       	mov	r31, r0
     28c:	f7 01       	movw	r30, r14
     28e:	10 81       	ld	r17, Z
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     298:	88 27       	eor	r24, r24
     29a:	90 7f       	andi	r25, 0xF0	; 240
     29c:	1f 70       	andi	r17, 0x0F	; 15
     29e:	19 2b       	or	r17, r25
     2a0:	f7 01       	movw	r30, r14
     2a2:	10 83       	st	Z, r17
     2a4:	4b c1       	rjmp	.+662    	; 0x53c <__stack+0x3d>
	} else if(pos==2){
     2a6:	62 30       	cpi	r22, 0x02	; 2
     2a8:	71 05       	cpc	r23, r1
     2aa:	09 f0       	breq	.+2      	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
     2ac:	4e c0       	rjmp	.+156    	; 0x34a <__EEPROM_REGION_LENGTH__+0x14a>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&getValueArray(i))<<0;
     2ae:	0f 2e       	mov	r0, r31
     2b0:	fd ee       	ldi	r31, 0xED	; 237
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f1 2c       	mov	r15, r1
     2b6:	f0 2d       	mov	r31, r0
     2b8:	f7 01       	movw	r30, r14
     2ba:	10 81       	ld	r17, Z
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
     2c0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     2c4:	10 7f       	andi	r17, 0xF0	; 240
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	81 2b       	or	r24, r17
     2ca:	f7 01       	movw	r30, r14
     2cc:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     2ce:	0f 2e       	mov	r0, r31
     2d0:	f2 ef       	ldi	r31, 0xF2	; 242
     2d2:	ef 2e       	mov	r14, r31
     2d4:	f1 2c       	mov	r15, r1
     2d6:	f0 2d       	mov	r31, r0
     2d8:	f7 01       	movw	r30, r14
     2da:	10 81       	ld	r17, Z
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     2e4:	80 7f       	andi	r24, 0xF0	; 240
     2e6:	99 27       	eor	r25, r25
     2e8:	95 95       	asr	r25
     2ea:	87 95       	ror	r24
     2ec:	95 95       	asr	r25
     2ee:	87 95       	ror	r24
     2f0:	95 95       	asr	r25
     2f2:	87 95       	ror	r24
     2f4:	95 95       	asr	r25
     2f6:	87 95       	ror	r24
     2f8:	10 7f       	andi	r17, 0xF0	; 240
     2fa:	81 2b       	or	r24, r17
     2fc:	f7 01       	movw	r30, r14
     2fe:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     300:	0f 2e       	mov	r0, r31
     302:	f7 ef       	ldi	r31, 0xF7	; 247
     304:	ef 2e       	mov	r14, r31
     306:	f1 2c       	mov	r15, r1
     308:	f0 2d       	mov	r31, r0
     30a:	f7 01       	movw	r30, r14
     30c:	10 81       	ld	r17, Z
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     316:	88 27       	eor	r24, r24
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	10 7f       	andi	r17, 0xF0	; 240
     31c:	19 2b       	or	r17, r25
     31e:	f7 01       	movw	r30, r14
     320:	10 83       	st	Z, r17
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     322:	0f 2e       	mov	r0, r31
     324:	fc ef       	ldi	r31, 0xFC	; 252
     326:	ef 2e       	mov	r14, r31
     328:	f1 2c       	mov	r15, r1
     32a:	f0 2d       	mov	r31, r0
     32c:	f7 01       	movw	r30, r14
     32e:	10 81       	ld	r17, Z
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	9a 81       	ldd	r25, Y+2	; 0x02
     334:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     338:	10 7f       	andi	r17, 0xF0	; 240
     33a:	95 95       	asr	r25
     33c:	95 95       	asr	r25
     33e:	95 95       	asr	r25
     340:	95 95       	asr	r25
     342:	91 2b       	or	r25, r17
     344:	f7 01       	movw	r30, r14
     346:	90 83       	st	Z, r25
     348:	f9 c0       	rjmp	.+498    	; 0x53c <__stack+0x3d>
		
	} else if(pos==3){
     34a:	63 30       	cpi	r22, 0x03	; 3
     34c:	71 05       	cpc	r23, r1
     34e:	09 f0       	breq	.+2      	; 0x352 <__EEPROM_REGION_LENGTH__+0x152>
     350:	50 c0       	rjmp	.+160    	; 0x3f2 <__EEPROM_REGION_LENGTH__+0x1f2>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&getValueArray(i))<<4);
     352:	0f 2e       	mov	r0, r31
     354:	fd ee       	ldi	r31, 0xED	; 237
     356:	ef 2e       	mov	r14, r31
     358:	f1 2c       	mov	r15, r1
     35a:	f0 2d       	mov	r31, r0
     35c:	f7 01       	movw	r30, r14
     35e:	10 81       	ld	r17, Z
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	9a 81       	ldd	r25, Y+2	; 0x02
     364:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     368:	1f 70       	andi	r17, 0x0F	; 15
     36a:	82 95       	swap	r24
     36c:	92 95       	swap	r25
     36e:	90 7f       	andi	r25, 0xF0	; 240
     370:	98 27       	eor	r25, r24
     372:	80 7f       	andi	r24, 0xF0	; 240
     374:	98 27       	eor	r25, r24
     376:	81 2b       	or	r24, r17
     378:	f7 01       	movw	r30, r14
     37a:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     37c:	0f 2e       	mov	r0, r31
     37e:	f2 ef       	ldi	r31, 0xF2	; 242
     380:	ef 2e       	mov	r14, r31
     382:	f1 2c       	mov	r15, r1
     384:	f0 2d       	mov	r31, r0
     386:	f7 01       	movw	r30, r14
     388:	10 81       	ld	r17, Z
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     392:	1f 70       	andi	r17, 0x0F	; 15
     394:	80 7f       	andi	r24, 0xF0	; 240
     396:	81 2b       	or	r24, r17
     398:	f7 01       	movw	r30, r14
     39a:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     39c:	0f 2e       	mov	r0, r31
     39e:	f7 ef       	ldi	r31, 0xF7	; 247
     3a0:	ef 2e       	mov	r14, r31
     3a2:	f1 2c       	mov	r15, r1
     3a4:	f0 2d       	mov	r31, r0
     3a6:	f7 01       	movw	r30, r14
     3a8:	10 81       	ld	r17, Z
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     3b2:	88 27       	eor	r24, r24
     3b4:	9f 70       	andi	r25, 0x0F	; 15
     3b6:	95 95       	asr	r25
     3b8:	87 95       	ror	r24
     3ba:	95 95       	asr	r25
     3bc:	87 95       	ror	r24
     3be:	95 95       	asr	r25
     3c0:	87 95       	ror	r24
     3c2:	95 95       	asr	r25
     3c4:	87 95       	ror	r24
     3c6:	1f 70       	andi	r17, 0x0F	; 15
     3c8:	81 2b       	or	r24, r17
     3ca:	f7 01       	movw	r30, r14
     3cc:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     3ce:	0f 2e       	mov	r0, r31
     3d0:	fc ef       	ldi	r31, 0xFC	; 252
     3d2:	ef 2e       	mov	r14, r31
     3d4:	f1 2c       	mov	r15, r1
     3d6:	f0 2d       	mov	r31, r0
     3d8:	f7 01       	movw	r30, r14
     3da:	10 81       	ld	r17, Z
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     3e4:	88 27       	eor	r24, r24
     3e6:	90 7f       	andi	r25, 0xF0	; 240
     3e8:	1f 70       	andi	r17, 0x0F	; 15
     3ea:	19 2b       	or	r17, r25
     3ec:	f7 01       	movw	r30, r14
     3ee:	10 83       	st	Z, r17
     3f0:	a5 c0       	rjmp	.+330    	; 0x53c <__stack+0x3d>
		
	} else if(pos==4){
     3f2:	64 30       	cpi	r22, 0x04	; 4
     3f4:	71 05       	cpc	r23, r1
     3f6:	09 f0       	breq	.+2      	; 0x3fa <__EEPROM_REGION_LENGTH__+0x1fa>
     3f8:	4e c0       	rjmp	.+156    	; 0x496 <__DATA_REGION_LENGTH__+0x96>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&getValueArray(i))<<0;
     3fa:	0f 2e       	mov	r0, r31
     3fc:	fe ee       	ldi	r31, 0xEE	; 238
     3fe:	ef 2e       	mov	r14, r31
     400:	f1 2c       	mov	r15, r1
     402:	f0 2d       	mov	r31, r0
     404:	f7 01       	movw	r30, r14
     406:	10 81       	ld	r17, Z
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	9a 81       	ldd	r25, Y+2	; 0x02
     40c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     410:	10 7f       	andi	r17, 0xF0	; 240
     412:	8f 70       	andi	r24, 0x0F	; 15
     414:	81 2b       	or	r24, r17
     416:	f7 01       	movw	r30, r14
     418:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     41a:	0f 2e       	mov	r0, r31
     41c:	f3 ef       	ldi	r31, 0xF3	; 243
     41e:	ef 2e       	mov	r14, r31
     420:	f1 2c       	mov	r15, r1
     422:	f0 2d       	mov	r31, r0
     424:	f7 01       	movw	r30, r14
     426:	10 81       	ld	r17, Z
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     430:	80 7f       	andi	r24, 0xF0	; 240
     432:	99 27       	eor	r25, r25
     434:	95 95       	asr	r25
     436:	87 95       	ror	r24
     438:	95 95       	asr	r25
     43a:	87 95       	ror	r24
     43c:	95 95       	asr	r25
     43e:	87 95       	ror	r24
     440:	95 95       	asr	r25
     442:	87 95       	ror	r24
     444:	10 7f       	andi	r17, 0xF0	; 240
     446:	81 2b       	or	r24, r17
     448:	f7 01       	movw	r30, r14
     44a:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     44c:	0f 2e       	mov	r0, r31
     44e:	f8 ef       	ldi	r31, 0xF8	; 248
     450:	ef 2e       	mov	r14, r31
     452:	f1 2c       	mov	r15, r1
     454:	f0 2d       	mov	r31, r0
     456:	f7 01       	movw	r30, r14
     458:	10 81       	ld	r17, Z
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     462:	88 27       	eor	r24, r24
     464:	9f 70       	andi	r25, 0x0F	; 15
     466:	10 7f       	andi	r17, 0xF0	; 240
     468:	19 2b       	or	r17, r25
     46a:	f7 01       	movw	r30, r14
     46c:	10 83       	st	Z, r17
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     46e:	0f 2e       	mov	r0, r31
     470:	fd ef       	ldi	r31, 0xFD	; 253
     472:	ef 2e       	mov	r14, r31
     474:	f1 2c       	mov	r15, r1
     476:	f0 2d       	mov	r31, r0
     478:	f7 01       	movw	r30, r14
     47a:	10 81       	ld	r17, Z
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	9a 81       	ldd	r25, Y+2	; 0x02
     480:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     484:	10 7f       	andi	r17, 0xF0	; 240
     486:	95 95       	asr	r25
     488:	95 95       	asr	r25
     48a:	95 95       	asr	r25
     48c:	95 95       	asr	r25
     48e:	91 2b       	or	r25, r17
     490:	f7 01       	movw	r30, r14
     492:	90 83       	st	Z, r25
     494:	53 c0       	rjmp	.+166    	; 0x53c <__stack+0x3d>
		
	} else if(pos==5){
     496:	65 30       	cpi	r22, 0x05	; 5
     498:	71 05       	cpc	r23, r1
     49a:	09 f0       	breq	.+2      	; 0x49e <__DATA_REGION_LENGTH__+0x9e>
     49c:	4f c0       	rjmp	.+158    	; 0x53c <__stack+0x3d>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&getValueArray(i))<<4);
     49e:	0f 2e       	mov	r0, r31
     4a0:	fe ee       	ldi	r31, 0xEE	; 238
     4a2:	ef 2e       	mov	r14, r31
     4a4:	f1 2c       	mov	r15, r1
     4a6:	f0 2d       	mov	r31, r0
     4a8:	f7 01       	movw	r30, r14
     4aa:	10 81       	ld	r17, Z
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4b4:	1f 70       	andi	r17, 0x0F	; 15
     4b6:	82 95       	swap	r24
     4b8:	92 95       	swap	r25
     4ba:	90 7f       	andi	r25, 0xF0	; 240
     4bc:	98 27       	eor	r25, r24
     4be:	80 7f       	andi	r24, 0xF0	; 240
     4c0:	98 27       	eor	r25, r24
     4c2:	81 2b       	or	r24, r17
     4c4:	f7 01       	movw	r30, r14
     4c6:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     4c8:	0f 2e       	mov	r0, r31
     4ca:	f3 ef       	ldi	r31, 0xF3	; 243
     4cc:	ef 2e       	mov	r14, r31
     4ce:	f1 2c       	mov	r15, r1
     4d0:	f0 2d       	mov	r31, r0
     4d2:	f7 01       	movw	r30, r14
     4d4:	10 81       	ld	r17, Z
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4de:	1f 70       	andi	r17, 0x0F	; 15
     4e0:	80 7f       	andi	r24, 0xF0	; 240
     4e2:	81 2b       	or	r24, r17
     4e4:	f7 01       	movw	r30, r14
     4e6:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     4e8:	0f 2e       	mov	r0, r31
     4ea:	f8 ef       	ldi	r31, 0xF8	; 248
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f1 2c       	mov	r15, r1
     4f0:	f0 2d       	mov	r31, r0
     4f2:	f7 01       	movw	r30, r14
     4f4:	10 81       	ld	r17, Z
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4fe:	88 27       	eor	r24, r24
     500:	9f 70       	andi	r25, 0x0F	; 15
     502:	95 95       	asr	r25
     504:	87 95       	ror	r24
     506:	95 95       	asr	r25
     508:	87 95       	ror	r24
     50a:	95 95       	asr	r25
     50c:	87 95       	ror	r24
     50e:	95 95       	asr	r25
     510:	87 95       	ror	r24
     512:	1f 70       	andi	r17, 0x0F	; 15
     514:	81 2b       	or	r24, r17
     516:	f7 01       	movw	r30, r14
     518:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     51a:	0f 2e       	mov	r0, r31
     51c:	fd ef       	ldi	r31, 0xFD	; 253
     51e:	ef 2e       	mov	r14, r31
     520:	f1 2c       	mov	r15, r1
     522:	f0 2d       	mov	r31, r0
     524:	f7 01       	movw	r30, r14
     526:	10 81       	ld	r17, Z
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     530:	88 27       	eor	r24, r24
     532:	90 7f       	andi	r25, 0xF0	; 240
     534:	1f 70       	andi	r17, 0x0F	; 15
     536:	19 2b       	or	r17, r25
     538:	f7 01       	movw	r30, r14
     53a:	10 83       	st	Z, r17
		
	}
	

}
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	08 95       	ret

0000054c <printAt>:

void printAt(long num, int pos) {
     54c:	8f 92       	push	r8
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	4b 01       	movw	r8, r22
     562:	5c 01       	movw	r10, r24
     564:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     566:	24 e6       	ldi	r18, 0x64	; 100
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodsi4>
     572:	0f 2e       	mov	r0, r31
     574:	fa e0       	ldi	r31, 0x0A	; 10
     576:	cf 2e       	mov	r12, r31
     578:	d1 2c       	mov	r13, r1
     57a:	e1 2c       	mov	r14, r1
     57c:	f1 2c       	mov	r15, r1
     57e:	f0 2d       	mov	r31, r0
     580:	a7 01       	movw	r20, r14
     582:	96 01       	movw	r18, r12
     584:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodsi4>
     588:	be 01       	movw	r22, r28
     58a:	80 e3       	ldi	r24, 0x30	; 48
     58c:	82 0f       	add	r24, r18
     58e:	0e 94 92 00 	call	0x124	; 0x124 <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     592:	21 96       	adiw	r28, 0x01	; 1
     594:	c5 01       	movw	r24, r10
     596:	b4 01       	movw	r22, r8
     598:	a7 01       	movw	r20, r14
     59a:	96 01       	movw	r18, r12
     59c:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodsi4>
     5a0:	86 2f       	mov	r24, r22
     5a2:	be 01       	movw	r22, r28
     5a4:	80 5d       	subi	r24, 0xD0	; 208
     5a6:	0e 94 92 00 	call	0x124	; 0x124 <writeChar>
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	08 95       	ret

000005c0 <carOffBridge>:
#include "light.h"
#include "TinyTimber.h"
#include "lcd.h"


void carOffBridge(lightsObject* self){
     5c0:	cf 92       	push	r12
     5c2:	df 92       	push	r13
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
    self->carsOnBridge--;
     5cc:	fc 01       	movw	r30, r24
     5ce:	26 81       	ldd	r18, Z+6	; 0x06
     5d0:	37 81       	ldd	r19, Z+7	; 0x07
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	31 09       	sbc	r19, r1
     5d6:	37 83       	std	Z+7, r19	; 0x07
     5d8:	26 83       	std	Z+6, r18	; 0x06
    ASYNC(self, updateLCD, NULL);
     5da:	c1 2c       	mov	r12, r1
     5dc:	d1 2c       	mov	r13, r1
     5de:	0f 2e       	mov	r0, r31
     5e0:	ff e0       	ldi	r31, 0x0F	; 15
     5e2:	ef 2e       	mov	r14, r31
     5e4:	f4 e0       	ldi	r31, 0x04	; 4
     5e6:	ff 2e       	mov	r15, r31
     5e8:	f0 2d       	mov	r31, r0
     5ea:	8c 01       	movw	r16, r24
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	a9 01       	movw	r20, r18
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	cb 01       	movw	r24, r22
     5f8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
}
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	08 95       	ret

0000060a <openBridge>:

void openBridge(lightsObject* self){
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	fc 01       	movw	r30, r24
    LCDDR3 = !LCDDR3;
     618:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	91 11       	cpse	r25, r1
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    self->carsRow = 0;
     626:	13 8a       	std	Z+19, r1	; 0x13
     628:	12 8a       	std	Z+18, r1	; 0x12
    self->bridgeLock = 0; 
     62a:	15 8a       	std	Z+21, r1	; 0x15
     62c:	14 8a       	std	Z+20, r1	; 0x14
    if(self->direction == north && (self->carsSouth >= 1 )){
     62e:	80 89       	ldd	r24, Z+16	; 0x10
     630:	91 89       	ldd	r25, Z+17	; 0x11
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	91 05       	cpc	r25, r1
     636:	e9 f4       	brne	.+58     	; 0x672 <openBridge+0x68>
     638:	82 85       	ldd	r24, Z+10	; 0x0a
     63a:	93 85       	ldd	r25, Z+11	; 0x0b
     63c:	18 16       	cp	r1, r24
     63e:	19 06       	cpc	r1, r25
     640:	cc f5       	brge	.+114    	; 0x6b4 <openBridge+0xaa>
        self->direction = south;
     642:	11 8a       	std	Z+17, r1	; 0x11
     644:	10 8a       	std	Z+16, r1	; 0x10
        ASYNC(self->serial, USART_Transmit, 0x6);     // 0x6 = 0110 green south and red north on 
     646:	04 81       	ldd	r16, Z+4	; 0x04
     648:	15 81       	ldd	r17, Z+5	; 0x05
     64a:	0f 2e       	mov	r0, r31
     64c:	f6 e0       	ldi	r31, 0x06	; 6
     64e:	cf 2e       	mov	r12, r31
     650:	d1 2c       	mov	r13, r1
     652:	f0 2d       	mov	r31, r0
     654:	0f 2e       	mov	r0, r31
     656:	fc e0       	ldi	r31, 0x0C	; 12
     658:	ef 2e       	mov	r14, r31
     65a:	f2 e1       	ldi	r31, 0x12	; 18
     65c:	ff 2e       	mov	r15, r31
     65e:	f0 2d       	mov	r31, r0
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	a9 01       	movw	r20, r18
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	cb 01       	movw	r24, r22
     66c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
     670:	25 c0       	rjmp	.+74     	; 0x6bc <openBridge+0xb2>

    }else if(self->direction == south && (self->carsNorth >= 1 )){
     672:	89 2b       	or	r24, r25
     674:	f9 f4       	brne	.+62     	; 0x6b4 <openBridge+0xaa>
     676:	80 85       	ldd	r24, Z+8	; 0x08
     678:	91 85       	ldd	r25, Z+9	; 0x09
     67a:	18 16       	cp	r1, r24
     67c:	19 06       	cpc	r1, r25
     67e:	d4 f4       	brge	.+52     	; 0x6b4 <openBridge+0xaa>
        self->direction = north;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	91 8b       	std	Z+17, r25	; 0x11
     686:	80 8b       	std	Z+16, r24	; 0x10
        ASYNC(self->serial, USART_Transmit, 0x9);  // 0x9 = 1001 green north and red south on
     688:	04 81       	ldd	r16, Z+4	; 0x04
     68a:	15 81       	ldd	r17, Z+5	; 0x05
     68c:	0f 2e       	mov	r0, r31
     68e:	f9 e0       	ldi	r31, 0x09	; 9
     690:	cf 2e       	mov	r12, r31
     692:	d1 2c       	mov	r13, r1
     694:	f0 2d       	mov	r31, r0
     696:	0f 2e       	mov	r0, r31
     698:	fc e0       	ldi	r31, 0x0C	; 12
     69a:	ef 2e       	mov	r14, r31
     69c:	f2 e1       	ldi	r31, 0x12	; 18
     69e:	ff 2e       	mov	r15, r31
     6a0:	f0 2d       	mov	r31, r0
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	a9 01       	movw	r20, r18
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	cb 01       	movw	r24, r22
     6ae:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
     6b2:	04 c0       	rjmp	.+8      	; 0x6bc <openBridge+0xb2>
    }else{
        self->direction = noDirection;
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	91 8b       	std	Z+17, r25	; 0x11
     6ba:	80 8b       	std	Z+16, r24	; 0x10

    }

   
    //ASYNC(self,sensorRead, NULL);
}
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	08 95       	ret

000006ca <closeBridge>:



void closeBridge(lightsObject* self){
     6ca:	cf 92       	push	r12
     6cc:	df 92       	push	r13
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
    self->bridgeLock = 1; 
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	9d 8b       	std	Y+21, r25	; 0x15
     6e2:	8c 8b       	std	Y+20, r24	; 0x14
    ASYNC(self->serial, USART_Transmit, 0xA); // 0xA = 1010 all red on and green off
     6e4:	0c 81       	ldd	r16, Y+4	; 0x04
     6e6:	1d 81       	ldd	r17, Y+5	; 0x05
     6e8:	0f 2e       	mov	r0, r31
     6ea:	fa e0       	ldi	r31, 0x0A	; 10
     6ec:	cf 2e       	mov	r12, r31
     6ee:	d1 2c       	mov	r13, r1
     6f0:	f0 2d       	mov	r31, r0
     6f2:	0f 2e       	mov	r0, r31
     6f4:	fc e0       	ldi	r31, 0x0C	; 12
     6f6:	ef 2e       	mov	r14, r31
     6f8:	f2 e1       	ldi	r31, 0x12	; 18
     6fa:	ff 2e       	mov	r15, r31
     6fc:	f0 2d       	mov	r31, r0
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	a9 01       	movw	r20, r18
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	cb 01       	movw	r24, r22
     70a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
    LCDDR18 =  !LCDDR18;
     70e:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	91 11       	cpse	r25, r1
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
    AFTER(MSEC(5000),self, openBridge, NULL);
     71c:	c1 2c       	mov	r12, r1
     71e:	d1 2c       	mov	r13, r1
     720:	0f 2e       	mov	r0, r31
     722:	f5 e0       	ldi	r31, 0x05	; 5
     724:	ef 2e       	mov	r14, r31
     726:	f3 e0       	ldi	r31, 0x03	; 3
     728:	ff 2e       	mov	r15, r31
     72a:	f0 2d       	mov	r31, r0
     72c:	8e 01       	movw	r16, r28
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	a9 01       	movw	r20, r18
     734:	6a e5       	ldi	r22, 0x5A	; 90
     736:	72 e6       	ldi	r23, 0x62	; 98
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
    

}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	df 90       	pop	r13
     74e:	cf 90       	pop	r12
     750:	08 95       	ret

00000752 <startCars>:

int startCars(lightsObject* self){
     752:	cf 92       	push	r12
     754:	df 92       	push	r13
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17

    if(self->bridgeLock == 1 ){
     75e:	fc 01       	movw	r30, r24
     760:	24 89       	ldd	r18, Z+20	; 0x14
     762:	35 89       	ldd	r19, Z+21	; 0x15
     764:	21 30       	cpi	r18, 0x01	; 1
     766:	31 05       	cpc	r19, r1
     768:	09 f4       	brne	.+2      	; 0x76c <startCars+0x1a>
     76a:	47 c0       	rjmp	.+142    	; 0x7fa <startCars+0xa8>
        return 0;
    }

    if(self->direction == noDirection && self->carsNorth >= self->carsSouth ){ 
     76c:	20 89       	ldd	r18, Z+16	; 0x10
     76e:	31 89       	ldd	r19, Z+17	; 0x11
     770:	22 30       	cpi	r18, 0x02	; 2
     772:	31 05       	cpc	r19, r1
     774:	09 f0       	breq	.+2      	; 0x778 <startCars+0x26>
     776:	44 c0       	rjmp	.+136    	; 0x800 <startCars+0xae>
     778:	20 85       	ldd	r18, Z+8	; 0x08
     77a:	31 85       	ldd	r19, Z+9	; 0x09
     77c:	82 85       	ldd	r24, Z+10	; 0x0a
     77e:	93 85       	ldd	r25, Z+11	; 0x0b
     780:	28 17       	cp	r18, r24
     782:	39 07       	cpc	r19, r25
     784:	f4 f0       	brlt	.+60     	; 0x7c2 <startCars+0x70>
        if(self->carsNorth >= 0){
     786:	33 23       	and	r19, r19
     788:	f4 f1       	brlt	.+124    	; 0x806 <startCars+0xb4>
            self->direction = north;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	91 8b       	std	Z+17, r25	; 0x11
     790:	80 8b       	std	Z+16, r24	; 0x10
            ASYNC(self->serial, USART_Transmit, 0x9);    // 0x9 = 1001 green north and red south on
     792:	04 81       	ldd	r16, Z+4	; 0x04
     794:	15 81       	ldd	r17, Z+5	; 0x05
     796:	0f 2e       	mov	r0, r31
     798:	f9 e0       	ldi	r31, 0x09	; 9
     79a:	cf 2e       	mov	r12, r31
     79c:	d1 2c       	mov	r13, r1
     79e:	f0 2d       	mov	r31, r0
     7a0:	0f 2e       	mov	r0, r31
     7a2:	fc e0       	ldi	r31, 0x0C	; 12
     7a4:	ef 2e       	mov	r14, r31
     7a6:	f2 e1       	ldi	r31, 0x12	; 18
     7a8:	ff 2e       	mov	r15, r31
     7aa:	f0 2d       	mov	r31, r0
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	a9 01       	movw	r20, r18
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	cb 01       	movw	r24, r22
     7b8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
        self->direction = south;
        ASYNC(self->serial, USART_Transmit, 0x6);     // 0x6 = 0110 green south and red north on  

    }

    return 1;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	27 c0       	rjmp	.+78     	; 0x810 <startCars+0xbe>
            self->direction = north;
            ASYNC(self->serial, USART_Transmit, 0x9);    // 0x9 = 1001 green north and red south on
        }
        

    } else if(self->direction == noDirection && self->carsSouth >= 0){
     7c2:	99 23       	and	r25, r25
     7c4:	1c f1       	brlt	.+70     	; 0x80c <startCars+0xba>
        
        self->direction = south;
     7c6:	11 8a       	std	Z+17, r1	; 0x11
     7c8:	10 8a       	std	Z+16, r1	; 0x10
        ASYNC(self->serial, USART_Transmit, 0x6);     // 0x6 = 0110 green south and red north on  
     7ca:	04 81       	ldd	r16, Z+4	; 0x04
     7cc:	15 81       	ldd	r17, Z+5	; 0x05
     7ce:	0f 2e       	mov	r0, r31
     7d0:	f6 e0       	ldi	r31, 0x06	; 6
     7d2:	cf 2e       	mov	r12, r31
     7d4:	d1 2c       	mov	r13, r1
     7d6:	f0 2d       	mov	r31, r0
     7d8:	0f 2e       	mov	r0, r31
     7da:	fc e0       	ldi	r31, 0x0C	; 12
     7dc:	ef 2e       	mov	r14, r31
     7de:	f2 e1       	ldi	r31, 0x12	; 18
     7e0:	ff 2e       	mov	r15, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	a9 01       	movw	r20, r18
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	cb 01       	movw	r24, r22
     7f0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>

    }

    return 1;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0b c0       	rjmp	.+22     	; 0x810 <startCars+0xbe>
}

int startCars(lightsObject* self){

    if(self->bridgeLock == 1 ){
        return 0;
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	08 c0       	rjmp	.+16     	; 0x810 <startCars+0xbe>
        self->direction = south;
        ASYNC(self->serial, USART_Transmit, 0x6);     // 0x6 = 0110 green south and red north on  

    }

    return 1;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	05 c0       	rjmp	.+10     	; 0x810 <startCars+0xbe>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	02 c0       	rjmp	.+4      	; 0x810 <startCars+0xbe>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0

    //self->direction = noDirection;

}
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	08 95       	ret

0000081e <updateLCD>:
    
}
*/


void updateLCD(lightsObject* self){
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
    printAt(self->carsNorth,0);
     824:	68 85       	ldd	r22, Y+8	; 0x08
     826:	79 85       	ldd	r23, Y+9	; 0x09
     828:	07 2e       	mov	r0, r23
     82a:	00 0c       	add	r0, r0
     82c:	88 0b       	sbc	r24, r24
     82e:	99 0b       	sbc	r25, r25
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	0e 94 a6 02 	call	0x54c	; 0x54c <printAt>
    printAt(self->carsOnBridge,2);
     838:	6e 81       	ldd	r22, Y+6	; 0x06
     83a:	7f 81       	ldd	r23, Y+7	; 0x07
     83c:	07 2e       	mov	r0, r23
     83e:	00 0c       	add	r0, r0
     840:	88 0b       	sbc	r24, r24
     842:	99 0b       	sbc	r25, r25
     844:	42 e0       	ldi	r20, 0x02	; 2
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	0e 94 a6 02 	call	0x54c	; 0x54c <printAt>
    printAt(self->carsSouth,4);
     84c:	6a 85       	ldd	r22, Y+10	; 0x0a
     84e:	7b 85       	ldd	r23, Y+11	; 0x0b
     850:	07 2e       	mov	r0, r23
     852:	00 0c       	add	r0, r0
     854:	88 0b       	sbc	r24, r24
     856:	99 0b       	sbc	r25, r25
     858:	44 e0       	ldi	r20, 0x04	; 4
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	0e 94 a6 02 	call	0x54c	; 0x54c <printAt>
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <sensorRead>:
    //self->direction = noDirection;

}


void sensorRead(lightsObject* self){
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
    SYNC(self->serial, USART_Receive, NULL );
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	6e ef       	ldi	r22, 0xFE	; 254
     87e:	71 e1       	ldi	r23, 0x11	; 17
     880:	8c 81       	ldd	r24, Y+4	; 0x04
     882:	9d 81       	ldd	r25, Y+5	; 0x05
     884:	0e 94 b6 10 	call	0x216c	; 0x216c <sync>

	if(self->serial->inData & (1)){ // north car arrival
     888:	ec 81       	ldd	r30, Y+4	; 0x04
     88a:	fd 81       	ldd	r31, Y+5	; 0x05
     88c:	84 81       	ldd	r24, Z+4	; 0x04
     88e:	80 ff       	sbrs	r24, 0
     890:	17 c0       	rjmp	.+46     	; 0x8c0 <sensorRead+0x5a>
        self->carsNorth++;
     892:	88 85       	ldd	r24, Y+8	; 0x08
     894:	99 85       	ldd	r25, Y+9	; 0x09
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	99 87       	std	Y+9, r25	; 0x09
     89a:	88 87       	std	Y+8, r24	; 0x08
        //startCars(self);
        ASYNC(self,startCars, NULL);
     89c:	c1 2c       	mov	r12, r1
     89e:	d1 2c       	mov	r13, r1
     8a0:	0f 2e       	mov	r0, r31
     8a2:	f9 ea       	ldi	r31, 0xA9	; 169
     8a4:	ef 2e       	mov	r14, r31
     8a6:	f3 e0       	ldi	r31, 0x03	; 3
     8a8:	ff 2e       	mov	r15, r31
     8aa:	f0 2d       	mov	r31, r0
     8ac:	8e 01       	movw	r16, r28
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	a9 01       	movw	r20, r18
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	cb 01       	movw	r24, r22
     8ba:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
     8be:	06 c1       	rjmp	.+524    	; 0xacc <sensorRead+0x266>


    }else if(self->serial->inData & (1<<1)  && (self->bridgeLock == 0) ){ //  north car bridge entry
     8c0:	81 ff       	sbrs	r24, 1
     8c2:	75 c0       	rjmp	.+234    	; 0x9ae <sensorRead+0x148>
     8c4:	2c 89       	ldd	r18, Y+20	; 0x14
     8c6:	3d 89       	ldd	r19, Y+21	; 0x15
     8c8:	23 2b       	or	r18, r19
     8ca:	09 f0       	breq	.+2      	; 0x8ce <sensorRead+0x68>
     8cc:	70 c0       	rjmp	.+224    	; 0x9ae <sensorRead+0x148>
        self->carsNorth--;
     8ce:	88 85       	ldd	r24, Y+8	; 0x08
     8d0:	99 85       	ldd	r25, Y+9	; 0x09
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	99 87       	std	Y+9, r25	; 0x09
     8d6:	88 87       	std	Y+8, r24	; 0x08
        self->carsOnBridge++;
     8d8:	8e 81       	ldd	r24, Y+6	; 0x06
     8da:	9f 81       	ldd	r25, Y+7	; 0x07
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	9f 83       	std	Y+7, r25	; 0x07
     8e0:	8e 83       	std	Y+6, r24	; 0x06
        self->carsRow++;
     8e2:	8a 89       	ldd	r24, Y+18	; 0x12
     8e4:	9b 89       	ldd	r25, Y+19	; 0x13
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	9b 8b       	std	Y+19, r25	; 0x13
     8ea:	8a 8b       	std	Y+18, r24	; 0x12
        AFTER(MSEC(5000), self, carOffBridge, NULL);    // 
     8ec:	c1 2c       	mov	r12, r1
     8ee:	d1 2c       	mov	r13, r1
     8f0:	0f 2e       	mov	r0, r31
     8f2:	f0 ee       	ldi	r31, 0xE0	; 224
     8f4:	ef 2e       	mov	r14, r31
     8f6:	f2 e0       	ldi	r31, 0x02	; 2
     8f8:	ff 2e       	mov	r15, r31
     8fa:	f0 2d       	mov	r31, r0
     8fc:	8e 01       	movw	r16, r28
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	a9 01       	movw	r20, r18
     904:	6a e5       	ldi	r22, 0x5A	; 90
     906:	72 e6       	ldi	r23, 0x62	; 98
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
        if( !(self->carsNorth <= 0) && (self->carsRow <=5 | self->carsSouth <= 0)){ 
     910:	88 85       	ldd	r24, Y+8	; 0x08
     912:	99 85       	ldd	r25, Y+9	; 0x09
     914:	18 16       	cp	r1, r24
     916:	19 06       	cpc	r1, r25
     918:	c4 f5       	brge	.+112    	; 0x98a <sensorRead+0x124>
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	2a 89       	ldd	r18, Y+18	; 0x12
     91e:	3b 89       	ldd	r19, Y+19	; 0x13
     920:	26 30       	cpi	r18, 0x06	; 6
     922:	31 05       	cpc	r19, r1
     924:	0c f0       	brlt	.+2      	; 0x928 <sensorRead+0xc2>
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	81 11       	cpse	r24, r1
     92a:	09 c0       	rjmp	.+18     	; 0x93e <sensorRead+0xd8>
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	2a 85       	ldd	r18, Y+10	; 0x0a
     930:	3b 85       	ldd	r19, Y+11	; 0x0b
     932:	12 16       	cp	r1, r18
     934:	13 06       	cpc	r1, r19
     936:	0c f4       	brge	.+2      	; 0x93a <sensorRead+0xd4>
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	88 23       	and	r24, r24
     93c:	31 f1       	breq	.+76     	; 0x98a <sensorRead+0x124>
            ASYNC(self->serial, USART_Transmit, 0xA) ;               // 0xA = 1010 all red on and green off
     93e:	0c 81       	ldd	r16, Y+4	; 0x04
     940:	1d 81       	ldd	r17, Y+5	; 0x05
     942:	0f 2e       	mov	r0, r31
     944:	fa e0       	ldi	r31, 0x0A	; 10
     946:	cf 2e       	mov	r12, r31
     948:	d1 2c       	mov	r13, r1
     94a:	f0 2d       	mov	r31, r0
     94c:	0f 2e       	mov	r0, r31
     94e:	fc e0       	ldi	r31, 0x0C	; 12
     950:	ef 2e       	mov	r14, r31
     952:	f2 e1       	ldi	r31, 0x12	; 18
     954:	ff 2e       	mov	r15, r31
     956:	f0 2d       	mov	r31, r0
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	a9 01       	movw	r20, r18
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	cb 01       	movw	r24, r22
     964:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
            AFTER(MSEC(1000), self->serial, USART_Transmit, 0x9);    // 0x9 = 1001 green north and red south on
     968:	0c 81       	ldd	r16, Y+4	; 0x04
     96a:	1d 81       	ldd	r17, Y+5	; 0x05
     96c:	0f 2e       	mov	r0, r31
     96e:	f9 e0       	ldi	r31, 0x09	; 9
     970:	cf 2e       	mov	r12, r31
     972:	d1 2c       	mov	r13, r1
     974:	f0 2d       	mov	r31, r0
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	a9 01       	movw	r20, r18
     97c:	62 e1       	ldi	r22, 0x12	; 18
     97e:	7a e7       	ldi	r23, 0x7A	; 122
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
     988:	a1 c0       	rjmp	.+322    	; 0xacc <sensorRead+0x266>
        }else{
            ASYNC(self, closeBridge, NULL); //switch direction
     98a:	c1 2c       	mov	r12, r1
     98c:	d1 2c       	mov	r13, r1
     98e:	0f 2e       	mov	r0, r31
     990:	f5 e6       	ldi	r31, 0x65	; 101
     992:	ef 2e       	mov	r14, r31
     994:	f3 e0       	ldi	r31, 0x03	; 3
     996:	ff 2e       	mov	r15, r31
     998:	f0 2d       	mov	r31, r0
     99a:	8e 01       	movw	r16, r28
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	a9 01       	movw	r20, r18
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	cb 01       	movw	r24, r22
     9a8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
     9ac:	8f c0       	rjmp	.+286    	; 0xacc <sensorRead+0x266>
            //closeBridge(self);
        }       
        
	}else if(self->serial->inData & (1<<2)){ //  south car arrival
     9ae:	82 ff       	sbrs	r24, 2
     9b0:	17 c0       	rjmp	.+46     	; 0x9e0 <sensorRead+0x17a>
        self->carsSouth++;
     9b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     9b4:	9b 85       	ldd	r25, Y+11	; 0x0b
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	9b 87       	std	Y+11, r25	; 0x0b
     9ba:	8a 87       	std	Y+10, r24	; 0x0a
        //startCars(self);
        ASYNC(self,startCars, NULL);
     9bc:	c1 2c       	mov	r12, r1
     9be:	d1 2c       	mov	r13, r1
     9c0:	0f 2e       	mov	r0, r31
     9c2:	f9 ea       	ldi	r31, 0xA9	; 169
     9c4:	ef 2e       	mov	r14, r31
     9c6:	f3 e0       	ldi	r31, 0x03	; 3
     9c8:	ff 2e       	mov	r15, r31
     9ca:	f0 2d       	mov	r31, r0
     9cc:	8e 01       	movw	r16, r28
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	a9 01       	movw	r20, r18
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	cb 01       	movw	r24, r22
     9da:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
     9de:	76 c0       	rjmp	.+236    	; 0xacc <sensorRead+0x266>


	}else if(self->serial->inData & (1<<3)  && (self->bridgeLock == 0) ){ // south car bridge entry
     9e0:	83 ff       	sbrs	r24, 3
     9e2:	74 c0       	rjmp	.+232    	; 0xacc <sensorRead+0x266>
     9e4:	8c 89       	ldd	r24, Y+20	; 0x14
     9e6:	9d 89       	ldd	r25, Y+21	; 0x15
     9e8:	89 2b       	or	r24, r25
     9ea:	09 f0       	breq	.+2      	; 0x9ee <sensorRead+0x188>
     9ec:	6f c0       	rjmp	.+222    	; 0xacc <sensorRead+0x266>
        self->carsSouth--;
     9ee:	8a 85       	ldd	r24, Y+10	; 0x0a
     9f0:	9b 85       	ldd	r25, Y+11	; 0x0b
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	9b 87       	std	Y+11, r25	; 0x0b
     9f6:	8a 87       	std	Y+10, r24	; 0x0a
        self->carsOnBridge++;
     9f8:	8e 81       	ldd	r24, Y+6	; 0x06
     9fa:	9f 81       	ldd	r25, Y+7	; 0x07
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	9f 83       	std	Y+7, r25	; 0x07
     a00:	8e 83       	std	Y+6, r24	; 0x06
        self->carsRow++;
     a02:	8a 89       	ldd	r24, Y+18	; 0x12
     a04:	9b 89       	ldd	r25, Y+19	; 0x13
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	9b 8b       	std	Y+19, r25	; 0x13
     a0a:	8a 8b       	std	Y+18, r24	; 0x12
        AFTER(MSEC(5000), self, carOffBridge, NULL);    // 
     a0c:	c1 2c       	mov	r12, r1
     a0e:	d1 2c       	mov	r13, r1
     a10:	0f 2e       	mov	r0, r31
     a12:	f0 ee       	ldi	r31, 0xE0	; 224
     a14:	ef 2e       	mov	r14, r31
     a16:	f2 e0       	ldi	r31, 0x02	; 2
     a18:	ff 2e       	mov	r15, r31
     a1a:	f0 2d       	mov	r31, r0
     a1c:	8e 01       	movw	r16, r28
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	a9 01       	movw	r20, r18
     a24:	6a e5       	ldi	r22, 0x5A	; 90
     a26:	72 e6       	ldi	r23, 0x62	; 98
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
        if( !(self->carsSouth <= 0) && (self->carsRow <=5  | self->carsNorth <= 0) ){
     a30:	8a 85       	ldd	r24, Y+10	; 0x0a
     a32:	9b 85       	ldd	r25, Y+11	; 0x0b
     a34:	18 16       	cp	r1, r24
     a36:	19 06       	cpc	r1, r25
     a38:	c4 f5       	brge	.+112    	; 0xaaa <sensorRead+0x244>
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	2a 89       	ldd	r18, Y+18	; 0x12
     a3e:	3b 89       	ldd	r19, Y+19	; 0x13
     a40:	26 30       	cpi	r18, 0x06	; 6
     a42:	31 05       	cpc	r19, r1
     a44:	0c f0       	brlt	.+2      	; 0xa48 <sensorRead+0x1e2>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	81 11       	cpse	r24, r1
     a4a:	09 c0       	rjmp	.+18     	; 0xa5e <sensorRead+0x1f8>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	28 85       	ldd	r18, Y+8	; 0x08
     a50:	39 85       	ldd	r19, Y+9	; 0x09
     a52:	12 16       	cp	r1, r18
     a54:	13 06       	cpc	r1, r19
     a56:	0c f4       	brge	.+2      	; 0xa5a <sensorRead+0x1f4>
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	88 23       	and	r24, r24
     a5c:	31 f1       	breq	.+76     	; 0xaaa <sensorRead+0x244>
            ASYNC(self->serial, USART_Transmit, 0xA);                // 0xA = 1010 all red on and green off
     a5e:	0c 81       	ldd	r16, Y+4	; 0x04
     a60:	1d 81       	ldd	r17, Y+5	; 0x05
     a62:	0f 2e       	mov	r0, r31
     a64:	fa e0       	ldi	r31, 0x0A	; 10
     a66:	cf 2e       	mov	r12, r31
     a68:	d1 2c       	mov	r13, r1
     a6a:	f0 2d       	mov	r31, r0
     a6c:	0f 2e       	mov	r0, r31
     a6e:	fc e0       	ldi	r31, 0x0C	; 12
     a70:	ef 2e       	mov	r14, r31
     a72:	f2 e1       	ldi	r31, 0x12	; 18
     a74:	ff 2e       	mov	r15, r31
     a76:	f0 2d       	mov	r31, r0
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	a9 01       	movw	r20, r18
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	cb 01       	movw	r24, r22
     a84:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
            AFTER(MSEC(1000),self->serial, USART_Transmit, 0x6);     // 0x6 = 0110 green south and red north on
     a88:	0c 81       	ldd	r16, Y+4	; 0x04
     a8a:	1d 81       	ldd	r17, Y+5	; 0x05
     a8c:	0f 2e       	mov	r0, r31
     a8e:	f6 e0       	ldi	r31, 0x06	; 6
     a90:	cf 2e       	mov	r12, r31
     a92:	d1 2c       	mov	r13, r1
     a94:	f0 2d       	mov	r31, r0
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	a9 01       	movw	r20, r18
     a9c:	62 e1       	ldi	r22, 0x12	; 18
     a9e:	7a e7       	ldi	r23, 0x7A	; 122
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
     aa8:	11 c0       	rjmp	.+34     	; 0xacc <sensorRead+0x266>

        }else {
            ASYNC(self, closeBridge, NULL); //switch direction
     aaa:	c1 2c       	mov	r12, r1
     aac:	d1 2c       	mov	r13, r1
     aae:	0f 2e       	mov	r0, r31
     ab0:	f5 e6       	ldi	r31, 0x65	; 101
     ab2:	ef 2e       	mov	r14, r31
     ab4:	f3 e0       	ldi	r31, 0x03	; 3
     ab6:	ff 2e       	mov	r15, r31
     ab8:	f0 2d       	mov	r31, r0
     aba:	8e 01       	movw	r16, r28
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	a9 01       	movw	r20, r18
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	cb 01       	movw	r24, r22
     ac8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>

        } 
        
	}
    ASYNC(self, updateLCD, NULL);	
     acc:	c1 2c       	mov	r12, r1
     ace:	d1 2c       	mov	r13, r1
     ad0:	0f 2e       	mov	r0, r31
     ad2:	ff e0       	ldi	r31, 0x0F	; 15
     ad4:	ef 2e       	mov	r14, r31
     ad6:	f4 e0       	ldi	r31, 0x04	; 4
     ad8:	ff 2e       	mov	r15, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	8e 01       	movw	r16, r28
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	a9 01       	movw	r20, r18
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	cb 01       	movw	r24, r22
     aea:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	08 95       	ret

00000b00 <main>:
    //{
    //    USART_Echo();
    //}
    
    
    TINYTIMBER(&mainObj, run, NULL);
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	69 e8       	ldi	r22, 0x89	; 137
     b06:	75 e0       	ldi	r23, 0x05	; 5
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 cb 11 	call	0x2396	; 0x2396 <tinytimber>
     b10:	ff cf       	rjmp	.-2      	; 0xb10 <main+0x10>

00000b12 <run>:
void test(runObj* self){
    printAt(23,0);
}


void run(runObj* self){
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
    LCD_Init();
     b18:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
    USART_Init (self->serial);
     b1c:	8c 81       	ldd	r24, Y+4	; 0x04
     b1e:	9d 81       	ldd	r25, Y+5	; 0x05
     b20:	0e 94 e7 11 	call	0x23ce	; 0x23ce <USART_Init>

    INSTALL(self->lights, sensorRead, IRQ_USART0_RX);
     b24:	48 e0       	ldi	r20, 0x08	; 8
     b26:	63 e3       	ldi	r22, 0x33	; 51
     b28:	74 e0       	ldi	r23, 0x04	; 4
     b2a:	8e 81       	ldd	r24, Y+6	; 0x06
     b2c:	9f 81       	ldd	r25, Y+7	; 0x07
     b2e:	0e 94 b1 11 	call	0x2362	; 0x2362 <install>
    

    //INSTALL(self,interupts, IRQ_USART0_RX);
    //INSTALL(self,interupts, IRQ_USART0_UDRE);
    //INSTALL(self,interupts, IRQ_USART0_TX);
    printAt(0, 4);
     b32:	44 e0       	ldi	r20, 0x04	; 4
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	cb 01       	movw	r24, r22
     b3c:	0e 94 a6 02 	call	0x54c	; 0x54c <printAt>
        //printAt(test,0);

        //pushToSerial(0x1);
    

}
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <initialize+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <initialize+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	81 e2       	ldi	r24, 0x21	; 33
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	21 e0       	ldi	r18, 0x01	; 1
     b58:	33 e0       	ldi	r19, 0x03	; 3
     b5a:	fc 01       	movw	r30, r24
     b5c:	70 97       	sbiw	r30, 0x10	; 16
     b5e:	91 83       	std	Z+1, r25	; 0x01
     b60:	80 83       	st	Z, r24
     b62:	40 96       	adiw	r24, 0x10	; 16
     b64:	82 17       	cp	r24, r18
     b66:	93 07       	cpc	r25, r19
     b68:	c1 f7       	brne	.-16     	; 0xb5a <initialize+0x14>
     b6a:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <messages+0xe1>
     b6e:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <messages+0xe0>
     b72:	ec e5       	ldi	r30, 0x5C	; 92
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	89 e7       	ldi	r24, 0x79	; 121
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	91 83       	std	Z+1, r25	; 0x01
     b7c:	80 83       	st	Z, r24
     b7e:	86 e9       	ldi	r24, 0x96	; 150
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	96 8f       	std	Z+30, r25	; 0x1e
     b84:	85 8f       	std	Z+29, r24	; 0x1d
     b86:	a3 eb       	ldi	r26, 0xB3	; 179
     b88:	b1 e0       	ldi	r27, 0x01	; 1
     b8a:	b3 af       	std	Z+59, r27	; 0x3b
     b8c:	a2 af       	std	Z+58, r26	; 0x3a
     b8e:	1d 92       	st	X+, r1
     b90:	1c 92       	st	X, r1
     b92:	fa 83       	std	Y+2, r31	; 0x02
     b94:	e9 83       	std	Y+1, r30	; 0x01
     b96:	ed e5       	ldi	r30, 0x5D	; 93
     b98:	f3 e0       	ldi	r31, 0x03	; 3
     b9a:	fc 83       	std	Y+4, r31	; 0x04
     b9c:	eb 83       	std	Y+3, r30	; 0x03
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	06 96       	adiw	r24, 0x06	; 6
     ba4:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <setjmp>
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	e9 81       	ldd	r30, Y+1	; 0x01
     bae:	fa 81       	ldd	r31, Y+2	; 0x02
     bb0:	97 8b       	std	Z+23, r25	; 0x17
     bb2:	86 8b       	std	Z+22, r24	; 0x16
     bb4:	91 8f       	std	Z+25, r25	; 0x19
     bb6:	80 8f       	std	Z+24, r24	; 0x18
     bb8:	83 e4       	ldi	r24, 0x43	; 67
     bba:	91 e1       	ldi	r25, 0x11	; 17
     bbc:	94 8f       	std	Z+28, r25	; 0x1c
     bbe:	83 8f       	std	Z+27, r24	; 0x1b
     bc0:	15 82       	std	Z+5, r1	; 0x05
     bc2:	14 82       	std	Z+4, r1	; 0x04
     bc4:	7d 96       	adiw	r30, 0x1d	; 29
     bc6:	fa 83       	std	Y+2, r31	; 0x02
     bc8:	e9 83       	std	Y+1, r30	; 0x01
     bca:	eb 81       	ldd	r30, Y+3	; 0x03
     bcc:	fc 81       	ldd	r31, Y+4	; 0x04
     bce:	e0 5a       	subi	r30, 0xA0	; 160
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	fc 83       	std	Y+4, r31	; 0x04
     bd4:	eb 83       	std	Y+3, r30	; 0x03
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	9a 81       	ldd	r25, Y+2	; 0x02
     bda:	80 5d       	subi	r24, 0xD0	; 208
     bdc:	91 40       	sbci	r25, 0x01	; 1
     bde:	f9 f6       	brne	.-66     	; 0xb9e <initialize+0x58>
     be0:	e4 ef       	ldi	r30, 0xF4	; 244
     be2:	f1 e0       	ldi	r31, 0x01	; 1
     be4:	11 82       	std	Z+1, r1	; 0x01
     be6:	10 82       	st	Z, r1
     be8:	15 82       	std	Z+5, r1	; 0x05
     bea:	14 82       	std	Z+4, r1	; 0x04
     bec:	13 82       	std	Z+3, r1	; 0x03
     bee:	12 82       	std	Z+2, r1	; 0x02
     bf0:	e1 e6       	ldi	r30, 0x61	; 97
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 e8       	ldi	r24, 0x80	; 128
     bf6:	80 83       	st	Z, r24
     bf8:	10 82       	st	Z, r1
     bfa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bfe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c02:	84 e0       	ldi	r24, 0x04	; 4
     c04:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <dispatch>:
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	00 d0       	rcall	.+0      	; 0xc22 <dispatch+0x6>
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	9a 83       	std	Y+2, r25	; 0x02
     c28:	89 83       	std	Y+1, r24	; 0x01
     c2a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <current>
     c2e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <current+0x1>
     c32:	06 96       	adiw	r24, 0x06	; 6
     c34:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <setjmp>
     c38:	89 2b       	or	r24, r25
     c3a:	59 f4       	brne	.+22     	; 0xc52 <dispatch+0x36>
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <current+0x1>
     c44:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <current>
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	06 96       	adiw	r24, 0x06	; 6
     c4e:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <longjmp>
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <schedule>:
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <msgQ>
     c68:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <msgQ+0x1>
     c6c:	30 97       	sbiw	r30, 0x00	; 0
     c6e:	61 f1       	breq	.+88     	; 0xcc8 <schedule+0x6c>
     c70:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <threadPool>
     c74:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <threadPool+0x1>
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	31 f1       	breq	.+76     	; 0xcc8 <schedule+0x6c>
     c7c:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <activeStack>
     c80:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <activeStack+0x1>
     c84:	aa 81       	ldd	r26, Y+2	; 0x02
     c86:	bb 81       	ldd	r27, Y+3	; 0x03
     c88:	10 97       	sbiw	r26, 0x00	; 0
     c8a:	79 f0       	breq	.+30     	; 0xcaa <schedule+0x4e>
     c8c:	46 81       	ldd	r20, Z+6	; 0x06
     c8e:	57 81       	ldd	r21, Z+7	; 0x07
     c90:	60 85       	ldd	r22, Z+8	; 0x08
     c92:	71 85       	ldd	r23, Z+9	; 0x09
     c94:	16 96       	adiw	r26, 0x06	; 6
     c96:	0d 91       	ld	r16, X+
     c98:	1d 91       	ld	r17, X+
     c9a:	2d 91       	ld	r18, X+
     c9c:	3c 91       	ld	r19, X
     c9e:	19 97       	sbiw	r26, 0x09	; 9
     ca0:	40 1b       	sub	r20, r16
     ca2:	51 0b       	sbc	r21, r17
     ca4:	62 0b       	sbc	r22, r18
     ca6:	73 0b       	sbc	r23, r19
     ca8:	7a f4       	brpl	.+30     	; 0xcc8 <schedule+0x6c>
     caa:	fc 01       	movw	r30, r24
     cac:	20 81       	ld	r18, Z
     cae:	31 81       	ldd	r19, Z+1	; 0x01
     cb0:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <threadPool+0x1>
     cb4:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <threadPool>
     cb8:	d1 83       	std	Z+1, r29	; 0x01
     cba:	c0 83       	st	Z, r28
     cbc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <activeStack+0x1>
     cc0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <activeStack>
     cc4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dispatch>
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	08 95       	ret

00000cd2 <__vector_1>:
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	ef 93       	push	r30
     cf2:	ff 93       	push	r31
     cf4:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
     cf8:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
     cfc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d00:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d04:	c9 01       	movw	r24, r18
     d06:	03 2e       	mov	r0, r19
     d08:	00 0c       	add	r0, r0
     d0a:	aa 0b       	sbc	r26, r26
     d0c:	bb 0b       	sbc	r27, r27
     d0e:	dc 01       	movw	r26, r24
     d10:	99 27       	eor	r25, r25
     d12:	88 27       	eor	r24, r24
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	84 2b       	or	r24, r20
     d1a:	95 2b       	or	r25, r21
     d1c:	a6 2b       	or	r26, r22
     d1e:	b7 2b       	or	r27, r23
     d20:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     d24:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     d28:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     d2c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     d30:	b0 9b       	sbis	0x16, 0	; 22
     d32:	1b c0       	rjmp	.+54     	; 0xd6a <__vector_1+0x98>
     d34:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d38:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d3c:	c9 01       	movw	r24, r18
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	09 2e       	mov	r0, r25
     d42:	00 0c       	add	r0, r0
     d44:	aa 0b       	sbc	r26, r26
     d46:	bb 0b       	sbc	r27, r27
     d48:	dc 01       	movw	r26, r24
     d4a:	99 27       	eor	r25, r25
     d4c:	88 27       	eor	r24, r24
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	84 2b       	or	r24, r20
     d54:	95 2b       	or	r25, r21
     d56:	a6 2b       	or	r26, r22
     d58:	b7 2b       	or	r27, r23
     d5a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     d5e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     d62:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     d66:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     d6a:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable>
     d6e:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x1>
     d72:	30 97       	sbiw	r30, 0x00	; 0
     d74:	39 f0       	breq	.+14     	; 0xd84 <__vector_1+0xb2>
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable>
     d7e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x1>
     d82:	09 95       	icall
     d84:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <__vector_2>:
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	2f 93       	push	r18
     db6:	3f 93       	push	r19
     db8:	4f 93       	push	r20
     dba:	5f 93       	push	r21
     dbc:	6f 93       	push	r22
     dbe:	7f 93       	push	r23
     dc0:	8f 93       	push	r24
     dc2:	9f 93       	push	r25
     dc4:	af 93       	push	r26
     dc6:	bf 93       	push	r27
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
     dcc:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
     dd0:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
     dd4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dd8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ddc:	c9 01       	movw	r24, r18
     dde:	03 2e       	mov	r0, r19
     de0:	00 0c       	add	r0, r0
     de2:	aa 0b       	sbc	r26, r26
     de4:	bb 0b       	sbc	r27, r27
     de6:	dc 01       	movw	r26, r24
     de8:	99 27       	eor	r25, r25
     dea:	88 27       	eor	r24, r24
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	84 2b       	or	r24, r20
     df2:	95 2b       	or	r25, r21
     df4:	a6 2b       	or	r26, r22
     df6:	b7 2b       	or	r27, r23
     df8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     dfc:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     e00:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     e04:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     e08:	b0 9b       	sbis	0x16, 0	; 22
     e0a:	1b c0       	rjmp	.+54     	; 0xe42 <__vector_2+0x98>
     e0c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e10:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e14:	c9 01       	movw	r24, r18
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	09 2e       	mov	r0, r25
     e1a:	00 0c       	add	r0, r0
     e1c:	aa 0b       	sbc	r26, r26
     e1e:	bb 0b       	sbc	r27, r27
     e20:	dc 01       	movw	r26, r24
     e22:	99 27       	eor	r25, r25
     e24:	88 27       	eor	r24, r24
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	84 2b       	or	r24, r20
     e2c:	95 2b       	or	r25, r21
     e2e:	a6 2b       	or	r26, r22
     e30:	b7 2b       	or	r27, r23
     e32:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     e36:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     e3a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     e3e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     e42:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x2>
     e46:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x3>
     e4a:	30 97       	sbiw	r30, 0x00	; 0
     e4c:	39 f0       	breq	.+14     	; 0xe5c <__vector_2+0xb2>
     e4e:	61 e0       	ldi	r22, 0x01	; 1
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x2>
     e56:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x3>
     e5a:	09 95       	icall
     e5c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
     e60:	ff 91       	pop	r31
     e62:	ef 91       	pop	r30
     e64:	bf 91       	pop	r27
     e66:	af 91       	pop	r26
     e68:	9f 91       	pop	r25
     e6a:	8f 91       	pop	r24
     e6c:	7f 91       	pop	r23
     e6e:	6f 91       	pop	r22
     e70:	5f 91       	pop	r21
     e72:	4f 91       	pop	r20
     e74:	3f 91       	pop	r19
     e76:	2f 91       	pop	r18
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <__vector_3>:
     e82:	1f 92       	push	r1
     e84:	0f 92       	push	r0
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	0f 92       	push	r0
     e8a:	11 24       	eor	r1, r1
     e8c:	2f 93       	push	r18
     e8e:	3f 93       	push	r19
     e90:	4f 93       	push	r20
     e92:	5f 93       	push	r21
     e94:	6f 93       	push	r22
     e96:	7f 93       	push	r23
     e98:	8f 93       	push	r24
     e9a:	9f 93       	push	r25
     e9c:	af 93       	push	r26
     e9e:	bf 93       	push	r27
     ea0:	ef 93       	push	r30
     ea2:	ff 93       	push	r31
     ea4:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
     ea8:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
     eac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eb0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eb4:	c9 01       	movw	r24, r18
     eb6:	03 2e       	mov	r0, r19
     eb8:	00 0c       	add	r0, r0
     eba:	aa 0b       	sbc	r26, r26
     ebc:	bb 0b       	sbc	r27, r27
     ebe:	dc 01       	movw	r26, r24
     ec0:	99 27       	eor	r25, r25
     ec2:	88 27       	eor	r24, r24
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	84 2b       	or	r24, r20
     eca:	95 2b       	or	r25, r21
     ecc:	a6 2b       	or	r26, r22
     ece:	b7 2b       	or	r27, r23
     ed0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     ed4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     ed8:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     edc:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     ee0:	b0 9b       	sbis	0x16, 0	; 22
     ee2:	1b c0       	rjmp	.+54     	; 0xf1a <__vector_3+0x98>
     ee4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ee8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eec:	c9 01       	movw	r24, r18
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	09 2e       	mov	r0, r25
     ef2:	00 0c       	add	r0, r0
     ef4:	aa 0b       	sbc	r26, r26
     ef6:	bb 0b       	sbc	r27, r27
     ef8:	dc 01       	movw	r26, r24
     efa:	99 27       	eor	r25, r25
     efc:	88 27       	eor	r24, r24
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	84 2b       	or	r24, r20
     f04:	95 2b       	or	r25, r21
     f06:	a6 2b       	or	r26, r22
     f08:	b7 2b       	or	r27, r23
     f0a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     f0e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     f12:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     f16:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     f1a:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x4>
     f1e:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x5>
     f22:	30 97       	sbiw	r30, 0x00	; 0
     f24:	39 f0       	breq	.+14     	; 0xf34 <__vector_3+0xb2>
     f26:	62 e0       	ldi	r22, 0x02	; 2
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x4>
     f2e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x5>
     f32:	09 95       	icall
     f34:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	7f 91       	pop	r23
     f46:	6f 91       	pop	r22
     f48:	5f 91       	pop	r21
     f4a:	4f 91       	pop	r20
     f4c:	3f 91       	pop	r19
     f4e:	2f 91       	pop	r18
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	0f 90       	pop	r0
     f56:	1f 90       	pop	r1
     f58:	18 95       	reti

00000f5a <__vector_4>:
     f5a:	1f 92       	push	r1
     f5c:	0f 92       	push	r0
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	0f 92       	push	r0
     f62:	11 24       	eor	r1, r1
     f64:	2f 93       	push	r18
     f66:	3f 93       	push	r19
     f68:	4f 93       	push	r20
     f6a:	5f 93       	push	r21
     f6c:	6f 93       	push	r22
     f6e:	7f 93       	push	r23
     f70:	8f 93       	push	r24
     f72:	9f 93       	push	r25
     f74:	af 93       	push	r26
     f76:	bf 93       	push	r27
     f78:	ef 93       	push	r30
     f7a:	ff 93       	push	r31
     f7c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
     f80:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
     f84:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f88:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f8c:	c9 01       	movw	r24, r18
     f8e:	03 2e       	mov	r0, r19
     f90:	00 0c       	add	r0, r0
     f92:	aa 0b       	sbc	r26, r26
     f94:	bb 0b       	sbc	r27, r27
     f96:	dc 01       	movw	r26, r24
     f98:	99 27       	eor	r25, r25
     f9a:	88 27       	eor	r24, r24
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	84 2b       	or	r24, r20
     fa2:	95 2b       	or	r25, r21
     fa4:	a6 2b       	or	r26, r22
     fa6:	b7 2b       	or	r27, r23
     fa8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     fac:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     fb0:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     fb4:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     fb8:	b0 9b       	sbis	0x16, 0	; 22
     fba:	1b c0       	rjmp	.+54     	; 0xff2 <__vector_4+0x98>
     fbc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fc0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fc4:	c9 01       	movw	r24, r18
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	09 2e       	mov	r0, r25
     fca:	00 0c       	add	r0, r0
     fcc:	aa 0b       	sbc	r26, r26
     fce:	bb 0b       	sbc	r27, r27
     fd0:	dc 01       	movw	r26, r24
     fd2:	99 27       	eor	r25, r25
     fd4:	88 27       	eor	r24, r24
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	84 2b       	or	r24, r20
     fdc:	95 2b       	or	r25, r21
     fde:	a6 2b       	or	r26, r22
     fe0:	b7 2b       	or	r27, r23
     fe2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
     fe6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
     fea:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
     fee:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
     ff2:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x6>
     ff6:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x7>
     ffa:	30 97       	sbiw	r30, 0x00	; 0
     ffc:	39 f0       	breq	.+14     	; 0x100c <__vector_4+0xb2>
     ffe:	63 e0       	ldi	r22, 0x03	; 3
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x6>
    1006:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x7>
    100a:	09 95       	icall
    100c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    1010:	ff 91       	pop	r31
    1012:	ef 91       	pop	r30
    1014:	bf 91       	pop	r27
    1016:	af 91       	pop	r26
    1018:	9f 91       	pop	r25
    101a:	8f 91       	pop	r24
    101c:	7f 91       	pop	r23
    101e:	6f 91       	pop	r22
    1020:	5f 91       	pop	r21
    1022:	4f 91       	pop	r20
    1024:	3f 91       	pop	r19
    1026:	2f 91       	pop	r18
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <__vector_5>:
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	2f 93       	push	r18
    103e:	3f 93       	push	r19
    1040:	4f 93       	push	r20
    1042:	5f 93       	push	r21
    1044:	6f 93       	push	r22
    1046:	7f 93       	push	r23
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	af 93       	push	r26
    104e:	bf 93       	push	r27
    1050:	ef 93       	push	r30
    1052:	ff 93       	push	r31
    1054:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1058:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    105c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1060:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1064:	c9 01       	movw	r24, r18
    1066:	03 2e       	mov	r0, r19
    1068:	00 0c       	add	r0, r0
    106a:	aa 0b       	sbc	r26, r26
    106c:	bb 0b       	sbc	r27, r27
    106e:	dc 01       	movw	r26, r24
    1070:	99 27       	eor	r25, r25
    1072:	88 27       	eor	r24, r24
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	84 2b       	or	r24, r20
    107a:	95 2b       	or	r25, r21
    107c:	a6 2b       	or	r26, r22
    107e:	b7 2b       	or	r27, r23
    1080:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1084:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1088:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    108c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1090:	b0 9b       	sbis	0x16, 0	; 22
    1092:	1b c0       	rjmp	.+54     	; 0x10ca <__vector_5+0x98>
    1094:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1098:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    109c:	c9 01       	movw	r24, r18
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	09 2e       	mov	r0, r25
    10a2:	00 0c       	add	r0, r0
    10a4:	aa 0b       	sbc	r26, r26
    10a6:	bb 0b       	sbc	r27, r27
    10a8:	dc 01       	movw	r26, r24
    10aa:	99 27       	eor	r25, r25
    10ac:	88 27       	eor	r24, r24
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	84 2b       	or	r24, r20
    10b4:	95 2b       	or	r25, r21
    10b6:	a6 2b       	or	r26, r22
    10b8:	b7 2b       	or	r27, r23
    10ba:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    10be:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    10c2:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    10c6:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    10ca:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x8>
    10ce:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x9>
    10d2:	30 97       	sbiw	r30, 0x00	; 0
    10d4:	39 f0       	breq	.+14     	; 0x10e4 <__vector_5+0xb2>
    10d6:	64 e0       	ldi	r22, 0x04	; 4
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x8>
    10de:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x9>
    10e2:	09 95       	icall
    10e4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    10e8:	ff 91       	pop	r31
    10ea:	ef 91       	pop	r30
    10ec:	bf 91       	pop	r27
    10ee:	af 91       	pop	r26
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	7f 91       	pop	r23
    10f6:	6f 91       	pop	r22
    10f8:	5f 91       	pop	r21
    10fa:	4f 91       	pop	r20
    10fc:	3f 91       	pop	r19
    10fe:	2f 91       	pop	r18
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	0f 90       	pop	r0
    1106:	1f 90       	pop	r1
    1108:	18 95       	reti

0000110a <__vector_10>:
    110a:	1f 92       	push	r1
    110c:	0f 92       	push	r0
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	0f 92       	push	r0
    1112:	11 24       	eor	r1, r1
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
    112c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1130:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1134:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1138:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    113c:	c9 01       	movw	r24, r18
    113e:	03 2e       	mov	r0, r19
    1140:	00 0c       	add	r0, r0
    1142:	aa 0b       	sbc	r26, r26
    1144:	bb 0b       	sbc	r27, r27
    1146:	dc 01       	movw	r26, r24
    1148:	99 27       	eor	r25, r25
    114a:	88 27       	eor	r24, r24
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	84 2b       	or	r24, r20
    1152:	95 2b       	or	r25, r21
    1154:	a6 2b       	or	r26, r22
    1156:	b7 2b       	or	r27, r23
    1158:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    115c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1160:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1164:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1168:	b0 9b       	sbis	0x16, 0	; 22
    116a:	1b c0       	rjmp	.+54     	; 0x11a2 <__vector_10+0x98>
    116c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1170:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1174:	c9 01       	movw	r24, r18
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	09 2e       	mov	r0, r25
    117a:	00 0c       	add	r0, r0
    117c:	aa 0b       	sbc	r26, r26
    117e:	bb 0b       	sbc	r27, r27
    1180:	dc 01       	movw	r26, r24
    1182:	99 27       	eor	r25, r25
    1184:	88 27       	eor	r24, r24
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	84 2b       	or	r24, r20
    118c:	95 2b       	or	r25, r21
    118e:	a6 2b       	or	r26, r22
    1190:	b7 2b       	or	r27, r23
    1192:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1196:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    119a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    119e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    11a2:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0xa>
    11a6:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0xb>
    11aa:	30 97       	sbiw	r30, 0x00	; 0
    11ac:	39 f0       	breq	.+14     	; 0x11bc <__vector_10+0xb2>
    11ae:	65 e0       	ldi	r22, 0x05	; 5
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0xa>
    11b6:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0xb>
    11ba:	09 95       	icall
    11bc:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_11>:
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31
    1204:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1208:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    120c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1210:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1214:	c9 01       	movw	r24, r18
    1216:	03 2e       	mov	r0, r19
    1218:	00 0c       	add	r0, r0
    121a:	aa 0b       	sbc	r26, r26
    121c:	bb 0b       	sbc	r27, r27
    121e:	dc 01       	movw	r26, r24
    1220:	99 27       	eor	r25, r25
    1222:	88 27       	eor	r24, r24
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	84 2b       	or	r24, r20
    122a:	95 2b       	or	r25, r21
    122c:	a6 2b       	or	r26, r22
    122e:	b7 2b       	or	r27, r23
    1230:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1234:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1238:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    123c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1240:	b0 9b       	sbis	0x16, 0	; 22
    1242:	1b c0       	rjmp	.+54     	; 0x127a <__vector_11+0x98>
    1244:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1248:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    124c:	c9 01       	movw	r24, r18
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	09 2e       	mov	r0, r25
    1252:	00 0c       	add	r0, r0
    1254:	aa 0b       	sbc	r26, r26
    1256:	bb 0b       	sbc	r27, r27
    1258:	dc 01       	movw	r26, r24
    125a:	99 27       	eor	r25, r25
    125c:	88 27       	eor	r24, r24
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	84 2b       	or	r24, r20
    1264:	95 2b       	or	r25, r21
    1266:	a6 2b       	or	r26, r22
    1268:	b7 2b       	or	r27, r23
    126a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    126e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1272:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1276:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    127a:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0xc>
    127e:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0xd>
    1282:	30 97       	sbiw	r30, 0x00	; 0
    1284:	39 f0       	breq	.+14     	; 0x1294 <__vector_11+0xb2>
    1286:	66 e0       	ldi	r22, 0x06	; 6
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0xc>
    128e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0xd>
    1292:	09 95       	icall
    1294:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    1298:	ff 91       	pop	r31
    129a:	ef 91       	pop	r30
    129c:	bf 91       	pop	r27
    129e:	af 91       	pop	r26
    12a0:	9f 91       	pop	r25
    12a2:	8f 91       	pop	r24
    12a4:	7f 91       	pop	r23
    12a6:	6f 91       	pop	r22
    12a8:	5f 91       	pop	r21
    12aa:	4f 91       	pop	r20
    12ac:	3f 91       	pop	r19
    12ae:	2f 91       	pop	r18
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <__vector_12>:
    12ba:	1f 92       	push	r1
    12bc:	0f 92       	push	r0
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	0f 92       	push	r0
    12c2:	11 24       	eor	r1, r1
    12c4:	2f 93       	push	r18
    12c6:	3f 93       	push	r19
    12c8:	4f 93       	push	r20
    12ca:	5f 93       	push	r21
    12cc:	6f 93       	push	r22
    12ce:	7f 93       	push	r23
    12d0:	8f 93       	push	r24
    12d2:	9f 93       	push	r25
    12d4:	af 93       	push	r26
    12d6:	bf 93       	push	r27
    12d8:	ef 93       	push	r30
    12da:	ff 93       	push	r31
    12dc:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    12e0:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    12e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ec:	c9 01       	movw	r24, r18
    12ee:	03 2e       	mov	r0, r19
    12f0:	00 0c       	add	r0, r0
    12f2:	aa 0b       	sbc	r26, r26
    12f4:	bb 0b       	sbc	r27, r27
    12f6:	dc 01       	movw	r26, r24
    12f8:	99 27       	eor	r25, r25
    12fa:	88 27       	eor	r24, r24
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	84 2b       	or	r24, r20
    1302:	95 2b       	or	r25, r21
    1304:	a6 2b       	or	r26, r22
    1306:	b7 2b       	or	r27, r23
    1308:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    130c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1310:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1314:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1318:	b0 9b       	sbis	0x16, 0	; 22
    131a:	1b c0       	rjmp	.+54     	; 0x1352 <__vector_12+0x98>
    131c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1320:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1324:	c9 01       	movw	r24, r18
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	09 2e       	mov	r0, r25
    132a:	00 0c       	add	r0, r0
    132c:	aa 0b       	sbc	r26, r26
    132e:	bb 0b       	sbc	r27, r27
    1330:	dc 01       	movw	r26, r24
    1332:	99 27       	eor	r25, r25
    1334:	88 27       	eor	r24, r24
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	84 2b       	or	r24, r20
    133c:	95 2b       	or	r25, r21
    133e:	a6 2b       	or	r26, r22
    1340:	b7 2b       	or	r27, r23
    1342:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1346:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    134a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    134e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1352:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0xe>
    1356:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0xf>
    135a:	30 97       	sbiw	r30, 0x00	; 0
    135c:	39 f0       	breq	.+14     	; 0x136c <__vector_12+0xb2>
    135e:	67 e0       	ldi	r22, 0x07	; 7
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0xe>
    1366:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0xf>
    136a:	09 95       	icall
    136c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    1370:	ff 91       	pop	r31
    1372:	ef 91       	pop	r30
    1374:	bf 91       	pop	r27
    1376:	af 91       	pop	r26
    1378:	9f 91       	pop	r25
    137a:	8f 91       	pop	r24
    137c:	7f 91       	pop	r23
    137e:	6f 91       	pop	r22
    1380:	5f 91       	pop	r21
    1382:	4f 91       	pop	r20
    1384:	3f 91       	pop	r19
    1386:	2f 91       	pop	r18
    1388:	0f 90       	pop	r0
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	0f 90       	pop	r0
    138e:	1f 90       	pop	r1
    1390:	18 95       	reti

00001392 <__vector_13>:
    1392:	1f 92       	push	r1
    1394:	0f 92       	push	r0
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	0f 92       	push	r0
    139a:	11 24       	eor	r1, r1
    139c:	2f 93       	push	r18
    139e:	3f 93       	push	r19
    13a0:	4f 93       	push	r20
    13a2:	5f 93       	push	r21
    13a4:	6f 93       	push	r22
    13a6:	7f 93       	push	r23
    13a8:	8f 93       	push	r24
    13aa:	9f 93       	push	r25
    13ac:	af 93       	push	r26
    13ae:	bf 93       	push	r27
    13b0:	ef 93       	push	r30
    13b2:	ff 93       	push	r31
    13b4:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    13b8:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    13bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13c4:	c9 01       	movw	r24, r18
    13c6:	03 2e       	mov	r0, r19
    13c8:	00 0c       	add	r0, r0
    13ca:	aa 0b       	sbc	r26, r26
    13cc:	bb 0b       	sbc	r27, r27
    13ce:	dc 01       	movw	r26, r24
    13d0:	99 27       	eor	r25, r25
    13d2:	88 27       	eor	r24, r24
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	84 2b       	or	r24, r20
    13da:	95 2b       	or	r25, r21
    13dc:	a6 2b       	or	r26, r22
    13de:	b7 2b       	or	r27, r23
    13e0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    13e4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    13e8:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    13ec:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    13f0:	b0 9b       	sbis	0x16, 0	; 22
    13f2:	1b c0       	rjmp	.+54     	; 0x142a <__vector_13+0x98>
    13f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13fc:	c9 01       	movw	r24, r18
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	09 2e       	mov	r0, r25
    1402:	00 0c       	add	r0, r0
    1404:	aa 0b       	sbc	r26, r26
    1406:	bb 0b       	sbc	r27, r27
    1408:	dc 01       	movw	r26, r24
    140a:	99 27       	eor	r25, r25
    140c:	88 27       	eor	r24, r24
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	84 2b       	or	r24, r20
    1414:	95 2b       	or	r25, r21
    1416:	a6 2b       	or	r26, r22
    1418:	b7 2b       	or	r27, r23
    141a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    141e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1422:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1426:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    142a:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x10>
    142e:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x11>
    1432:	30 97       	sbiw	r30, 0x00	; 0
    1434:	39 f0       	breq	.+14     	; 0x1444 <__vector_13+0xb2>
    1436:	68 e0       	ldi	r22, 0x08	; 8
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x10>
    143e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x11>
    1442:	09 95       	icall
    1444:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    1448:	ff 91       	pop	r31
    144a:	ef 91       	pop	r30
    144c:	bf 91       	pop	r27
    144e:	af 91       	pop	r26
    1450:	9f 91       	pop	r25
    1452:	8f 91       	pop	r24
    1454:	7f 91       	pop	r23
    1456:	6f 91       	pop	r22
    1458:	5f 91       	pop	r21
    145a:	4f 91       	pop	r20
    145c:	3f 91       	pop	r19
    145e:	2f 91       	pop	r18
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <__vector_14>:
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	2f 93       	push	r18
    1476:	3f 93       	push	r19
    1478:	4f 93       	push	r20
    147a:	5f 93       	push	r21
    147c:	6f 93       	push	r22
    147e:	7f 93       	push	r23
    1480:	8f 93       	push	r24
    1482:	9f 93       	push	r25
    1484:	af 93       	push	r26
    1486:	bf 93       	push	r27
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31
    148c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1490:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1494:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1498:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    149c:	c9 01       	movw	r24, r18
    149e:	03 2e       	mov	r0, r19
    14a0:	00 0c       	add	r0, r0
    14a2:	aa 0b       	sbc	r26, r26
    14a4:	bb 0b       	sbc	r27, r27
    14a6:	dc 01       	movw	r26, r24
    14a8:	99 27       	eor	r25, r25
    14aa:	88 27       	eor	r24, r24
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	84 2b       	or	r24, r20
    14b2:	95 2b       	or	r25, r21
    14b4:	a6 2b       	or	r26, r22
    14b6:	b7 2b       	or	r27, r23
    14b8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    14bc:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    14c0:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    14c4:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    14c8:	b0 9b       	sbis	0x16, 0	; 22
    14ca:	1b c0       	rjmp	.+54     	; 0x1502 <__vector_14+0x98>
    14cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14d4:	c9 01       	movw	r24, r18
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	09 2e       	mov	r0, r25
    14da:	00 0c       	add	r0, r0
    14dc:	aa 0b       	sbc	r26, r26
    14de:	bb 0b       	sbc	r27, r27
    14e0:	dc 01       	movw	r26, r24
    14e2:	99 27       	eor	r25, r25
    14e4:	88 27       	eor	r24, r24
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	84 2b       	or	r24, r20
    14ec:	95 2b       	or	r25, r21
    14ee:	a6 2b       	or	r26, r22
    14f0:	b7 2b       	or	r27, r23
    14f2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    14f6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    14fa:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    14fe:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1502:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x12>
    1506:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x13>
    150a:	30 97       	sbiw	r30, 0x00	; 0
    150c:	39 f0       	breq	.+14     	; 0x151c <__vector_14+0xb2>
    150e:	69 e0       	ldi	r22, 0x09	; 9
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x12>
    1516:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x13>
    151a:	09 95       	icall
    151c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <__vector_15>:
    1542:	1f 92       	push	r1
    1544:	0f 92       	push	r0
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	4f 93       	push	r20
    1552:	5f 93       	push	r21
    1554:	6f 93       	push	r22
    1556:	7f 93       	push	r23
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	af 93       	push	r26
    155e:	bf 93       	push	r27
    1560:	ef 93       	push	r30
    1562:	ff 93       	push	r31
    1564:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1568:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    156c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1570:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1574:	c9 01       	movw	r24, r18
    1576:	03 2e       	mov	r0, r19
    1578:	00 0c       	add	r0, r0
    157a:	aa 0b       	sbc	r26, r26
    157c:	bb 0b       	sbc	r27, r27
    157e:	dc 01       	movw	r26, r24
    1580:	99 27       	eor	r25, r25
    1582:	88 27       	eor	r24, r24
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	84 2b       	or	r24, r20
    158a:	95 2b       	or	r25, r21
    158c:	a6 2b       	or	r26, r22
    158e:	b7 2b       	or	r27, r23
    1590:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1594:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1598:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    159c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    15a0:	b0 9b       	sbis	0x16, 0	; 22
    15a2:	1b c0       	rjmp	.+54     	; 0x15da <__vector_15+0x98>
    15a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15ac:	c9 01       	movw	r24, r18
    15ae:	01 96       	adiw	r24, 0x01	; 1
    15b0:	09 2e       	mov	r0, r25
    15b2:	00 0c       	add	r0, r0
    15b4:	aa 0b       	sbc	r26, r26
    15b6:	bb 0b       	sbc	r27, r27
    15b8:	dc 01       	movw	r26, r24
    15ba:	99 27       	eor	r25, r25
    15bc:	88 27       	eor	r24, r24
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	84 2b       	or	r24, r20
    15c4:	95 2b       	or	r25, r21
    15c6:	a6 2b       	or	r26, r22
    15c8:	b7 2b       	or	r27, r23
    15ca:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    15ce:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    15d2:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    15d6:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    15da:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0x14>
    15de:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x15>
    15e2:	30 97       	sbiw	r30, 0x00	; 0
    15e4:	39 f0       	breq	.+14     	; 0x15f4 <__vector_15+0xb2>
    15e6:	6a e0       	ldi	r22, 0x0A	; 10
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0x14>
    15ee:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x15>
    15f2:	09 95       	icall
    15f4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    15f8:	ff 91       	pop	r31
    15fa:	ef 91       	pop	r30
    15fc:	bf 91       	pop	r27
    15fe:	af 91       	pop	r26
    1600:	9f 91       	pop	r25
    1602:	8f 91       	pop	r24
    1604:	7f 91       	pop	r23
    1606:	6f 91       	pop	r22
    1608:	5f 91       	pop	r21
    160a:	4f 91       	pop	r20
    160c:	3f 91       	pop	r19
    160e:	2f 91       	pop	r18
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	0f 90       	pop	r0
    1616:	1f 90       	pop	r1
    1618:	18 95       	reti

0000161a <__vector_16>:
    161a:	1f 92       	push	r1
    161c:	0f 92       	push	r0
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	2f 93       	push	r18
    1626:	3f 93       	push	r19
    1628:	4f 93       	push	r20
    162a:	5f 93       	push	r21
    162c:	6f 93       	push	r22
    162e:	7f 93       	push	r23
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
    1634:	af 93       	push	r26
    1636:	bf 93       	push	r27
    1638:	ef 93       	push	r30
    163a:	ff 93       	push	r31
    163c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1640:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1644:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1648:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    164c:	c9 01       	movw	r24, r18
    164e:	03 2e       	mov	r0, r19
    1650:	00 0c       	add	r0, r0
    1652:	aa 0b       	sbc	r26, r26
    1654:	bb 0b       	sbc	r27, r27
    1656:	dc 01       	movw	r26, r24
    1658:	99 27       	eor	r25, r25
    165a:	88 27       	eor	r24, r24
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	84 2b       	or	r24, r20
    1662:	95 2b       	or	r25, r21
    1664:	a6 2b       	or	r26, r22
    1666:	b7 2b       	or	r27, r23
    1668:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    166c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1670:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1674:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1678:	b0 9b       	sbis	0x16, 0	; 22
    167a:	1b c0       	rjmp	.+54     	; 0x16b2 <__vector_16+0x98>
    167c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1680:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1684:	c9 01       	movw	r24, r18
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	09 2e       	mov	r0, r25
    168a:	00 0c       	add	r0, r0
    168c:	aa 0b       	sbc	r26, r26
    168e:	bb 0b       	sbc	r27, r27
    1690:	dc 01       	movw	r26, r24
    1692:	99 27       	eor	r25, r25
    1694:	88 27       	eor	r24, r24
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	84 2b       	or	r24, r20
    169c:	95 2b       	or	r25, r21
    169e:	a6 2b       	or	r26, r22
    16a0:	b7 2b       	or	r27, r23
    16a2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    16a6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    16aa:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    16ae:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    16b2:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x16>
    16b6:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x17>
    16ba:	30 97       	sbiw	r30, 0x00	; 0
    16bc:	39 f0       	breq	.+14     	; 0x16cc <__vector_16+0xb2>
    16be:	6b e0       	ldi	r22, 0x0B	; 11
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x16>
    16c6:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x17>
    16ca:	09 95       	icall
    16cc:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <__vector_17>:
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	2f 93       	push	r18
    16fe:	3f 93       	push	r19
    1700:	4f 93       	push	r20
    1702:	5f 93       	push	r21
    1704:	6f 93       	push	r22
    1706:	7f 93       	push	r23
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
    1714:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1718:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    171c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1720:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1724:	c9 01       	movw	r24, r18
    1726:	03 2e       	mov	r0, r19
    1728:	00 0c       	add	r0, r0
    172a:	aa 0b       	sbc	r26, r26
    172c:	bb 0b       	sbc	r27, r27
    172e:	dc 01       	movw	r26, r24
    1730:	99 27       	eor	r25, r25
    1732:	88 27       	eor	r24, r24
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	84 2b       	or	r24, r20
    173a:	95 2b       	or	r25, r21
    173c:	a6 2b       	or	r26, r22
    173e:	b7 2b       	or	r27, r23
    1740:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1744:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1748:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    174c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1750:	b0 9b       	sbis	0x16, 0	; 22
    1752:	1b c0       	rjmp	.+54     	; 0x178a <__vector_17+0x98>
    1754:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1758:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    175c:	c9 01       	movw	r24, r18
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	09 2e       	mov	r0, r25
    1762:	00 0c       	add	r0, r0
    1764:	aa 0b       	sbc	r26, r26
    1766:	bb 0b       	sbc	r27, r27
    1768:	dc 01       	movw	r26, r24
    176a:	99 27       	eor	r25, r25
    176c:	88 27       	eor	r24, r24
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	84 2b       	or	r24, r20
    1774:	95 2b       	or	r25, r21
    1776:	a6 2b       	or	r26, r22
    1778:	b7 2b       	or	r27, r23
    177a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    177e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1782:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1786:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    178a:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x18>
    178e:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x19>
    1792:	30 97       	sbiw	r30, 0x00	; 0
    1794:	39 f0       	breq	.+14     	; 0x17a4 <__vector_17+0xb2>
    1796:	6c e0       	ldi	r22, 0x0C	; 12
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x18>
    179e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x19>
    17a2:	09 95       	icall
    17a4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	0f 90       	pop	r0
    17c6:	1f 90       	pop	r1
    17c8:	18 95       	reti

000017ca <__vector_18>:
    17ca:	1f 92       	push	r1
    17cc:	0f 92       	push	r0
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	0f 92       	push	r0
    17d2:	11 24       	eor	r1, r1
    17d4:	2f 93       	push	r18
    17d6:	3f 93       	push	r19
    17d8:	4f 93       	push	r20
    17da:	5f 93       	push	r21
    17dc:	6f 93       	push	r22
    17de:	7f 93       	push	r23
    17e0:	8f 93       	push	r24
    17e2:	9f 93       	push	r25
    17e4:	af 93       	push	r26
    17e6:	bf 93       	push	r27
    17e8:	ef 93       	push	r30
    17ea:	ff 93       	push	r31
    17ec:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    17f0:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    17f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17fc:	c9 01       	movw	r24, r18
    17fe:	03 2e       	mov	r0, r19
    1800:	00 0c       	add	r0, r0
    1802:	aa 0b       	sbc	r26, r26
    1804:	bb 0b       	sbc	r27, r27
    1806:	dc 01       	movw	r26, r24
    1808:	99 27       	eor	r25, r25
    180a:	88 27       	eor	r24, r24
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	84 2b       	or	r24, r20
    1812:	95 2b       	or	r25, r21
    1814:	a6 2b       	or	r26, r22
    1816:	b7 2b       	or	r27, r23
    1818:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    181c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1820:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1824:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1828:	b0 9b       	sbis	0x16, 0	; 22
    182a:	1b c0       	rjmp	.+54     	; 0x1862 <__vector_18+0x98>
    182c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1830:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1834:	c9 01       	movw	r24, r18
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	09 2e       	mov	r0, r25
    183a:	00 0c       	add	r0, r0
    183c:	aa 0b       	sbc	r26, r26
    183e:	bb 0b       	sbc	r27, r27
    1840:	dc 01       	movw	r26, r24
    1842:	99 27       	eor	r25, r25
    1844:	88 27       	eor	r24, r24
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	84 2b       	or	r24, r20
    184c:	95 2b       	or	r25, r21
    184e:	a6 2b       	or	r26, r22
    1850:	b7 2b       	or	r27, r23
    1852:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1856:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    185a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    185e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1862:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x1a>
    1866:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x1b>
    186a:	30 97       	sbiw	r30, 0x00	; 0
    186c:	39 f0       	breq	.+14     	; 0x187c <__vector_18+0xb2>
    186e:	6d e0       	ldi	r22, 0x0D	; 13
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x1a>
    1876:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x1b>
    187a:	09 95       	icall
    187c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    1880:	ff 91       	pop	r31
    1882:	ef 91       	pop	r30
    1884:	bf 91       	pop	r27
    1886:	af 91       	pop	r26
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	7f 91       	pop	r23
    188e:	6f 91       	pop	r22
    1890:	5f 91       	pop	r21
    1892:	4f 91       	pop	r20
    1894:	3f 91       	pop	r19
    1896:	2f 91       	pop	r18
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <__vector_19>:
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	2f 93       	push	r18
    18ae:	3f 93       	push	r19
    18b0:	4f 93       	push	r20
    18b2:	5f 93       	push	r21
    18b4:	6f 93       	push	r22
    18b6:	7f 93       	push	r23
    18b8:	8f 93       	push	r24
    18ba:	9f 93       	push	r25
    18bc:	af 93       	push	r26
    18be:	bf 93       	push	r27
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
    18c4:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    18c8:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    18cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18d4:	c9 01       	movw	r24, r18
    18d6:	03 2e       	mov	r0, r19
    18d8:	00 0c       	add	r0, r0
    18da:	aa 0b       	sbc	r26, r26
    18dc:	bb 0b       	sbc	r27, r27
    18de:	dc 01       	movw	r26, r24
    18e0:	99 27       	eor	r25, r25
    18e2:	88 27       	eor	r24, r24
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	84 2b       	or	r24, r20
    18ea:	95 2b       	or	r25, r21
    18ec:	a6 2b       	or	r26, r22
    18ee:	b7 2b       	or	r27, r23
    18f0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    18f4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    18f8:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    18fc:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1900:	b0 9b       	sbis	0x16, 0	; 22
    1902:	1b c0       	rjmp	.+54     	; 0x193a <__vector_19+0x98>
    1904:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1908:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    190c:	c9 01       	movw	r24, r18
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	09 2e       	mov	r0, r25
    1912:	00 0c       	add	r0, r0
    1914:	aa 0b       	sbc	r26, r26
    1916:	bb 0b       	sbc	r27, r27
    1918:	dc 01       	movw	r26, r24
    191a:	99 27       	eor	r25, r25
    191c:	88 27       	eor	r24, r24
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	84 2b       	or	r24, r20
    1924:	95 2b       	or	r25, r21
    1926:	a6 2b       	or	r26, r22
    1928:	b7 2b       	or	r27, r23
    192a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    192e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1932:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1936:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    193a:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x1c>
    193e:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x1d>
    1942:	30 97       	sbiw	r30, 0x00	; 0
    1944:	39 f0       	breq	.+14     	; 0x1954 <__vector_19+0xb2>
    1946:	6e e0       	ldi	r22, 0x0E	; 14
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x1c>
    194e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x1d>
    1952:	09 95       	icall
    1954:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    1958:	ff 91       	pop	r31
    195a:	ef 91       	pop	r30
    195c:	bf 91       	pop	r27
    195e:	af 91       	pop	r26
    1960:	9f 91       	pop	r25
    1962:	8f 91       	pop	r24
    1964:	7f 91       	pop	r23
    1966:	6f 91       	pop	r22
    1968:	5f 91       	pop	r21
    196a:	4f 91       	pop	r20
    196c:	3f 91       	pop	r19
    196e:	2f 91       	pop	r18
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	0f 90       	pop	r0
    1976:	1f 90       	pop	r1
    1978:	18 95       	reti

0000197a <__vector_20>:
    197a:	1f 92       	push	r1
    197c:	0f 92       	push	r0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	0f 92       	push	r0
    1982:	11 24       	eor	r1, r1
    1984:	2f 93       	push	r18
    1986:	3f 93       	push	r19
    1988:	4f 93       	push	r20
    198a:	5f 93       	push	r21
    198c:	6f 93       	push	r22
    198e:	7f 93       	push	r23
    1990:	8f 93       	push	r24
    1992:	9f 93       	push	r25
    1994:	af 93       	push	r26
    1996:	bf 93       	push	r27
    1998:	ef 93       	push	r30
    199a:	ff 93       	push	r31
    199c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    19a0:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    19a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19ac:	c9 01       	movw	r24, r18
    19ae:	03 2e       	mov	r0, r19
    19b0:	00 0c       	add	r0, r0
    19b2:	aa 0b       	sbc	r26, r26
    19b4:	bb 0b       	sbc	r27, r27
    19b6:	dc 01       	movw	r26, r24
    19b8:	99 27       	eor	r25, r25
    19ba:	88 27       	eor	r24, r24
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	84 2b       	or	r24, r20
    19c2:	95 2b       	or	r25, r21
    19c4:	a6 2b       	or	r26, r22
    19c6:	b7 2b       	or	r27, r23
    19c8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    19cc:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    19d0:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    19d4:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    19d8:	b0 9b       	sbis	0x16, 0	; 22
    19da:	1b c0       	rjmp	.+54     	; 0x1a12 <__vector_20+0x98>
    19dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19e4:	c9 01       	movw	r24, r18
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	09 2e       	mov	r0, r25
    19ea:	00 0c       	add	r0, r0
    19ec:	aa 0b       	sbc	r26, r26
    19ee:	bb 0b       	sbc	r27, r27
    19f0:	dc 01       	movw	r26, r24
    19f2:	99 27       	eor	r25, r25
    19f4:	88 27       	eor	r24, r24
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	84 2b       	or	r24, r20
    19fc:	95 2b       	or	r25, r21
    19fe:	a6 2b       	or	r26, r22
    1a00:	b7 2b       	or	r27, r23
    1a02:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1a06:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1a0a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1a0e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1a12:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x1e>
    1a16:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x1f>
    1a1a:	30 97       	sbiw	r30, 0x00	; 0
    1a1c:	39 f0       	breq	.+14     	; 0x1a2c <__vector_20+0xb2>
    1a1e:	6f e0       	ldi	r22, 0x0F	; 15
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x1e>
    1a26:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x1f>
    1a2a:	09 95       	icall
    1a2c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	bf 91       	pop	r27
    1a36:	af 91       	pop	r26
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	7f 91       	pop	r23
    1a3e:	6f 91       	pop	r22
    1a40:	5f 91       	pop	r21
    1a42:	4f 91       	pop	r20
    1a44:	3f 91       	pop	r19
    1a46:	2f 91       	pop	r18
    1a48:	0f 90       	pop	r0
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	0f 90       	pop	r0
    1a4e:	1f 90       	pop	r1
    1a50:	18 95       	reti

00001a52 <__vector_21>:
    1a52:	1f 92       	push	r1
    1a54:	0f 92       	push	r0
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	0f 92       	push	r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	2f 93       	push	r18
    1a5e:	3f 93       	push	r19
    1a60:	4f 93       	push	r20
    1a62:	5f 93       	push	r21
    1a64:	6f 93       	push	r22
    1a66:	7f 93       	push	r23
    1a68:	8f 93       	push	r24
    1a6a:	9f 93       	push	r25
    1a6c:	af 93       	push	r26
    1a6e:	bf 93       	push	r27
    1a70:	ef 93       	push	r30
    1a72:	ff 93       	push	r31
    1a74:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1a78:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1a7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a84:	c9 01       	movw	r24, r18
    1a86:	03 2e       	mov	r0, r19
    1a88:	00 0c       	add	r0, r0
    1a8a:	aa 0b       	sbc	r26, r26
    1a8c:	bb 0b       	sbc	r27, r27
    1a8e:	dc 01       	movw	r26, r24
    1a90:	99 27       	eor	r25, r25
    1a92:	88 27       	eor	r24, r24
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	84 2b       	or	r24, r20
    1a9a:	95 2b       	or	r25, r21
    1a9c:	a6 2b       	or	r26, r22
    1a9e:	b7 2b       	or	r27, r23
    1aa0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1aa4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1aa8:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1aac:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1ab0:	b0 9b       	sbis	0x16, 0	; 22
    1ab2:	1b c0       	rjmp	.+54     	; 0x1aea <__vector_21+0x98>
    1ab4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ab8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1abc:	c9 01       	movw	r24, r18
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	09 2e       	mov	r0, r25
    1ac2:	00 0c       	add	r0, r0
    1ac4:	aa 0b       	sbc	r26, r26
    1ac6:	bb 0b       	sbc	r27, r27
    1ac8:	dc 01       	movw	r26, r24
    1aca:	99 27       	eor	r25, r25
    1acc:	88 27       	eor	r24, r24
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	84 2b       	or	r24, r20
    1ad4:	95 2b       	or	r25, r21
    1ad6:	a6 2b       	or	r26, r22
    1ad8:	b7 2b       	or	r27, r23
    1ada:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1ade:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1ae2:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1ae6:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1aea:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x20>
    1aee:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x21>
    1af2:	30 97       	sbiw	r30, 0x00	; 0
    1af4:	39 f0       	breq	.+14     	; 0x1b04 <__vector_21+0xb2>
    1af6:	60 e1       	ldi	r22, 0x10	; 16
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x20>
    1afe:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x21>
    1b02:	09 95       	icall
    1b04:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    1b08:	ff 91       	pop	r31
    1b0a:	ef 91       	pop	r30
    1b0c:	bf 91       	pop	r27
    1b0e:	af 91       	pop	r26
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	7f 91       	pop	r23
    1b16:	6f 91       	pop	r22
    1b18:	5f 91       	pop	r21
    1b1a:	4f 91       	pop	r20
    1b1c:	3f 91       	pop	r19
    1b1e:	2f 91       	pop	r18
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	0f 90       	pop	r0
    1b26:	1f 90       	pop	r1
    1b28:	18 95       	reti

00001b2a <__vector_22>:
    1b2a:	1f 92       	push	r1
    1b2c:	0f 92       	push	r0
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	0f 92       	push	r0
    1b32:	11 24       	eor	r1, r1
    1b34:	2f 93       	push	r18
    1b36:	3f 93       	push	r19
    1b38:	4f 93       	push	r20
    1b3a:	5f 93       	push	r21
    1b3c:	6f 93       	push	r22
    1b3e:	7f 93       	push	r23
    1b40:	8f 93       	push	r24
    1b42:	9f 93       	push	r25
    1b44:	af 93       	push	r26
    1b46:	bf 93       	push	r27
    1b48:	ef 93       	push	r30
    1b4a:	ff 93       	push	r31
    1b4c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1b50:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1b54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b5c:	c9 01       	movw	r24, r18
    1b5e:	03 2e       	mov	r0, r19
    1b60:	00 0c       	add	r0, r0
    1b62:	aa 0b       	sbc	r26, r26
    1b64:	bb 0b       	sbc	r27, r27
    1b66:	dc 01       	movw	r26, r24
    1b68:	99 27       	eor	r25, r25
    1b6a:	88 27       	eor	r24, r24
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	84 2b       	or	r24, r20
    1b72:	95 2b       	or	r25, r21
    1b74:	a6 2b       	or	r26, r22
    1b76:	b7 2b       	or	r27, r23
    1b78:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1b7c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1b80:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1b84:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1b88:	b0 9b       	sbis	0x16, 0	; 22
    1b8a:	1b c0       	rjmp	.+54     	; 0x1bc2 <__vector_22+0x98>
    1b8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b94:	c9 01       	movw	r24, r18
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	09 2e       	mov	r0, r25
    1b9a:	00 0c       	add	r0, r0
    1b9c:	aa 0b       	sbc	r26, r26
    1b9e:	bb 0b       	sbc	r27, r27
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	99 27       	eor	r25, r25
    1ba4:	88 27       	eor	r24, r24
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	84 2b       	or	r24, r20
    1bac:	95 2b       	or	r25, r21
    1bae:	a6 2b       	or	r26, r22
    1bb0:	b7 2b       	or	r27, r23
    1bb2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timestamp>
    1bb6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timestamp+0x1>
    1bba:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timestamp+0x2>
    1bbe:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timestamp+0x3>
    1bc2:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x22>
    1bc6:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x23>
    1bca:	30 97       	sbiw	r30, 0x00	; 0
    1bcc:	39 f0       	breq	.+14     	; 0x1bdc <__vector_22+0xb2>
    1bce:	61 e1       	ldi	r22, 0x11	; 17
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x22>
    1bd6:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x23>
    1bda:	09 95       	icall
    1bdc:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	bf 91       	pop	r27
    1be6:	af 91       	pop	r26
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	7f 91       	pop	r23
    1bee:	6f 91       	pop	r22
    1bf0:	5f 91       	pop	r21
    1bf2:	4f 91       	pop	r20
    1bf4:	3f 91       	pop	r19
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 90       	pop	r0
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	0f 90       	pop	r0
    1bfe:	1f 90       	pop	r1
    1c00:	18 95       	reti

00001c02 <enqueueByDeadline>:
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	7b 01       	movw	r14, r22
    1c10:	eb 01       	movw	r28, r22
    1c12:	a8 81       	ld	r26, Y
    1c14:	b9 81       	ldd	r27, Y+1	; 0x01
    1c16:	10 97       	sbiw	r26, 0x00	; 0
    1c18:	61 f1       	breq	.+88     	; 0x1c72 <enqueueByDeadline+0x70>
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	06 81       	ldd	r16, Z+6	; 0x06
    1c1e:	17 81       	ldd	r17, Z+7	; 0x07
    1c20:	20 85       	ldd	r18, Z+8	; 0x08
    1c22:	31 85       	ldd	r19, Z+9	; 0x09
    1c24:	16 96       	adiw	r26, 0x06	; 6
    1c26:	4d 91       	ld	r20, X+
    1c28:	5d 91       	ld	r21, X+
    1c2a:	6d 91       	ld	r22, X+
    1c2c:	7c 91       	ld	r23, X
    1c2e:	19 97       	sbiw	r26, 0x09	; 9
    1c30:	04 17       	cp	r16, r20
    1c32:	15 07       	cpc	r17, r21
    1c34:	26 07       	cpc	r18, r22
    1c36:	37 07       	cpc	r19, r23
    1c38:	14 f4       	brge	.+4      	; 0x1c3e <enqueueByDeadline+0x3c>
    1c3a:	1b c0       	rjmp	.+54     	; 0x1c72 <enqueueByDeadline+0x70>
    1c3c:	df 01       	movw	r26, r30
    1c3e:	ed 91       	ld	r30, X+
    1c40:	fc 91       	ld	r31, X
    1c42:	11 97       	sbiw	r26, 0x01	; 1
    1c44:	30 97       	sbiw	r30, 0x00	; 0
    1c46:	49 f0       	breq	.+18     	; 0x1c5a <enqueueByDeadline+0x58>
    1c48:	46 81       	ldd	r20, Z+6	; 0x06
    1c4a:	57 81       	ldd	r21, Z+7	; 0x07
    1c4c:	60 85       	ldd	r22, Z+8	; 0x08
    1c4e:	71 85       	ldd	r23, Z+9	; 0x09
    1c50:	04 17       	cp	r16, r20
    1c52:	15 07       	cpc	r17, r21
    1c54:	26 07       	cpc	r18, r22
    1c56:	37 07       	cpc	r19, r23
    1c58:	8c f7       	brge	.-30     	; 0x1c3c <enqueueByDeadline+0x3a>
    1c5a:	ec 01       	movw	r28, r24
    1c5c:	f9 83       	std	Y+1, r31	; 0x01
    1c5e:	e8 83       	st	Y, r30
    1c60:	10 97       	sbiw	r26, 0x00	; 0
    1c62:	21 f4       	brne	.+8      	; 0x1c6c <enqueueByDeadline+0x6a>
    1c64:	f7 01       	movw	r30, r14
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
    1c6a:	07 c0       	rjmp	.+14     	; 0x1c7a <enqueueByDeadline+0x78>
    1c6c:	8d 93       	st	X+, r24
    1c6e:	9c 93       	st	X, r25
    1c70:	04 c0       	rjmp	.+8      	; 0x1c7a <enqueueByDeadline+0x78>
    1c72:	ec 01       	movw	r28, r24
    1c74:	b9 83       	std	Y+1, r27	; 0x01
    1c76:	a8 83       	st	Y, r26
    1c78:	f5 cf       	rjmp	.-22     	; 0x1c64 <enqueueByDeadline+0x62>
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	ff 90       	pop	r15
    1c84:	ef 90       	pop	r14
    1c86:	08 95       	ret

00001c88 <enqueueByBaseline>:
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	7b 01       	movw	r14, r22
    1c96:	eb 01       	movw	r28, r22
    1c98:	a8 81       	ld	r26, Y
    1c9a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c9c:	10 97       	sbiw	r26, 0x00	; 0
    1c9e:	61 f1       	breq	.+88     	; 0x1cf8 <enqueueByBaseline+0x70>
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	02 81       	ldd	r16, Z+2	; 0x02
    1ca4:	13 81       	ldd	r17, Z+3	; 0x03
    1ca6:	24 81       	ldd	r18, Z+4	; 0x04
    1ca8:	35 81       	ldd	r19, Z+5	; 0x05
    1caa:	12 96       	adiw	r26, 0x02	; 2
    1cac:	4d 91       	ld	r20, X+
    1cae:	5d 91       	ld	r21, X+
    1cb0:	6d 91       	ld	r22, X+
    1cb2:	7c 91       	ld	r23, X
    1cb4:	15 97       	sbiw	r26, 0x05	; 5
    1cb6:	04 17       	cp	r16, r20
    1cb8:	15 07       	cpc	r17, r21
    1cba:	26 07       	cpc	r18, r22
    1cbc:	37 07       	cpc	r19, r23
    1cbe:	14 f4       	brge	.+4      	; 0x1cc4 <enqueueByBaseline+0x3c>
    1cc0:	1b c0       	rjmp	.+54     	; 0x1cf8 <enqueueByBaseline+0x70>
    1cc2:	df 01       	movw	r26, r30
    1cc4:	ed 91       	ld	r30, X+
    1cc6:	fc 91       	ld	r31, X
    1cc8:	11 97       	sbiw	r26, 0x01	; 1
    1cca:	30 97       	sbiw	r30, 0x00	; 0
    1ccc:	49 f0       	breq	.+18     	; 0x1ce0 <enqueueByBaseline+0x58>
    1cce:	42 81       	ldd	r20, Z+2	; 0x02
    1cd0:	53 81       	ldd	r21, Z+3	; 0x03
    1cd2:	64 81       	ldd	r22, Z+4	; 0x04
    1cd4:	75 81       	ldd	r23, Z+5	; 0x05
    1cd6:	04 17       	cp	r16, r20
    1cd8:	15 07       	cpc	r17, r21
    1cda:	26 07       	cpc	r18, r22
    1cdc:	37 07       	cpc	r19, r23
    1cde:	8c f7       	brge	.-30     	; 0x1cc2 <enqueueByBaseline+0x3a>
    1ce0:	ec 01       	movw	r28, r24
    1ce2:	f9 83       	std	Y+1, r31	; 0x01
    1ce4:	e8 83       	st	Y, r30
    1ce6:	10 97       	sbiw	r26, 0x00	; 0
    1ce8:	21 f4       	brne	.+8      	; 0x1cf2 <enqueueByBaseline+0x6a>
    1cea:	f7 01       	movw	r30, r14
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	80 83       	st	Z, r24
    1cf0:	07 c0       	rjmp	.+14     	; 0x1d00 <enqueueByBaseline+0x78>
    1cf2:	8d 93       	st	X+, r24
    1cf4:	9c 93       	st	X, r25
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <enqueueByBaseline+0x78>
    1cf8:	ec 01       	movw	r28, r24
    1cfa:	b9 83       	std	Y+1, r27	; 0x01
    1cfc:	a8 83       	st	Y, r26
    1cfe:	f5 cf       	rjmp	.-22     	; 0x1cea <enqueueByBaseline+0x62>
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	08 95       	ret

00001d0e <dequeue>:
    1d0e:	dc 01       	movw	r26, r24
    1d10:	ed 91       	ld	r30, X+
    1d12:	fc 91       	ld	r31, X
    1d14:	11 97       	sbiw	r26, 0x01	; 1
    1d16:	30 97       	sbiw	r30, 0x00	; 0
    1d18:	59 f4       	brne	.+22     	; 0x1d30 <dequeue+0x22>
    1d1a:	8f ef       	ldi	r24, 0xFF	; 255
    1d1c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1d20:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1d24:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	83 bf       	out	0x33, r24	; 51
    1d2c:	88 95       	sleep
    1d2e:	fd cf       	rjmp	.-6      	; 0x1d2a <dequeue+0x1c>
    1d30:	20 81       	ld	r18, Z
    1d32:	31 81       	ldd	r19, Z+1	; 0x01
    1d34:	2d 93       	st	X+, r18
    1d36:	3c 93       	st	X, r19
    1d38:	cf 01       	movw	r24, r30
    1d3a:	08 95       	ret

00001d3c <__vector_9>:
    1d3c:	1f 92       	push	r1
    1d3e:	0f 92       	push	r0
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	0f 92       	push	r0
    1d44:	11 24       	eor	r1, r1
    1d46:	2f 93       	push	r18
    1d48:	3f 93       	push	r19
    1d4a:	4f 93       	push	r20
    1d4c:	5f 93       	push	r21
    1d4e:	6f 93       	push	r22
    1d50:	7f 93       	push	r23
    1d52:	8f 93       	push	r24
    1d54:	9f 93       	push	r25
    1d56:	ef 93       	push	r30
    1d58:	ff 93       	push	r31
    1d5a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <overflows>
    1d5e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <overflows+0x1>
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <overflows+0x1>
    1d68:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <overflows>
    1d6c:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <timerQ>
    1d70:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <timerQ+0x1>
    1d74:	30 97       	sbiw	r30, 0x00	; 0
    1d76:	01 f1       	breq	.+64     	; 0x1db8 <__vector_9+0x7c>
    1d78:	42 81       	ldd	r20, Z+2	; 0x02
    1d7a:	53 81       	ldd	r21, Z+3	; 0x03
    1d7c:	64 81       	ldd	r22, Z+4	; 0x04
    1d7e:	75 81       	ldd	r23, Z+5	; 0x05
    1d80:	86 17       	cp	r24, r22
    1d82:	97 07       	cpc	r25, r23
    1d84:	c9 f4       	brne	.+50     	; 0x1db8 <__vector_9+0x7c>
    1d86:	ca 01       	movw	r24, r20
    1d88:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d8c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d90:	42 1b       	sub	r20, r18
    1d92:	53 0b       	sbc	r21, r19
    1d94:	41 30       	cpi	r20, 0x01	; 1
    1d96:	51 05       	cpc	r21, r1
    1d98:	29 f4       	brne	.+10     	; 0x1da4 <__vector_9+0x68>
    1d9a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d9e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1da8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1dac:	ef e6       	ldi	r30, 0x6F	; 111
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	82 60       	ori	r24, 0x02	; 2
    1db4:	80 83       	st	Z, r24
    1db6:	05 c0       	rjmp	.+10     	; 0x1dc2 <__vector_9+0x86>
    1db8:	ef e6       	ldi	r30, 0x6F	; 111
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8d 7f       	andi	r24, 0xFD	; 253
    1dc0:	80 83       	st	Z, r24
    1dc2:	ff 91       	pop	r31
    1dc4:	ef 91       	pop	r30
    1dc6:	9f 91       	pop	r25
    1dc8:	8f 91       	pop	r24
    1dca:	7f 91       	pop	r23
    1dcc:	6f 91       	pop	r22
    1dce:	5f 91       	pop	r21
    1dd0:	4f 91       	pop	r20
    1dd2:	3f 91       	pop	r19
    1dd4:	2f 91       	pop	r18
    1dd6:	0f 90       	pop	r0
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	0f 90       	pop	r0
    1ddc:	1f 90       	pop	r1
    1dde:	18 95       	reti

00001de0 <__vector_7>:
    1de0:	1f 92       	push	r1
    1de2:	0f 92       	push	r0
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	0f 92       	push	r0
    1de8:	11 24       	eor	r1, r1
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	2f 93       	push	r18
    1df4:	3f 93       	push	r19
    1df6:	4f 93       	push	r20
    1df8:	5f 93       	push	r21
    1dfa:	6f 93       	push	r22
    1dfc:	7f 93       	push	r23
    1dfe:	8f 93       	push	r24
    1e00:	9f 93       	push	r25
    1e02:	af 93       	push	r26
    1e04:	bf 93       	push	r27
    1e06:	ef 93       	push	r30
    1e08:	ff 93       	push	r31
    1e0a:	c0 90 2e 01 	lds	r12, 0x012E	; 0x80012e <overflows>
    1e0e:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <overflows+0x1>
    1e12:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e16:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e1a:	b0 99       	sbic	0x16, 0	; 22
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <__vector_7+0x5c>
    1e1e:	0d 2c       	mov	r0, r13
    1e20:	00 0c       	add	r0, r0
    1e22:	ee 08       	sbc	r14, r14
    1e24:	ff 08       	sbc	r15, r15
    1e26:	d6 01       	movw	r26, r12
    1e28:	99 27       	eor	r25, r25
    1e2a:	88 27       	eor	r24, r24
    1e2c:	69 01       	movw	r12, r18
    1e2e:	e1 2c       	mov	r14, r1
    1e30:	f1 2c       	mov	r15, r1
    1e32:	c8 2a       	or	r12, r24
    1e34:	d9 2a       	or	r13, r25
    1e36:	ea 2a       	or	r14, r26
    1e38:	fb 2a       	or	r15, r27
    1e3a:	15 c0       	rjmp	.+42     	; 0x1e66 <__vector_7+0x86>
    1e3c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e40:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e44:	8f ef       	ldi	r24, 0xFF	; 255
    1e46:	c8 1a       	sub	r12, r24
    1e48:	d8 0a       	sbc	r13, r24
    1e4a:	0d 2c       	mov	r0, r13
    1e4c:	00 0c       	add	r0, r0
    1e4e:	ee 08       	sbc	r14, r14
    1e50:	ff 08       	sbc	r15, r15
    1e52:	d6 01       	movw	r26, r12
    1e54:	99 27       	eor	r25, r25
    1e56:	88 27       	eor	r24, r24
    1e58:	69 01       	movw	r12, r18
    1e5a:	e1 2c       	mov	r14, r1
    1e5c:	f1 2c       	mov	r15, r1
    1e5e:	c8 2a       	or	r12, r24
    1e60:	d9 2a       	or	r13, r25
    1e62:	ea 2a       	or	r14, r26
    1e64:	fb 2a       	or	r15, r27
    1e66:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <timerQ>
    1e6a:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <timerQ+0x1>
    1e6e:	30 97       	sbiw	r30, 0x00	; 0
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <__vector_7+0x94>
    1e72:	42 c0       	rjmp	.+132    	; 0x1ef8 <__vector_7+0x118>
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	a4 81       	ldd	r26, Z+4	; 0x04
    1e7a:	b5 81       	ldd	r27, Z+5	; 0x05
    1e7c:	8c 19       	sub	r24, r12
    1e7e:	9d 09       	sbc	r25, r13
    1e80:	ae 09       	sbc	r26, r14
    1e82:	bf 09       	sbc	r27, r15
    1e84:	18 16       	cp	r1, r24
    1e86:	19 06       	cpc	r1, r25
    1e88:	1a 06       	cpc	r1, r26
    1e8a:	1b 06       	cpc	r1, r27
    1e8c:	ec f1       	brlt	.+122    	; 0x1f08 <__vector_7+0x128>
    1e8e:	84 e3       	ldi	r24, 0x34	; 52
    1e90:	91 e0       	ldi	r25, 0x01	; 1
    1e92:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <dequeue>
    1e96:	66 e3       	ldi	r22, 0x36	; 54
    1e98:	71 e0       	ldi	r23, 0x01	; 1
    1e9a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <enqueueByDeadline>
    1e9e:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <timerQ>
    1ea2:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <timerQ+0x1>
    1ea6:	30 97       	sbiw	r30, 0x00	; 0
    1ea8:	39 f1       	breq	.+78     	; 0x1ef8 <__vector_7+0x118>
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	a4 81       	ldd	r26, Z+4	; 0x04
    1eb0:	b5 81       	ldd	r27, Z+5	; 0x05
    1eb2:	8c 19       	sub	r24, r12
    1eb4:	9d 09       	sbc	r25, r13
    1eb6:	ae 09       	sbc	r26, r14
    1eb8:	bf 09       	sbc	r27, r15
    1eba:	18 16       	cp	r1, r24
    1ebc:	19 06       	cpc	r1, r25
    1ebe:	1a 06       	cpc	r1, r26
    1ec0:	1b 06       	cpc	r1, r27
    1ec2:	2c f7       	brge	.-54     	; 0x1e8e <__vector_7+0xae>
    1ec4:	21 c0       	rjmp	.+66     	; 0x1f08 <__vector_7+0x128>
    1ec6:	9c 01       	movw	r18, r24
    1ec8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ecc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ed0:	84 1b       	sub	r24, r20
    1ed2:	95 0b       	sbc	r25, r21
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	31 f4       	brne	.+12     	; 0x1ee4 <__vector_7+0x104>
    1ed8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1edc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ee0:	2f 5f       	subi	r18, 0xFF	; 255
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ee8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1eec:	ef e6       	ldi	r30, 0x6F	; 111
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	82 60       	ori	r24, 0x02	; 2
    1ef4:	80 83       	st	Z, r24
    1ef6:	05 c0       	rjmp	.+10     	; 0x1f02 <__vector_7+0x122>
    1ef8:	ef e6       	ldi	r30, 0x6F	; 111
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8d 7f       	andi	r24, 0xFD	; 253
    1f00:	80 83       	st	Z, r24
    1f02:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    1f06:	0c c0       	rjmp	.+24     	; 0x1f20 <__vector_7+0x140>
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	a4 81       	ldd	r26, Z+4	; 0x04
    1f0e:	b5 81       	ldd	r27, Z+5	; 0x05
    1f10:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    1f14:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    1f18:	2a 17       	cp	r18, r26
    1f1a:	3b 07       	cpc	r19, r27
    1f1c:	69 f7       	brne	.-38     	; 0x1ef8 <__vector_7+0x118>
    1f1e:	d3 cf       	rjmp	.-90     	; 0x1ec6 <__vector_7+0xe6>
    1f20:	ff 91       	pop	r31
    1f22:	ef 91       	pop	r30
    1f24:	bf 91       	pop	r27
    1f26:	af 91       	pop	r26
    1f28:	9f 91       	pop	r25
    1f2a:	8f 91       	pop	r24
    1f2c:	7f 91       	pop	r23
    1f2e:	6f 91       	pop	r22
    1f30:	5f 91       	pop	r21
    1f32:	4f 91       	pop	r20
    1f34:	3f 91       	pop	r19
    1f36:	2f 91       	pop	r18
    1f38:	ff 90       	pop	r15
    1f3a:	ef 90       	pop	r14
    1f3c:	df 90       	pop	r13
    1f3e:	cf 90       	pop	r12
    1f40:	0f 90       	pop	r0
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	0f 90       	pop	r0
    1f46:	1f 90       	pop	r1
    1f48:	18 95       	reti

00001f4a <async>:
    1f4a:	3f 92       	push	r3
    1f4c:	4f 92       	push	r4
    1f4e:	5f 92       	push	r5
    1f50:	6f 92       	push	r6
    1f52:	7f 92       	push	r7
    1f54:	8f 92       	push	r8
    1f56:	9f 92       	push	r9
    1f58:	af 92       	push	r10
    1f5a:	bf 92       	push	r11
    1f5c:	cf 92       	push	r12
    1f5e:	df 92       	push	r13
    1f60:	ef 92       	push	r14
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	2b 01       	movw	r4, r22
    1f6e:	3c 01       	movw	r6, r24
    1f70:	49 01       	movw	r8, r18
    1f72:	5a 01       	movw	r10, r20
    1f74:	8f b7       	in	r24, 0x3f	; 63
    1f76:	80 78       	andi	r24, 0x80	; 128
    1f78:	38 2e       	mov	r3, r24
    1f7a:	f8 94       	cli
    1f7c:	84 e2       	ldi	r24, 0x24	; 36
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <dequeue>
    1f84:	ec 01       	movw	r28, r24
    1f86:	1b 87       	std	Y+11, r17	; 0x0b
    1f88:	0a 87       	std	Y+10, r16	; 0x0a
    1f8a:	fd 86       	std	Y+13, r15	; 0x0d
    1f8c:	ec 86       	std	Y+12, r14	; 0x0c
    1f8e:	df 86       	std	Y+15, r13	; 0x0f
    1f90:	ce 86       	std	Y+14, r12	; 0x0e
    1f92:	33 20       	and	r3, r3
    1f94:	61 f0       	breq	.+24     	; 0x1fae <async+0x64>
    1f96:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <current>
    1f9a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <current+0x1>
    1f9e:	02 80       	ldd	r0, Z+2	; 0x02
    1fa0:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa2:	e0 2d       	mov	r30, r0
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	93 81       	ldd	r25, Z+3	; 0x03
    1fa8:	a4 81       	ldd	r26, Z+4	; 0x04
    1faa:	b5 81       	ldd	r27, Z+5	; 0x05
    1fac:	08 c0       	rjmp	.+16     	; 0x1fbe <async+0x74>
    1fae:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <timestamp>
    1fb2:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <timestamp+0x1>
    1fb6:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <timestamp+0x2>
    1fba:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <timestamp+0x3>
    1fbe:	48 0e       	add	r4, r24
    1fc0:	59 1e       	adc	r5, r25
    1fc2:	6a 1e       	adc	r6, r26
    1fc4:	7b 1e       	adc	r7, r27
    1fc6:	4a 82       	std	Y+2, r4	; 0x02
    1fc8:	5b 82       	std	Y+3, r5	; 0x03
    1fca:	6c 82       	std	Y+4, r6	; 0x04
    1fcc:	7d 82       	std	Y+5, r7	; 0x05
    1fce:	18 14       	cp	r1, r8
    1fd0:	19 04       	cpc	r1, r9
    1fd2:	1a 04       	cpc	r1, r10
    1fd4:	1b 04       	cpc	r1, r11
    1fd6:	44 f0       	brlt	.+16     	; 0x1fe8 <async+0x9e>
    1fd8:	0f 2e       	mov	r0, r31
    1fda:	88 24       	eor	r8, r8
    1fdc:	8a 94       	dec	r8
    1fde:	98 2c       	mov	r9, r8
    1fe0:	a8 2c       	mov	r10, r8
    1fe2:	ff e7       	ldi	r31, 0x7F	; 127
    1fe4:	bf 2e       	mov	r11, r31
    1fe6:	f0 2d       	mov	r31, r0
    1fe8:	84 0c       	add	r8, r4
    1fea:	95 1c       	adc	r9, r5
    1fec:	a6 1c       	adc	r10, r6
    1fee:	b7 1c       	adc	r11, r7
    1ff0:	8e 82       	std	Y+6, r8	; 0x06
    1ff2:	9f 82       	std	Y+7, r9	; 0x07
    1ff4:	a8 86       	std	Y+8, r10	; 0x08
    1ff6:	b9 86       	std	Y+9, r11	; 0x09
    1ff8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <overflows>
    1ffc:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <overflows+0x1>
    2000:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2004:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2008:	b0 99       	sbic	0x16, 0	; 22
    200a:	0e c0       	rjmp	.+28     	; 0x2028 <async+0xde>
    200c:	09 2e       	mov	r0, r25
    200e:	00 0c       	add	r0, r0
    2010:	aa 0b       	sbc	r26, r26
    2012:	bb 0b       	sbc	r27, r27
    2014:	dc 01       	movw	r26, r24
    2016:	99 27       	eor	r25, r25
    2018:	88 27       	eor	r24, r24
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	84 2b       	or	r24, r20
    2020:	95 2b       	or	r25, r21
    2022:	a6 2b       	or	r26, r22
    2024:	b7 2b       	or	r27, r23
    2026:	13 c0       	rjmp	.+38     	; 0x204e <async+0x104>
    2028:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    202c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	09 2e       	mov	r0, r25
    2034:	00 0c       	add	r0, r0
    2036:	aa 0b       	sbc	r26, r26
    2038:	bb 0b       	sbc	r27, r27
    203a:	dc 01       	movw	r26, r24
    203c:	99 27       	eor	r25, r25
    203e:	88 27       	eor	r24, r24
    2040:	a9 01       	movw	r20, r18
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	84 2b       	or	r24, r20
    2048:	95 2b       	or	r25, r21
    204a:	a6 2b       	or	r26, r22
    204c:	b7 2b       	or	r27, r23
    204e:	48 1a       	sub	r4, r24
    2050:	59 0a       	sbc	r5, r25
    2052:	6a 0a       	sbc	r6, r26
    2054:	7b 0a       	sbc	r7, r27
    2056:	14 14       	cp	r1, r4
    2058:	15 04       	cpc	r1, r5
    205a:	16 04       	cpc	r1, r6
    205c:	17 04       	cpc	r1, r7
    205e:	ac f5       	brge	.+106    	; 0x20ca <async+0x180>
    2060:	64 e3       	ldi	r22, 0x34	; 52
    2062:	71 e0       	ldi	r23, 0x01	; 1
    2064:	ce 01       	movw	r24, r28
    2066:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <enqueueByBaseline>
    206a:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <timerQ>
    206e:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <timerQ+0x1>
    2072:	30 97       	sbiw	r30, 0x00	; 0
    2074:	21 f1       	breq	.+72     	; 0x20be <async+0x174>
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	a4 81       	ldd	r26, Z+4	; 0x04
    207c:	b5 81       	ldd	r27, Z+5	; 0x05
    207e:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <overflows>
    2082:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <overflows+0x1>
    2086:	2a 17       	cp	r18, r26
    2088:	3b 07       	cpc	r19, r27
    208a:	c9 f4       	brne	.+50     	; 0x20be <async+0x174>
    208c:	9c 01       	movw	r18, r24
    208e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2092:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2096:	84 1b       	sub	r24, r20
    2098:	95 0b       	sbc	r25, r21
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	31 f4       	brne	.+12     	; 0x20aa <async+0x160>
    209e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    20a2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    20a6:	2f 5f       	subi	r18, 0xFF	; 255
    20a8:	3f 4f       	sbci	r19, 0xFF	; 255
    20aa:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    20ae:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    20b2:	ef e6       	ldi	r30, 0x6F	; 111
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	82 60       	ori	r24, 0x02	; 2
    20ba:	80 83       	st	Z, r24
    20bc:	41 c0       	rjmp	.+130    	; 0x2140 <async+0x1f6>
    20be:	ef e6       	ldi	r30, 0x6F	; 111
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	8d 7f       	andi	r24, 0xFD	; 253
    20c6:	80 83       	st	Z, r24
    20c8:	3b c0       	rjmp	.+118    	; 0x2140 <async+0x1f6>
    20ca:	66 e3       	ldi	r22, 0x36	; 54
    20cc:	71 e0       	ldi	r23, 0x01	; 1
    20ce:	ce 01       	movw	r24, r28
    20d0:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <enqueueByDeadline>
    20d4:	33 20       	and	r3, r3
    20d6:	b9 f1       	breq	.+110    	; 0x2146 <async+0x1fc>
    20d8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <threadPool>
    20dc:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <threadPool+0x1>
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	81 f1       	breq	.+96     	; 0x2144 <async+0x1fa>
    20e4:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <activeStack>
    20e8:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <activeStack+0x1>
    20ec:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <msgQ>
    20f0:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <msgQ+0x1>
    20f4:	02 81       	ldd	r16, Z+2	; 0x02
    20f6:	13 81       	ldd	r17, Z+3	; 0x03
    20f8:	d9 01       	movw	r26, r18
    20fa:	16 96       	adiw	r26, 0x06	; 6
    20fc:	4d 91       	ld	r20, X+
    20fe:	5d 91       	ld	r21, X+
    2100:	6d 91       	ld	r22, X+
    2102:	7c 91       	ld	r23, X
    2104:	19 97       	sbiw	r26, 0x09	; 9
    2106:	d8 01       	movw	r26, r16
    2108:	16 96       	adiw	r26, 0x06	; 6
    210a:	0d 91       	ld	r16, X+
    210c:	1d 91       	ld	r17, X+
    210e:	2d 91       	ld	r18, X+
    2110:	3c 91       	ld	r19, X
    2112:	19 97       	sbiw	r26, 0x09	; 9
    2114:	40 1b       	sub	r20, r16
    2116:	51 0b       	sbc	r21, r17
    2118:	62 0b       	sbc	r22, r18
    211a:	73 0b       	sbc	r23, r19
    211c:	9a f4       	brpl	.+38     	; 0x2144 <async+0x1fa>
    211e:	dc 01       	movw	r26, r24
    2120:	2d 91       	ld	r18, X+
    2122:	3c 91       	ld	r19, X
    2124:	11 97       	sbiw	r26, 0x01	; 1
    2126:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <threadPool+0x1>
    212a:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <threadPool>
    212e:	ed 93       	st	X+, r30
    2130:	fc 93       	st	X, r31
    2132:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <activeStack+0x1>
    2136:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <activeStack>
    213a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dispatch>
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <async+0x1fa>
    2140:	33 20       	and	r3, r3
    2142:	09 f0       	breq	.+2      	; 0x2146 <async+0x1fc>
    2144:	78 94       	sei
    2146:	ce 01       	movw	r24, r28
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	ff 90       	pop	r15
    2152:	ef 90       	pop	r14
    2154:	df 90       	pop	r13
    2156:	cf 90       	pop	r12
    2158:	bf 90       	pop	r11
    215a:	af 90       	pop	r10
    215c:	9f 90       	pop	r9
    215e:	8f 90       	pop	r8
    2160:	7f 90       	pop	r7
    2162:	6f 90       	pop	r6
    2164:	5f 90       	pop	r5
    2166:	4f 90       	pop	r4
    2168:	3f 90       	pop	r3
    216a:	08 95       	ret

0000216c <sync>:
    216c:	cf 92       	push	r12
    216e:	df 92       	push	r13
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	ec 01       	movw	r28, r24
    217e:	7b 01       	movw	r14, r22
    2180:	6a 01       	movw	r12, r20
    2182:	1f b7       	in	r17, 0x3f	; 63
    2184:	10 78       	andi	r17, 0x80	; 128
    2186:	f8 94       	cli
    2188:	a8 81       	ld	r26, Y
    218a:	b9 81       	ldd	r27, Y+1	; 0x01
    218c:	10 97       	sbiw	r26, 0x00	; 0
    218e:	61 f1       	breq	.+88     	; 0x21e8 <sync+0x7c>
    2190:	14 96       	adiw	r26, 0x04	; 4
    2192:	ed 91       	ld	r30, X+
    2194:	fc 91       	ld	r31, X
    2196:	15 97       	sbiw	r26, 0x05	; 5
    2198:	30 97       	sbiw	r30, 0x00	; 0
    219a:	41 f0       	breq	.+16     	; 0x21ac <sync+0x40>
    219c:	a0 81       	ld	r26, Z
    219e:	b1 81       	ldd	r27, Z+1	; 0x01
    21a0:	14 96       	adiw	r26, 0x04	; 4
    21a2:	ed 91       	ld	r30, X+
    21a4:	fc 91       	ld	r31, X
    21a6:	15 97       	sbiw	r26, 0x05	; 5
    21a8:	30 97       	sbiw	r30, 0x00	; 0
    21aa:	c1 f7       	brne	.-16     	; 0x219c <sync+0x30>
    21ac:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <current>
    21b0:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <current+0x1>
    21b4:	2a 17       	cp	r18, r26
    21b6:	3b 07       	cpc	r19, r27
    21b8:	21 f0       	breq	.+8      	; 0x21c2 <sync+0x56>
    21ba:	11 23       	and	r17, r17
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <sync+0x54>
    21be:	3d c0       	rjmp	.+122    	; 0x223a <sync+0xce>
    21c0:	07 c0       	rjmp	.+14     	; 0x21d0 <sync+0x64>
    21c2:	11 23       	and	r17, r17
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <sync+0x5c>
    21c6:	3c c0       	rjmp	.+120    	; 0x2240 <sync+0xd4>
    21c8:	78 94       	sei
    21ca:	8f ef       	ldi	r24, 0xFF	; 255
    21cc:	9f ef       	ldi	r25, 0xFF	; 255
    21ce:	52 c0       	rjmp	.+164    	; 0x2274 <sync+0x108>
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	9b 81       	ldd	r25, Y+3	; 0x03
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	d1 f1       	breq	.+116    	; 0x224c <sync+0xe0>
    21d8:	fc 01       	movw	r30, r24
    21da:	15 82       	std	Z+5, r1	; 0x05
    21dc:	14 82       	std	Z+4, r1	; 0x04
    21de:	36 c0       	rjmp	.+108    	; 0x224c <sync+0xe0>
    21e0:	78 94       	sei
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	46 c0       	rjmp	.+140    	; 0x2274 <sync+0x108>
    21e8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <current>
    21ec:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <current+0x1>
    21f0:	99 83       	std	Y+1, r25	; 0x01
    21f2:	88 83       	st	Y, r24
    21f4:	11 23       	and	r17, r17
    21f6:	29 f0       	breq	.+10     	; 0x2202 <sync+0x96>
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	9b 81       	ldd	r25, Y+3	; 0x03
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	09 f0       	breq	.+2      	; 0x2202 <sync+0x96>
    2200:	78 94       	sei
    2202:	b6 01       	movw	r22, r12
    2204:	ce 01       	movw	r24, r28
    2206:	f7 01       	movw	r30, r14
    2208:	09 95       	icall
    220a:	f8 2e       	mov	r15, r24
    220c:	09 2f       	mov	r16, r25
    220e:	8f b7       	in	r24, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	19 82       	std	Y+1, r1	; 0x01
    2214:	18 82       	st	Y, r1
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	9b 81       	ldd	r25, Y+3	; 0x03
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	91 05       	cpc	r25, r1
    221e:	38 f0       	brcs	.+14     	; 0x222e <sync+0xc2>
    2220:	1b 82       	std	Y+3, r1	; 0x03
    2222:	1a 82       	std	Y+2, r1	; 0x02
    2224:	fc 01       	movw	r30, r24
    2226:	15 82       	std	Z+5, r1	; 0x05
    2228:	14 82       	std	Z+4, r1	; 0x04
    222a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dispatch>
    222e:	11 23       	and	r17, r17
    2230:	51 f0       	breq	.+20     	; 0x2246 <sync+0xda>
    2232:	78 94       	sei
    2234:	8f 2d       	mov	r24, r15
    2236:	90 2f       	mov	r25, r16
    2238:	1d c0       	rjmp	.+58     	; 0x2274 <sync+0x108>
    223a:	8f ef       	ldi	r24, 0xFF	; 255
    223c:	9f ef       	ldi	r25, 0xFF	; 255
    223e:	1a c0       	rjmp	.+52     	; 0x2274 <sync+0x108>
    2240:	8f ef       	ldi	r24, 0xFF	; 255
    2242:	9f ef       	ldi	r25, 0xFF	; 255
    2244:	17 c0       	rjmp	.+46     	; 0x2274 <sync+0x108>
    2246:	8f 2d       	mov	r24, r15
    2248:	90 2f       	mov	r25, r16
    224a:	14 c0       	rjmp	.+40     	; 0x2274 <sync+0x108>
    224c:	3b 83       	std	Y+3, r19	; 0x03
    224e:	2a 83       	std	Y+2, r18	; 0x02
    2250:	f9 01       	movw	r30, r18
    2252:	d5 83       	std	Z+5, r29	; 0x05
    2254:	c4 83       	std	Z+4, r28	; 0x04
    2256:	cd 01       	movw	r24, r26
    2258:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dispatch>
    225c:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <current>
    2260:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <current+0x1>
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	89 2b       	or	r24, r25
    226a:	09 f4       	brne	.+2      	; 0x226e <sync+0x102>
    226c:	b9 cf       	rjmp	.-142    	; 0x21e0 <sync+0x74>
    226e:	f9 83       	std	Y+1, r31	; 0x01
    2270:	e8 83       	st	Y, r30
    2272:	c2 cf       	rjmp	.-124    	; 0x21f8 <sync+0x8c>
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	1f 91       	pop	r17
    227a:	0f 91       	pop	r16
    227c:	ff 90       	pop	r15
    227e:	ef 90       	pop	r14
    2280:	df 90       	pop	r13
    2282:	cf 90       	pop	r12
    2284:	08 95       	ret

00002286 <run>:
    2286:	00 91 1e 01 	lds	r16, 0x011E	; 0x80011e <current>
    228a:	10 91 1f 01 	lds	r17, 0x011F	; 0x80011f <current+0x1>
    228e:	86 e3       	ldi	r24, 0x36	; 54
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <dequeue>
    2296:	ec 01       	movw	r28, r24
    2298:	d8 01       	movw	r26, r16
    229a:	13 96       	adiw	r26, 0x03	; 3
    229c:	9c 93       	st	X, r25
    229e:	8e 93       	st	-X, r24
    22a0:	12 97       	sbiw	r26, 0x02	; 2
    22a2:	78 94       	sei
    22a4:	4e 85       	ldd	r20, Y+14	; 0x0e
    22a6:	5f 85       	ldd	r21, Y+15	; 0x0f
    22a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    22aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    22ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b0:	0e 94 b6 10 	call	0x216c	; 0x216c <sync>
    22b4:	8f b7       	in	r24, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <msgPool>
    22bc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <msgPool+0x1>
    22c0:	99 83       	std	Y+1, r25	; 0x01
    22c2:	88 83       	st	Y, r24
    22c4:	d0 93 25 01 	sts	0x0125, r29	; 0x800125 <msgPool+0x1>
    22c8:	c0 93 24 01 	sts	0x0124, r28	; 0x800124 <msgPool>
    22cc:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <activeStack>
    22d0:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <activeStack+0x1>
    22d4:	00 81       	ld	r16, Z
    22d6:	11 81       	ldd	r17, Z+1	; 0x01
    22d8:	e8 01       	movw	r28, r16
    22da:	2a 81       	ldd	r18, Y+2	; 0x02
    22dc:	3b 81       	ldd	r19, Y+3	; 0x03
    22de:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <msgQ>
    22e2:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <msgQ+0x1>
    22e6:	10 97       	sbiw	r26, 0x00	; 0
    22e8:	c1 f0       	breq	.+48     	; 0x231a <run+0x94>
    22ea:	21 15       	cp	r18, r1
    22ec:	31 05       	cpc	r19, r1
    22ee:	59 f2       	breq	.-106    	; 0x2286 <run>
    22f0:	16 96       	adiw	r26, 0x06	; 6
    22f2:	8d 91       	ld	r24, X+
    22f4:	9d 91       	ld	r25, X+
    22f6:	0d 90       	ld	r0, X+
    22f8:	bc 91       	ld	r27, X
    22fa:	a0 2d       	mov	r26, r0
    22fc:	e9 01       	movw	r28, r18
    22fe:	4e 81       	ldd	r20, Y+6	; 0x06
    2300:	5f 81       	ldd	r21, Y+7	; 0x07
    2302:	68 85       	ldd	r22, Y+8	; 0x08
    2304:	79 85       	ldd	r23, Y+9	; 0x09
    2306:	84 1b       	sub	r24, r20
    2308:	95 0b       	sbc	r25, r21
    230a:	a6 0b       	sbc	r26, r22
    230c:	b7 0b       	sbc	r27, r23
    230e:	18 16       	cp	r1, r24
    2310:	19 06       	cpc	r1, r25
    2312:	1a 06       	cpc	r1, r26
    2314:	1b 06       	cpc	r1, r27
    2316:	0c f0       	brlt	.+2      	; 0x231a <run+0x94>
    2318:	b6 cf       	rjmp	.-148    	; 0x2286 <run>
    231a:	10 93 21 01 	sts	0x0121, r17	; 0x800121 <activeStack+0x1>
    231e:	00 93 20 01 	sts	0x0120, r16	; 0x800120 <activeStack>
    2322:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <threadPool>
    2326:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <threadPool+0x1>
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	80 83       	st	Z, r24
    232e:	f0 93 23 01 	sts	0x0123, r31	; 0x800123 <threadPool+0x1>
    2332:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <threadPool>
    2336:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <activeStack>
    233a:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <activeStack+0x1>
    233e:	14 96       	adiw	r26, 0x04	; 4
    2340:	ed 91       	ld	r30, X+
    2342:	fc 91       	ld	r31, X
    2344:	15 97       	sbiw	r26, 0x05	; 5
    2346:	30 97       	sbiw	r30, 0x00	; 0
    2348:	41 f0       	breq	.+16     	; 0x235a <run+0xd4>
    234a:	a0 81       	ld	r26, Z
    234c:	b1 81       	ldd	r27, Z+1	; 0x01
    234e:	14 96       	adiw	r26, 0x04	; 4
    2350:	ed 91       	ld	r30, X+
    2352:	fc 91       	ld	r31, X
    2354:	15 97       	sbiw	r26, 0x05	; 5
    2356:	30 97       	sbiw	r30, 0x00	; 0
    2358:	c1 f7       	brne	.-16     	; 0x234a <run+0xc4>
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dispatch>
    2360:	92 cf       	rjmp	.-220    	; 0x2286 <run>

00002362 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2362:	42 31       	cpi	r20, 0x12	; 18
    2364:	b8 f4       	brcc	.+46     	; 0x2394 <install+0x32>
        char status;
        DISABLE(status);
    2366:	2f b7       	in	r18, 0x3f	; 63
    2368:	f8 94       	cli
        otable[i] = obj;
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	44 0f       	add	r20, r20
    236e:	55 1f       	adc	r21, r21
    2370:	fa 01       	movw	r30, r20
    2372:	e8 5c       	subi	r30, 0xC8	; 200
    2374:	fe 4f       	sbci	r31, 0xFE	; 254
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	80 83       	st	Z, r24
        mtable[i] = m;
    237a:	fa 01       	movw	r30, r20
    237c:	e0 53       	subi	r30, 0x30	; 48
    237e:	fe 4f       	sbci	r31, 0xFE	; 254
    2380:	71 83       	std	Z+1, r23	; 0x01
    2382:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	50 e0       	ldi	r21, 0x00	; 0
    2388:	fc 01       	movw	r30, r24
    238a:	53 83       	std	Z+3, r21	; 0x03
    238c:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    238e:	22 23       	and	r18, r18
    2390:	0c f4       	brge	.+2      	; 0x2394 <install+0x32>
    2392:	78 94       	sei
    2394:	08 95       	ret

00002396 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2396:	8c 01       	movw	r16, r24
    2398:	7b 01       	movw	r14, r22
    239a:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    239c:	8f b7       	in	r24, 0x3f	; 63
    239e:	f8 94       	cli
    initialize();
    23a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <initialize>
    ENABLE(1);
    23a4:	78 94       	sei
    if (m != NULL)
    23a6:	e1 14       	cp	r14, r1
    23a8:	f1 04       	cpc	r15, r1
    23aa:	41 f0       	breq	.+16     	; 0x23bc <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	a9 01       	movw	r20, r18
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	cb 01       	movw	r24, r22
    23b8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <async>
    DISABLE(status);
    23bc:	8f b7       	in	r24, 0x3f	; 63
    23be:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    23c0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <schedule>
    ENABLE(1);
    23c4:	78 94       	sei
    while (1) {
        SLEEP();
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	83 bf       	out	0x33, r24	; 51
    23ca:	88 95       	sleep
    23cc:	fd cf       	rjmp	.-6      	; 0x23c8 <tinytimber+0x32>

000023ce <USART_Init>:

void USART_Init(serialObj* self)
{
/* Set baud rate */
//UBRR0H = (unsigned char)(MYUBRR>>8);
UBRR0L = (unsigned char)(MYUBRR);
    23ce:	83 e3       	ldi	r24, 0x33	; 51
    23d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>



/* Enable receiver and transmitter  and enables interupts*/
UCSR0B |= (1<<RXEN0)|(1<<TXEN0);  // receiver and transmitter 
    23d4:	e1 ec       	ldi	r30, 0xC1	; 193
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	88 61       	ori	r24, 0x18	; 24
    23dc:	80 83       	st	Z, r24
UCSR0B |= (1 << RXCIE0);          //interupts
    23de:	80 81       	ld	r24, Z
    23e0:	80 68       	ori	r24, 0x80	; 128
    23e2:	80 83       	st	Z, r24
//UCSR0B |= (1 << TXCIE0);          // transmit inter



/* Set frame format:  */
UCSR0C &= ~(1<<USBS0);   //   1 stop bit 
    23e4:	e2 ec       	ldi	r30, 0xC2	; 194
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	87 7f       	andi	r24, 0xF7	; 247
    23ec:	80 83       	st	Z, r24
UCSR0C |= (1<<UCSZ00); 
    23ee:	80 81       	ld	r24, Z
    23f0:	82 60       	ori	r24, 0x02	; 2
    23f2:	80 83       	st	Z, r24
UCSR0C |= (1<<UCSZ01); // 8 data,
    23f4:	80 81       	ld	r24, Z
    23f6:	84 60       	ori	r24, 0x04	; 4
    23f8:	80 83       	st	Z, r24
    23fa:	08 95       	ret

000023fc <USART_Receive>:

}


unsigned int USART_Receive(serialObj* self)
{
    23fc:	dc 01       	movw	r26, r24
	while(!(UCSR0A & (1<<RXC0)));
    23fe:	e0 ec       	ldi	r30, 0xC0	; 192
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	90 81       	ld	r25, Z
    2404:	99 23       	and	r25, r25
    2406:	ec f7       	brge	.-6      	; 0x2402 <USART_Receive+0x6>
	self->inData = UDR0;
    2408:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	15 96       	adiw	r26, 0x05	; 5
    2410:	3c 93       	st	X, r19
    2412:	2e 93       	st	-X, r18
    2414:	14 97       	sbiw	r26, 0x04	; 4

}
    2416:	08 95       	ret

00002418 <USART_Transmit>:


void USART_Transmit(serialObj* self, unsigned int data )
{
/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0))) ;
    2418:	e0 ec       	ldi	r30, 0xC0	; 192
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	85 ff       	sbrs	r24, 5
    2420:	fd cf       	rjmp	.-6      	; 0x241c <USART_Transmit+0x4>
/* Put data into buffer, sends the data */
UDR0 = data;
    2422:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    2426:	08 95       	ret

00002428 <__divmodsi4>:
    2428:	05 2e       	mov	r0, r21
    242a:	97 fb       	bst	r25, 7
    242c:	1e f4       	brtc	.+6      	; 0x2434 <__divmodsi4+0xc>
    242e:	00 94       	com	r0
    2430:	0e 94 2b 12 	call	0x2456	; 0x2456 <__negsi2>
    2434:	57 fd       	sbrc	r21, 7
    2436:	07 d0       	rcall	.+14     	; 0x2446 <__divmodsi4_neg2>
    2438:	0e 94 39 12 	call	0x2472	; 0x2472 <__udivmodsi4>
    243c:	07 fc       	sbrc	r0, 7
    243e:	03 d0       	rcall	.+6      	; 0x2446 <__divmodsi4_neg2>
    2440:	4e f4       	brtc	.+18     	; 0x2454 <__divmodsi4_exit>
    2442:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__negsi2>

00002446 <__divmodsi4_neg2>:
    2446:	50 95       	com	r21
    2448:	40 95       	com	r20
    244a:	30 95       	com	r19
    244c:	21 95       	neg	r18
    244e:	3f 4f       	sbci	r19, 0xFF	; 255
    2450:	4f 4f       	sbci	r20, 0xFF	; 255
    2452:	5f 4f       	sbci	r21, 0xFF	; 255

00002454 <__divmodsi4_exit>:
    2454:	08 95       	ret

00002456 <__negsi2>:
    2456:	90 95       	com	r25
    2458:	80 95       	com	r24
    245a:	70 95       	com	r23
    245c:	61 95       	neg	r22
    245e:	7f 4f       	sbci	r23, 0xFF	; 255
    2460:	8f 4f       	sbci	r24, 0xFF	; 255
    2462:	9f 4f       	sbci	r25, 0xFF	; 255
    2464:	08 95       	ret

00002466 <__tablejump2__>:
    2466:	ee 0f       	add	r30, r30
    2468:	ff 1f       	adc	r31, r31
    246a:	05 90       	lpm	r0, Z+
    246c:	f4 91       	lpm	r31, Z
    246e:	e0 2d       	mov	r30, r0
    2470:	09 94       	ijmp

00002472 <__udivmodsi4>:
    2472:	a1 e2       	ldi	r26, 0x21	; 33
    2474:	1a 2e       	mov	r1, r26
    2476:	aa 1b       	sub	r26, r26
    2478:	bb 1b       	sub	r27, r27
    247a:	fd 01       	movw	r30, r26
    247c:	0d c0       	rjmp	.+26     	; 0x2498 <__udivmodsi4_ep>

0000247e <__udivmodsi4_loop>:
    247e:	aa 1f       	adc	r26, r26
    2480:	bb 1f       	adc	r27, r27
    2482:	ee 1f       	adc	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	a2 17       	cp	r26, r18
    2488:	b3 07       	cpc	r27, r19
    248a:	e4 07       	cpc	r30, r20
    248c:	f5 07       	cpc	r31, r21
    248e:	20 f0       	brcs	.+8      	; 0x2498 <__udivmodsi4_ep>
    2490:	a2 1b       	sub	r26, r18
    2492:	b3 0b       	sbc	r27, r19
    2494:	e4 0b       	sbc	r30, r20
    2496:	f5 0b       	sbc	r31, r21

00002498 <__udivmodsi4_ep>:
    2498:	66 1f       	adc	r22, r22
    249a:	77 1f       	adc	r23, r23
    249c:	88 1f       	adc	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	1a 94       	dec	r1
    24a2:	69 f7       	brne	.-38     	; 0x247e <__udivmodsi4_loop>
    24a4:	60 95       	com	r22
    24a6:	70 95       	com	r23
    24a8:	80 95       	com	r24
    24aa:	90 95       	com	r25
    24ac:	9b 01       	movw	r18, r22
    24ae:	ac 01       	movw	r20, r24
    24b0:	bd 01       	movw	r22, r26
    24b2:	cf 01       	movw	r24, r30
    24b4:	08 95       	ret

000024b6 <setjmp>:
    24b6:	dc 01       	movw	r26, r24
    24b8:	2d 92       	st	X+, r2
    24ba:	3d 92       	st	X+, r3
    24bc:	4d 92       	st	X+, r4
    24be:	5d 92       	st	X+, r5
    24c0:	6d 92       	st	X+, r6
    24c2:	7d 92       	st	X+, r7
    24c4:	8d 92       	st	X+, r8
    24c6:	9d 92       	st	X+, r9
    24c8:	ad 92       	st	X+, r10
    24ca:	bd 92       	st	X+, r11
    24cc:	cd 92       	st	X+, r12
    24ce:	dd 92       	st	X+, r13
    24d0:	ed 92       	st	X+, r14
    24d2:	fd 92       	st	X+, r15
    24d4:	0d 93       	st	X+, r16
    24d6:	1d 93       	st	X+, r17
    24d8:	cd 93       	st	X+, r28
    24da:	dd 93       	st	X+, r29
    24dc:	ff 91       	pop	r31
    24de:	ef 91       	pop	r30
    24e0:	8d b7       	in	r24, 0x3d	; 61
    24e2:	8d 93       	st	X+, r24
    24e4:	8e b7       	in	r24, 0x3e	; 62
    24e6:	8d 93       	st	X+, r24
    24e8:	8f b7       	in	r24, 0x3f	; 63
    24ea:	8d 93       	st	X+, r24
    24ec:	ed 93       	st	X+, r30
    24ee:	fd 93       	st	X+, r31
    24f0:	88 27       	eor	r24, r24
    24f2:	99 27       	eor	r25, r25
    24f4:	09 94       	ijmp

000024f6 <longjmp>:
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	91 05       	cpc	r25, r1
    24fe:	81 1d       	adc	r24, r1
    2500:	2d 90       	ld	r2, X+
    2502:	3d 90       	ld	r3, X+
    2504:	4d 90       	ld	r4, X+
    2506:	5d 90       	ld	r5, X+
    2508:	6d 90       	ld	r6, X+
    250a:	7d 90       	ld	r7, X+
    250c:	8d 90       	ld	r8, X+
    250e:	9d 90       	ld	r9, X+
    2510:	ad 90       	ld	r10, X+
    2512:	bd 90       	ld	r11, X+
    2514:	cd 90       	ld	r12, X+
    2516:	dd 90       	ld	r13, X+
    2518:	ed 90       	ld	r14, X+
    251a:	fd 90       	ld	r15, X+
    251c:	0d 91       	ld	r16, X+
    251e:	1d 91       	ld	r17, X+
    2520:	cd 91       	ld	r28, X+
    2522:	dd 91       	ld	r29, X+
    2524:	ed 91       	ld	r30, X+
    2526:	fd 91       	ld	r31, X+
    2528:	0d 90       	ld	r0, X+
    252a:	f8 94       	cli
    252c:	fe bf       	out	0x3e, r31	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	ed bf       	out	0x3d, r30	; 61
    2532:	ed 91       	ld	r30, X+
    2534:	fd 91       	ld	r31, X+
    2536:	09 94       	ijmp

00002538 <_exit>:
    2538:	f8 94       	cli

0000253a <__stop_program>:
    253a:	ff cf       	rjmp	.-2      	; 0x253a <__stop_program>
