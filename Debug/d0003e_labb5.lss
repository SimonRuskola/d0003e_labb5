
d0003e_labb5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000019de  00001a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800106  00800106  00001a78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e22  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d8d  00000000  00000000  00003aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001272  00000000  00000000  00004877  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a68  00000000  00000000  00005aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000869  00000000  00000000  00006554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023df  00000000  00000000  00006dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000919c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_1>
       8:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_2>
       c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_3>
      10:	0c 94 92 04 	jmp	0x924	; 0x924 <__vector_4>
      14:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <__vector_9>
      28:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_10>
      2c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_11>
      30:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__vector_12>
      34:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__vector_13>
      38:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_14>
      3c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__vector_15>
      40:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__vector_16>
      44:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__vector_17>
      48:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_18>
      4c:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_19>
      50:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_20>
      54:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__vector_21>
      58:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__vector_22>
      5c:	8f 00       	.word	0x008f	; ????
      5e:	71 00       	.word	0x0071	; ????
      60:	74 00       	.word	0x0074	; ????
      62:	77 00       	.word	0x0077	; ????
      64:	7a 00       	.word	0x007a	; ????
      66:	7d 00       	.word	0x007d	; ????
      68:	80 00       	.word	0x0080	; ????
      6a:	83 00       	.word	0x0083	; ????
      6c:	86 00       	.word	0x0086	; ????
      6e:	89 00       	.word	0x0089	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee ed       	ldi	r30, 0xDE	; 222
      84:	f9 e1       	ldi	r31, 0x19	; 25
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a6 30       	cpi	r26, 0x06	; 6
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a6 e0       	ldi	r26, 0x06	; 6
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a9 35       	cpi	r26, 0x59	; 89
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <main>
      a6:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:
#include "lcd.h"



void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
      b6:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      b8:	87 eb       	ldi	r24, 0xB7	; 183
      ba:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
      be:	87 e0       	ldi	r24, 0x07	; 7
      c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
      c4:	8f e0       	ldi	r24, 0x0F	; 15
      c6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
      ca:	80 ec       	ldi	r24, 0xC0	; 192
      cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
      d0:	08 95       	ret

000000d2 <getValueArray>:
}

int getValueArray(int i){

    switch (i)
      d2:	8a 30       	cpi	r24, 0x0A	; 10
      d4:	91 05       	cpc	r25, r1
      d6:	00 f5       	brcc	.+64     	; 0x118 <getValueArray+0x46>
      d8:	fc 01       	movw	r30, r24
      da:	e2 5d       	subi	r30, 0xD2	; 210
      dc:	ff 4f       	sbci	r31, 0xFF	; 255
      de:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__tablejump2__>
    {
    case 0:
        return ZeroValue;

    case 1:
        return OneValue;
      e2:	80 e8       	ldi	r24, 0x80	; 128
      e4:	90 e2       	ldi	r25, 0x20	; 32
      e6:	08 95       	ret
    
    case 2:
        return TwoValue;
      e8:	81 e1       	ldi	r24, 0x11	; 17
      ea:	9e e1       	ldi	r25, 0x1E	; 30
      ec:	08 95       	ret

    case 3:
        return ThreeValue;
      ee:	81 e1       	ldi	r24, 0x11	; 17
      f0:	9b e1       	ldi	r25, 0x1B	; 27
      f2:	08 95       	ret
    
    case 4:
        return FourValue;
      f4:	80 e5       	ldi	r24, 0x50	; 80
      f6:	9b e0       	ldi	r25, 0x0B	; 11
      f8:	08 95       	ret

    case 5:
        return FiveValue;
      fa:	81 e4       	ldi	r24, 0x41	; 65
      fc:	9b e1       	ldi	r25, 0x1B	; 27
      fe:	08 95       	ret
    
    case 6:
        return SixValue;
     100:	81 e4       	ldi	r24, 0x41	; 65
     102:	9f e1       	ldi	r25, 0x1F	; 31
     104:	08 95       	ret
    
    case 7:
        return SevenValue;
     106:	81 e1       	ldi	r24, 0x11	; 17
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
        
    case 8:
        return EightValue;
     10c:	81 e5       	ldi	r24, 0x51	; 81
     10e:	9f e1       	ldi	r25, 0x1F	; 31
     110:	08 95       	ret
    
    case 9:
        return NineValue;
     112:	81 e5       	ldi	r24, 0x51	; 81
     114:	9b e0       	ldi	r25, 0x0B	; 11
     116:	08 95       	ret
    
    default: // 10
        return BlankValue;
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
int getValueArray(int i){

    switch (i)
    {
    case 0:
        return ZeroValue;
     11e:	81 e5       	ldi	r24, 0x51	; 81
     120:	95 e1       	ldi	r25, 0x15	; 21
        return NineValue;
    
    default: // 10
        return BlankValue;
    }
}
     122:	08 95       	ret

00000124 <writeChar>:


void writeChar(char ch, int pos) {
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <writeChar+0xc>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62

	volatile int i = 0;
     134:	1a 82       	std	Y+2, r1	; 0x02
     136:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
     138:	66 30       	cpi	r22, 0x06	; 6
     13a:	71 05       	cpc	r23, r1
     13c:	08 f0       	brcs	.+2      	; 0x140 <writeChar+0x1c>
     13e:	fe c1       	rjmp	.+1020   	; 0x53c <__stack+0x3d>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
     140:	90 ed       	ldi	r25, 0xD0	; 208
     142:	98 0f       	add	r25, r24
     144:	9a 30       	cpi	r25, 0x0A	; 10
     146:	28 f0       	brcs	.+10     	; 0x152 <writeChar+0x2e>
		i=10;
     148:	8a e0       	ldi	r24, 0x0A	; 10
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	9a 83       	std	Y+2, r25	; 0x02
     14e:	89 83       	std	Y+1, r24	; 0x01
     150:	04 c0       	rjmp	.+8      	; 0x15a <writeChar+0x36>
	}else{
        i = ch - 48;
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	c0 97       	sbiw	r24, 0x30	; 48
     156:	9a 83       	std	Y+2, r25	; 0x02
     158:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
     15a:	61 15       	cp	r22, r1
     15c:	71 05       	cpc	r23, r1
     15e:	09 f0       	breq	.+2      	; 0x162 <writeChar+0x3e>
     160:	4e c0       	rjmp	.+156    	; 0x1fe <writeChar+0xda>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&getValueArray(i))<<0;
     162:	0f 2e       	mov	r0, r31
     164:	fc ee       	ldi	r31, 0xEC	; 236
     166:	ef 2e       	mov	r14, r31
     168:	f1 2c       	mov	r15, r1
     16a:	f0 2d       	mov	r31, r0
     16c:	f7 01       	movw	r30, r14
     16e:	10 81       	ld	r17, Z
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	9a 81       	ldd	r25, Y+2	; 0x02
     174:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     178:	10 7f       	andi	r17, 0xF0	; 240
     17a:	8f 70       	andi	r24, 0x0F	; 15
     17c:	81 2b       	or	r24, r17
     17e:	f7 01       	movw	r30, r14
     180:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     182:	0f 2e       	mov	r0, r31
     184:	f1 ef       	ldi	r31, 0xF1	; 241
     186:	ef 2e       	mov	r14, r31
     188:	f1 2c       	mov	r15, r1
     18a:	f0 2d       	mov	r31, r0
     18c:	f7 01       	movw	r30, r14
     18e:	10 81       	ld	r17, Z
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     198:	80 7f       	andi	r24, 0xF0	; 240
     19a:	99 27       	eor	r25, r25
     19c:	95 95       	asr	r25
     19e:	87 95       	ror	r24
     1a0:	95 95       	asr	r25
     1a2:	87 95       	ror	r24
     1a4:	95 95       	asr	r25
     1a6:	87 95       	ror	r24
     1a8:	95 95       	asr	r25
     1aa:	87 95       	ror	r24
     1ac:	10 7f       	andi	r17, 0xF0	; 240
     1ae:	81 2b       	or	r24, r17
     1b0:	f7 01       	movw	r30, r14
     1b2:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     1b4:	0f 2e       	mov	r0, r31
     1b6:	f6 ef       	ldi	r31, 0xF6	; 246
     1b8:	ef 2e       	mov	r14, r31
     1ba:	f1 2c       	mov	r15, r1
     1bc:	f0 2d       	mov	r31, r0
     1be:	f7 01       	movw	r30, r14
     1c0:	10 81       	ld	r17, Z
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     1ca:	88 27       	eor	r24, r24
     1cc:	9f 70       	andi	r25, 0x0F	; 15
     1ce:	10 7f       	andi	r17, 0xF0	; 240
     1d0:	19 2b       	or	r17, r25
     1d2:	f7 01       	movw	r30, r14
     1d4:	10 83       	st	Z, r17
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     1d6:	0f 2e       	mov	r0, r31
     1d8:	fb ef       	ldi	r31, 0xFB	; 251
     1da:	ef 2e       	mov	r14, r31
     1dc:	f1 2c       	mov	r15, r1
     1de:	f0 2d       	mov	r31, r0
     1e0:	f7 01       	movw	r30, r14
     1e2:	10 81       	ld	r17, Z
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     1ec:	10 7f       	andi	r17, 0xF0	; 240
     1ee:	95 95       	asr	r25
     1f0:	95 95       	asr	r25
     1f2:	95 95       	asr	r25
     1f4:	95 95       	asr	r25
     1f6:	91 2b       	or	r25, r17
     1f8:	f7 01       	movw	r30, r14
     1fa:	90 83       	st	Z, r25
     1fc:	9f c1       	rjmp	.+830    	; 0x53c <__stack+0x3d>
		
	} else if(pos==1){
     1fe:	61 30       	cpi	r22, 0x01	; 1
     200:	71 05       	cpc	r23, r1
     202:	09 f0       	breq	.+2      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
     204:	50 c0       	rjmp	.+160    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&getValueArray(i))<<4);
     206:	0f 2e       	mov	r0, r31
     208:	fc ee       	ldi	r31, 0xEC	; 236
     20a:	ef 2e       	mov	r14, r31
     20c:	f1 2c       	mov	r15, r1
     20e:	f0 2d       	mov	r31, r0
     210:	f7 01       	movw	r30, r14
     212:	10 81       	ld	r17, Z
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	9a 81       	ldd	r25, Y+2	; 0x02
     218:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     21c:	1f 70       	andi	r17, 0x0F	; 15
     21e:	82 95       	swap	r24
     220:	92 95       	swap	r25
     222:	90 7f       	andi	r25, 0xF0	; 240
     224:	98 27       	eor	r25, r24
     226:	80 7f       	andi	r24, 0xF0	; 240
     228:	98 27       	eor	r25, r24
     22a:	81 2b       	or	r24, r17
     22c:	f7 01       	movw	r30, r14
     22e:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     230:	0f 2e       	mov	r0, r31
     232:	f1 ef       	ldi	r31, 0xF1	; 241
     234:	ef 2e       	mov	r14, r31
     236:	f1 2c       	mov	r15, r1
     238:	f0 2d       	mov	r31, r0
     23a:	f7 01       	movw	r30, r14
     23c:	10 81       	ld	r17, Z
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     246:	1f 70       	andi	r17, 0x0F	; 15
     248:	80 7f       	andi	r24, 0xF0	; 240
     24a:	81 2b       	or	r24, r17
     24c:	f7 01       	movw	r30, r14
     24e:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     250:	0f 2e       	mov	r0, r31
     252:	f6 ef       	ldi	r31, 0xF6	; 246
     254:	ef 2e       	mov	r14, r31
     256:	f1 2c       	mov	r15, r1
     258:	f0 2d       	mov	r31, r0
     25a:	f7 01       	movw	r30, r14
     25c:	10 81       	ld	r17, Z
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     266:	88 27       	eor	r24, r24
     268:	9f 70       	andi	r25, 0x0F	; 15
     26a:	95 95       	asr	r25
     26c:	87 95       	ror	r24
     26e:	95 95       	asr	r25
     270:	87 95       	ror	r24
     272:	95 95       	asr	r25
     274:	87 95       	ror	r24
     276:	95 95       	asr	r25
     278:	87 95       	ror	r24
     27a:	1f 70       	andi	r17, 0x0F	; 15
     27c:	81 2b       	or	r24, r17
     27e:	f7 01       	movw	r30, r14
     280:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     282:	0f 2e       	mov	r0, r31
     284:	fb ef       	ldi	r31, 0xFB	; 251
     286:	ef 2e       	mov	r14, r31
     288:	f1 2c       	mov	r15, r1
     28a:	f0 2d       	mov	r31, r0
     28c:	f7 01       	movw	r30, r14
     28e:	10 81       	ld	r17, Z
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     298:	88 27       	eor	r24, r24
     29a:	90 7f       	andi	r25, 0xF0	; 240
     29c:	1f 70       	andi	r17, 0x0F	; 15
     29e:	19 2b       	or	r17, r25
     2a0:	f7 01       	movw	r30, r14
     2a2:	10 83       	st	Z, r17
     2a4:	4b c1       	rjmp	.+662    	; 0x53c <__stack+0x3d>
	} else if(pos==2){
     2a6:	62 30       	cpi	r22, 0x02	; 2
     2a8:	71 05       	cpc	r23, r1
     2aa:	09 f0       	breq	.+2      	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
     2ac:	4e c0       	rjmp	.+156    	; 0x34a <__EEPROM_REGION_LENGTH__+0x14a>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&getValueArray(i))<<0;
     2ae:	0f 2e       	mov	r0, r31
     2b0:	fd ee       	ldi	r31, 0xED	; 237
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f1 2c       	mov	r15, r1
     2b6:	f0 2d       	mov	r31, r0
     2b8:	f7 01       	movw	r30, r14
     2ba:	10 81       	ld	r17, Z
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
     2c0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     2c4:	10 7f       	andi	r17, 0xF0	; 240
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	81 2b       	or	r24, r17
     2ca:	f7 01       	movw	r30, r14
     2cc:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     2ce:	0f 2e       	mov	r0, r31
     2d0:	f2 ef       	ldi	r31, 0xF2	; 242
     2d2:	ef 2e       	mov	r14, r31
     2d4:	f1 2c       	mov	r15, r1
     2d6:	f0 2d       	mov	r31, r0
     2d8:	f7 01       	movw	r30, r14
     2da:	10 81       	ld	r17, Z
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     2e4:	80 7f       	andi	r24, 0xF0	; 240
     2e6:	99 27       	eor	r25, r25
     2e8:	95 95       	asr	r25
     2ea:	87 95       	ror	r24
     2ec:	95 95       	asr	r25
     2ee:	87 95       	ror	r24
     2f0:	95 95       	asr	r25
     2f2:	87 95       	ror	r24
     2f4:	95 95       	asr	r25
     2f6:	87 95       	ror	r24
     2f8:	10 7f       	andi	r17, 0xF0	; 240
     2fa:	81 2b       	or	r24, r17
     2fc:	f7 01       	movw	r30, r14
     2fe:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     300:	0f 2e       	mov	r0, r31
     302:	f7 ef       	ldi	r31, 0xF7	; 247
     304:	ef 2e       	mov	r14, r31
     306:	f1 2c       	mov	r15, r1
     308:	f0 2d       	mov	r31, r0
     30a:	f7 01       	movw	r30, r14
     30c:	10 81       	ld	r17, Z
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     316:	88 27       	eor	r24, r24
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	10 7f       	andi	r17, 0xF0	; 240
     31c:	19 2b       	or	r17, r25
     31e:	f7 01       	movw	r30, r14
     320:	10 83       	st	Z, r17
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     322:	0f 2e       	mov	r0, r31
     324:	fc ef       	ldi	r31, 0xFC	; 252
     326:	ef 2e       	mov	r14, r31
     328:	f1 2c       	mov	r15, r1
     32a:	f0 2d       	mov	r31, r0
     32c:	f7 01       	movw	r30, r14
     32e:	10 81       	ld	r17, Z
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	9a 81       	ldd	r25, Y+2	; 0x02
     334:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     338:	10 7f       	andi	r17, 0xF0	; 240
     33a:	95 95       	asr	r25
     33c:	95 95       	asr	r25
     33e:	95 95       	asr	r25
     340:	95 95       	asr	r25
     342:	91 2b       	or	r25, r17
     344:	f7 01       	movw	r30, r14
     346:	90 83       	st	Z, r25
     348:	f9 c0       	rjmp	.+498    	; 0x53c <__stack+0x3d>
		
	} else if(pos==3){
     34a:	63 30       	cpi	r22, 0x03	; 3
     34c:	71 05       	cpc	r23, r1
     34e:	09 f0       	breq	.+2      	; 0x352 <__EEPROM_REGION_LENGTH__+0x152>
     350:	50 c0       	rjmp	.+160    	; 0x3f2 <__EEPROM_REGION_LENGTH__+0x1f2>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&getValueArray(i))<<4);
     352:	0f 2e       	mov	r0, r31
     354:	fd ee       	ldi	r31, 0xED	; 237
     356:	ef 2e       	mov	r14, r31
     358:	f1 2c       	mov	r15, r1
     35a:	f0 2d       	mov	r31, r0
     35c:	f7 01       	movw	r30, r14
     35e:	10 81       	ld	r17, Z
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	9a 81       	ldd	r25, Y+2	; 0x02
     364:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     368:	1f 70       	andi	r17, 0x0F	; 15
     36a:	82 95       	swap	r24
     36c:	92 95       	swap	r25
     36e:	90 7f       	andi	r25, 0xF0	; 240
     370:	98 27       	eor	r25, r24
     372:	80 7f       	andi	r24, 0xF0	; 240
     374:	98 27       	eor	r25, r24
     376:	81 2b       	or	r24, r17
     378:	f7 01       	movw	r30, r14
     37a:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     37c:	0f 2e       	mov	r0, r31
     37e:	f2 ef       	ldi	r31, 0xF2	; 242
     380:	ef 2e       	mov	r14, r31
     382:	f1 2c       	mov	r15, r1
     384:	f0 2d       	mov	r31, r0
     386:	f7 01       	movw	r30, r14
     388:	10 81       	ld	r17, Z
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     392:	1f 70       	andi	r17, 0x0F	; 15
     394:	80 7f       	andi	r24, 0xF0	; 240
     396:	81 2b       	or	r24, r17
     398:	f7 01       	movw	r30, r14
     39a:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     39c:	0f 2e       	mov	r0, r31
     39e:	f7 ef       	ldi	r31, 0xF7	; 247
     3a0:	ef 2e       	mov	r14, r31
     3a2:	f1 2c       	mov	r15, r1
     3a4:	f0 2d       	mov	r31, r0
     3a6:	f7 01       	movw	r30, r14
     3a8:	10 81       	ld	r17, Z
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     3b2:	88 27       	eor	r24, r24
     3b4:	9f 70       	andi	r25, 0x0F	; 15
     3b6:	95 95       	asr	r25
     3b8:	87 95       	ror	r24
     3ba:	95 95       	asr	r25
     3bc:	87 95       	ror	r24
     3be:	95 95       	asr	r25
     3c0:	87 95       	ror	r24
     3c2:	95 95       	asr	r25
     3c4:	87 95       	ror	r24
     3c6:	1f 70       	andi	r17, 0x0F	; 15
     3c8:	81 2b       	or	r24, r17
     3ca:	f7 01       	movw	r30, r14
     3cc:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     3ce:	0f 2e       	mov	r0, r31
     3d0:	fc ef       	ldi	r31, 0xFC	; 252
     3d2:	ef 2e       	mov	r14, r31
     3d4:	f1 2c       	mov	r15, r1
     3d6:	f0 2d       	mov	r31, r0
     3d8:	f7 01       	movw	r30, r14
     3da:	10 81       	ld	r17, Z
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     3e4:	88 27       	eor	r24, r24
     3e6:	90 7f       	andi	r25, 0xF0	; 240
     3e8:	1f 70       	andi	r17, 0x0F	; 15
     3ea:	19 2b       	or	r17, r25
     3ec:	f7 01       	movw	r30, r14
     3ee:	10 83       	st	Z, r17
     3f0:	a5 c0       	rjmp	.+330    	; 0x53c <__stack+0x3d>
		
	} else if(pos==4){
     3f2:	64 30       	cpi	r22, 0x04	; 4
     3f4:	71 05       	cpc	r23, r1
     3f6:	09 f0       	breq	.+2      	; 0x3fa <__EEPROM_REGION_LENGTH__+0x1fa>
     3f8:	4e c0       	rjmp	.+156    	; 0x496 <__DATA_REGION_LENGTH__+0x96>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&getValueArray(i))<<0;
     3fa:	0f 2e       	mov	r0, r31
     3fc:	fe ee       	ldi	r31, 0xEE	; 238
     3fe:	ef 2e       	mov	r14, r31
     400:	f1 2c       	mov	r15, r1
     402:	f0 2d       	mov	r31, r0
     404:	f7 01       	movw	r30, r14
     406:	10 81       	ld	r17, Z
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	9a 81       	ldd	r25, Y+2	; 0x02
     40c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     410:	10 7f       	andi	r17, 0xF0	; 240
     412:	8f 70       	andi	r24, 0x0F	; 15
     414:	81 2b       	or	r24, r17
     416:	f7 01       	movw	r30, r14
     418:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     41a:	0f 2e       	mov	r0, r31
     41c:	f3 ef       	ldi	r31, 0xF3	; 243
     41e:	ef 2e       	mov	r14, r31
     420:	f1 2c       	mov	r15, r1
     422:	f0 2d       	mov	r31, r0
     424:	f7 01       	movw	r30, r14
     426:	10 81       	ld	r17, Z
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     430:	80 7f       	andi	r24, 0xF0	; 240
     432:	99 27       	eor	r25, r25
     434:	95 95       	asr	r25
     436:	87 95       	ror	r24
     438:	95 95       	asr	r25
     43a:	87 95       	ror	r24
     43c:	95 95       	asr	r25
     43e:	87 95       	ror	r24
     440:	95 95       	asr	r25
     442:	87 95       	ror	r24
     444:	10 7f       	andi	r17, 0xF0	; 240
     446:	81 2b       	or	r24, r17
     448:	f7 01       	movw	r30, r14
     44a:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     44c:	0f 2e       	mov	r0, r31
     44e:	f8 ef       	ldi	r31, 0xF8	; 248
     450:	ef 2e       	mov	r14, r31
     452:	f1 2c       	mov	r15, r1
     454:	f0 2d       	mov	r31, r0
     456:	f7 01       	movw	r30, r14
     458:	10 81       	ld	r17, Z
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     462:	88 27       	eor	r24, r24
     464:	9f 70       	andi	r25, 0x0F	; 15
     466:	10 7f       	andi	r17, 0xF0	; 240
     468:	19 2b       	or	r17, r25
     46a:	f7 01       	movw	r30, r14
     46c:	10 83       	st	Z, r17
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     46e:	0f 2e       	mov	r0, r31
     470:	fd ef       	ldi	r31, 0xFD	; 253
     472:	ef 2e       	mov	r14, r31
     474:	f1 2c       	mov	r15, r1
     476:	f0 2d       	mov	r31, r0
     478:	f7 01       	movw	r30, r14
     47a:	10 81       	ld	r17, Z
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	9a 81       	ldd	r25, Y+2	; 0x02
     480:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     484:	10 7f       	andi	r17, 0xF0	; 240
     486:	95 95       	asr	r25
     488:	95 95       	asr	r25
     48a:	95 95       	asr	r25
     48c:	95 95       	asr	r25
     48e:	91 2b       	or	r25, r17
     490:	f7 01       	movw	r30, r14
     492:	90 83       	st	Z, r25
     494:	53 c0       	rjmp	.+166    	; 0x53c <__stack+0x3d>
		
	} else if(pos==5){
     496:	65 30       	cpi	r22, 0x05	; 5
     498:	71 05       	cpc	r23, r1
     49a:	09 f0       	breq	.+2      	; 0x49e <__DATA_REGION_LENGTH__+0x9e>
     49c:	4f c0       	rjmp	.+158    	; 0x53c <__stack+0x3d>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&getValueArray(i))<<4);
     49e:	0f 2e       	mov	r0, r31
     4a0:	fe ee       	ldi	r31, 0xEE	; 238
     4a2:	ef 2e       	mov	r14, r31
     4a4:	f1 2c       	mov	r15, r1
     4a6:	f0 2d       	mov	r31, r0
     4a8:	f7 01       	movw	r30, r14
     4aa:	10 81       	ld	r17, Z
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4b4:	1f 70       	andi	r17, 0x0F	; 15
     4b6:	82 95       	swap	r24
     4b8:	92 95       	swap	r25
     4ba:	90 7f       	andi	r25, 0xF0	; 240
     4bc:	98 27       	eor	r25, r24
     4be:	80 7f       	andi	r24, 0xF0	; 240
     4c0:	98 27       	eor	r25, r24
     4c2:	81 2b       	or	r24, r17
     4c4:	f7 01       	movw	r30, r14
     4c6:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     4c8:	0f 2e       	mov	r0, r31
     4ca:	f3 ef       	ldi	r31, 0xF3	; 243
     4cc:	ef 2e       	mov	r14, r31
     4ce:	f1 2c       	mov	r15, r1
     4d0:	f0 2d       	mov	r31, r0
     4d2:	f7 01       	movw	r30, r14
     4d4:	10 81       	ld	r17, Z
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4de:	1f 70       	andi	r17, 0x0F	; 15
     4e0:	80 7f       	andi	r24, 0xF0	; 240
     4e2:	81 2b       	or	r24, r17
     4e4:	f7 01       	movw	r30, r14
     4e6:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     4e8:	0f 2e       	mov	r0, r31
     4ea:	f8 ef       	ldi	r31, 0xF8	; 248
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f1 2c       	mov	r15, r1
     4f0:	f0 2d       	mov	r31, r0
     4f2:	f7 01       	movw	r30, r14
     4f4:	10 81       	ld	r17, Z
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4fe:	88 27       	eor	r24, r24
     500:	9f 70       	andi	r25, 0x0F	; 15
     502:	95 95       	asr	r25
     504:	87 95       	ror	r24
     506:	95 95       	asr	r25
     508:	87 95       	ror	r24
     50a:	95 95       	asr	r25
     50c:	87 95       	ror	r24
     50e:	95 95       	asr	r25
     510:	87 95       	ror	r24
     512:	1f 70       	andi	r17, 0x0F	; 15
     514:	81 2b       	or	r24, r17
     516:	f7 01       	movw	r30, r14
     518:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     51a:	0f 2e       	mov	r0, r31
     51c:	fd ef       	ldi	r31, 0xFD	; 253
     51e:	ef 2e       	mov	r14, r31
     520:	f1 2c       	mov	r15, r1
     522:	f0 2d       	mov	r31, r0
     524:	f7 01       	movw	r30, r14
     526:	10 81       	ld	r17, Z
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     530:	88 27       	eor	r24, r24
     532:	90 7f       	andi	r25, 0xF0	; 240
     534:	1f 70       	andi	r17, 0x0F	; 15
     536:	19 2b       	or	r17, r25
     538:	f7 01       	movw	r30, r14
     53a:	10 83       	st	Z, r17
		
	}
	

}
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	08 95       	ret

0000054c <printAt>:

void printAt(long num, int pos) {
     54c:	8f 92       	push	r8
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	4b 01       	movw	r8, r22
     562:	5c 01       	movw	r10, r24
     564:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     566:	24 e6       	ldi	r18, 0x64	; 100
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__divmodsi4>
     572:	0f 2e       	mov	r0, r31
     574:	fa e0       	ldi	r31, 0x0A	; 10
     576:	cf 2e       	mov	r12, r31
     578:	d1 2c       	mov	r13, r1
     57a:	e1 2c       	mov	r14, r1
     57c:	f1 2c       	mov	r15, r1
     57e:	f0 2d       	mov	r31, r0
     580:	a7 01       	movw	r20, r14
     582:	96 01       	movw	r18, r12
     584:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__divmodsi4>
     588:	be 01       	movw	r22, r28
     58a:	80 e3       	ldi	r24, 0x30	; 48
     58c:	82 0f       	add	r24, r18
     58e:	0e 94 92 00 	call	0x124	; 0x124 <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     592:	21 96       	adiw	r28, 0x01	; 1
     594:	c5 01       	movw	r24, r10
     596:	b4 01       	movw	r22, r8
     598:	a7 01       	movw	r20, r14
     59a:	96 01       	movw	r18, r12
     59c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__divmodsi4>
     5a0:	86 2f       	mov	r24, r22
     5a2:	be 01       	movw	r22, r28
     5a4:	80 5d       	subi	r24, 0xD0	; 208
     5a6:	0e 94 92 00 	call	0x124	; 0x124 <writeChar>
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	08 95       	ret

000005c0 <main>:


void main( void )
{

LCD_Init();
     5c0:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
USART_Init ( MYUBRR );
     5c4:	8b e0       	ldi	r24, 0x0B	; 11
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 47 0c 	call	0x188e	; 0x188e <USART_Init>
int temp;
//for(int i = 65;i<100; i++)
//{
    USART_Transmit('B');
     5cc:	82 e4       	ldi	r24, 0x42	; 66
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <USART_Transmit>
    //temp = USART_Receive();
    printAt(65,0);
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	61 e4       	ldi	r22, 0x41	; 65
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 a6 02 	call	0x54c	; 0x54c <printAt>
     5e4:	08 95       	ret

000005e6 <dispatch>:

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    return t;
}
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <dispatch+0x6>
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	9a 83       	std	Y+2, r25	; 0x02
     5f2:	89 83       	std	Y+1, r24	; 0x01
     5f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5fc:	06 96       	adiw	r24, 0x06	; 6
     5fe:	0e 94 ac 0c 	call	0x1958	; 0x1958 <setjmp>
     602:	89 2b       	or	r24, r25
     604:	59 f4       	brne	.+22     	; 0x61c <dispatch+0x36>
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	9a 81       	ldd	r25, Y+2	; 0x02
     60a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     60e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	06 96       	adiw	r24, 0x06	; 6
     618:	0e 94 cc 0c 	call	0x1998	; 0x1998 <longjmp>
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <schedule>:
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <msgQ>
     632:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <msgQ+0x1>
     636:	30 97       	sbiw	r30, 0x00	; 0
     638:	61 f1       	breq	.+88     	; 0x692 <schedule+0x6c>
     63a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     63e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     642:	00 97       	sbiw	r24, 0x00	; 0
     644:	31 f1       	breq	.+76     	; 0x692 <schedule+0x6c>
     646:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     64a:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     64e:	aa 81       	ldd	r26, Y+2	; 0x02
     650:	bb 81       	ldd	r27, Y+3	; 0x03
     652:	10 97       	sbiw	r26, 0x00	; 0
     654:	79 f0       	breq	.+30     	; 0x674 <schedule+0x4e>
     656:	46 81       	ldd	r20, Z+6	; 0x06
     658:	57 81       	ldd	r21, Z+7	; 0x07
     65a:	60 85       	ldd	r22, Z+8	; 0x08
     65c:	71 85       	ldd	r23, Z+9	; 0x09
     65e:	16 96       	adiw	r26, 0x06	; 6
     660:	0d 91       	ld	r16, X+
     662:	1d 91       	ld	r17, X+
     664:	2d 91       	ld	r18, X+
     666:	3c 91       	ld	r19, X
     668:	19 97       	sbiw	r26, 0x09	; 9
     66a:	40 1b       	sub	r20, r16
     66c:	51 0b       	sbc	r21, r17
     66e:	62 0b       	sbc	r22, r18
     670:	73 0b       	sbc	r23, r19
     672:	7a f4       	brpl	.+30     	; 0x692 <schedule+0x6c>
     674:	fc 01       	movw	r30, r24
     676:	20 81       	ld	r18, Z
     678:	31 81       	ldd	r19, Z+1	; 0x01
     67a:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     67e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     682:	d1 83       	std	Z+1, r29	; 0x01
     684:	c0 83       	st	Z, r28
     686:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     68a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     68e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <dispatch>
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <__vector_1>:
     69c:	1f 92       	push	r1
     69e:	0f 92       	push	r0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	0f 92       	push	r0
     6a4:	11 24       	eor	r1, r1
     6a6:	2f 93       	push	r18
     6a8:	3f 93       	push	r19
     6aa:	4f 93       	push	r20
     6ac:	5f 93       	push	r21
     6ae:	6f 93       	push	r22
     6b0:	7f 93       	push	r23
     6b2:	8f 93       	push	r24
     6b4:	9f 93       	push	r25
     6b6:	af 93       	push	r26
     6b8:	bf 93       	push	r27
     6ba:	ef 93       	push	r30
     6bc:	ff 93       	push	r31
     6be:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     6c2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     6c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     6ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     6ce:	c9 01       	movw	r24, r18
     6d0:	03 2e       	mov	r0, r19
     6d2:	00 0c       	add	r0, r0
     6d4:	aa 0b       	sbc	r26, r26
     6d6:	bb 0b       	sbc	r27, r27
     6d8:	dc 01       	movw	r26, r24
     6da:	99 27       	eor	r25, r25
     6dc:	88 27       	eor	r24, r24
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	84 2b       	or	r24, r20
     6e4:	95 2b       	or	r25, r21
     6e6:	a6 2b       	or	r26, r22
     6e8:	b7 2b       	or	r27, r23
     6ea:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     6ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     6f2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     6f6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     6fa:	b0 9b       	sbis	0x16, 0	; 22
     6fc:	1b c0       	rjmp	.+54     	; 0x734 <__vector_1+0x98>
     6fe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     702:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     706:	c9 01       	movw	r24, r18
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	09 2e       	mov	r0, r25
     70c:	00 0c       	add	r0, r0
     70e:	aa 0b       	sbc	r26, r26
     710:	bb 0b       	sbc	r27, r27
     712:	dc 01       	movw	r26, r24
     714:	99 27       	eor	r25, r25
     716:	88 27       	eor	r24, r24
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	84 2b       	or	r24, r20
     71e:	95 2b       	or	r25, r21
     720:	a6 2b       	or	r26, r22
     722:	b7 2b       	or	r27, r23
     724:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     728:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     72c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     730:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     734:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <mtable>
     738:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <mtable+0x1>
     73c:	30 97       	sbiw	r30, 0x00	; 0
     73e:	39 f0       	breq	.+14     	; 0x74e <__vector_1+0xb2>
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <otable>
     748:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <otable+0x1>
     74c:	09 95       	icall
     74e:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
     752:	ff 91       	pop	r31
     754:	ef 91       	pop	r30
     756:	bf 91       	pop	r27
     758:	af 91       	pop	r26
     75a:	9f 91       	pop	r25
     75c:	8f 91       	pop	r24
     75e:	7f 91       	pop	r23
     760:	6f 91       	pop	r22
     762:	5f 91       	pop	r21
     764:	4f 91       	pop	r20
     766:	3f 91       	pop	r19
     768:	2f 91       	pop	r18
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <__vector_2>:
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	3f 93       	push	r19
     782:	4f 93       	push	r20
     784:	5f 93       	push	r21
     786:	6f 93       	push	r22
     788:	7f 93       	push	r23
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25
     78e:	af 93       	push	r26
     790:	bf 93       	push	r27
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
     796:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     79a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     79e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     7a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     7a6:	c9 01       	movw	r24, r18
     7a8:	03 2e       	mov	r0, r19
     7aa:	00 0c       	add	r0, r0
     7ac:	aa 0b       	sbc	r26, r26
     7ae:	bb 0b       	sbc	r27, r27
     7b0:	dc 01       	movw	r26, r24
     7b2:	99 27       	eor	r25, r25
     7b4:	88 27       	eor	r24, r24
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	84 2b       	or	r24, r20
     7bc:	95 2b       	or	r25, r21
     7be:	a6 2b       	or	r26, r22
     7c0:	b7 2b       	or	r27, r23
     7c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     7c6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     7ca:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     7ce:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     7d2:	b0 9b       	sbis	0x16, 0	; 22
     7d4:	1b c0       	rjmp	.+54     	; 0x80c <__vector_2+0x98>
     7d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     7da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     7de:	c9 01       	movw	r24, r18
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	09 2e       	mov	r0, r25
     7e4:	00 0c       	add	r0, r0
     7e6:	aa 0b       	sbc	r26, r26
     7e8:	bb 0b       	sbc	r27, r27
     7ea:	dc 01       	movw	r26, r24
     7ec:	99 27       	eor	r25, r25
     7ee:	88 27       	eor	r24, r24
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	84 2b       	or	r24, r20
     7f6:	95 2b       	or	r25, r21
     7f8:	a6 2b       	or	r26, r22
     7fa:	b7 2b       	or	r27, r23
     7fc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     800:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     804:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     808:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     80c:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <mtable+0x2>
     810:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <mtable+0x3>
     814:	30 97       	sbiw	r30, 0x00	; 0
     816:	39 f0       	breq	.+14     	; 0x826 <__vector_2+0xb2>
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <otable+0x2>
     820:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <otable+0x3>
     824:	09 95       	icall
     826:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
     82a:	ff 91       	pop	r31
     82c:	ef 91       	pop	r30
     82e:	bf 91       	pop	r27
     830:	af 91       	pop	r26
     832:	9f 91       	pop	r25
     834:	8f 91       	pop	r24
     836:	7f 91       	pop	r23
     838:	6f 91       	pop	r22
     83a:	5f 91       	pop	r21
     83c:	4f 91       	pop	r20
     83e:	3f 91       	pop	r19
     840:	2f 91       	pop	r18
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0
     848:	1f 90       	pop	r1
     84a:	18 95       	reti

0000084c <__vector_3>:
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
     86e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     872:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     876:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     87a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     87e:	c9 01       	movw	r24, r18
     880:	03 2e       	mov	r0, r19
     882:	00 0c       	add	r0, r0
     884:	aa 0b       	sbc	r26, r26
     886:	bb 0b       	sbc	r27, r27
     888:	dc 01       	movw	r26, r24
     88a:	99 27       	eor	r25, r25
     88c:	88 27       	eor	r24, r24
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	84 2b       	or	r24, r20
     894:	95 2b       	or	r25, r21
     896:	a6 2b       	or	r26, r22
     898:	b7 2b       	or	r27, r23
     89a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     89e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     8a2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     8a6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     8aa:	b0 9b       	sbis	0x16, 0	; 22
     8ac:	1b c0       	rjmp	.+54     	; 0x8e4 <__vector_3+0x98>
     8ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     8b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     8b6:	c9 01       	movw	r24, r18
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	09 2e       	mov	r0, r25
     8bc:	00 0c       	add	r0, r0
     8be:	aa 0b       	sbc	r26, r26
     8c0:	bb 0b       	sbc	r27, r27
     8c2:	dc 01       	movw	r26, r24
     8c4:	99 27       	eor	r25, r25
     8c6:	88 27       	eor	r24, r24
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	84 2b       	or	r24, r20
     8ce:	95 2b       	or	r25, r21
     8d0:	a6 2b       	or	r26, r22
     8d2:	b7 2b       	or	r27, r23
     8d4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     8d8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     8dc:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     8e0:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     8e4:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <mtable+0x4>
     8e8:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <mtable+0x5>
     8ec:	30 97       	sbiw	r30, 0x00	; 0
     8ee:	39 f0       	breq	.+14     	; 0x8fe <__vector_3+0xb2>
     8f0:	62 e0       	ldi	r22, 0x02	; 2
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <otable+0x4>
     8f8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <otable+0x5>
     8fc:	09 95       	icall
     8fe:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
     902:	ff 91       	pop	r31
     904:	ef 91       	pop	r30
     906:	bf 91       	pop	r27
     908:	af 91       	pop	r26
     90a:	9f 91       	pop	r25
     90c:	8f 91       	pop	r24
     90e:	7f 91       	pop	r23
     910:	6f 91       	pop	r22
     912:	5f 91       	pop	r21
     914:	4f 91       	pop	r20
     916:	3f 91       	pop	r19
     918:	2f 91       	pop	r18
     91a:	0f 90       	pop	r0
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	0f 90       	pop	r0
     920:	1f 90       	pop	r1
     922:	18 95       	reti

00000924 <__vector_4>:
     924:	1f 92       	push	r1
     926:	0f 92       	push	r0
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	0f 92       	push	r0
     92c:	11 24       	eor	r1, r1
     92e:	2f 93       	push	r18
     930:	3f 93       	push	r19
     932:	4f 93       	push	r20
     934:	5f 93       	push	r21
     936:	6f 93       	push	r22
     938:	7f 93       	push	r23
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	af 93       	push	r26
     940:	bf 93       	push	r27
     942:	ef 93       	push	r30
     944:	ff 93       	push	r31
     946:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     94a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     94e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     952:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     956:	c9 01       	movw	r24, r18
     958:	03 2e       	mov	r0, r19
     95a:	00 0c       	add	r0, r0
     95c:	aa 0b       	sbc	r26, r26
     95e:	bb 0b       	sbc	r27, r27
     960:	dc 01       	movw	r26, r24
     962:	99 27       	eor	r25, r25
     964:	88 27       	eor	r24, r24
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	84 2b       	or	r24, r20
     96c:	95 2b       	or	r25, r21
     96e:	a6 2b       	or	r26, r22
     970:	b7 2b       	or	r27, r23
     972:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     976:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     97a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     97e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     982:	b0 9b       	sbis	0x16, 0	; 22
     984:	1b c0       	rjmp	.+54     	; 0x9bc <__vector_4+0x98>
     986:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     98a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     98e:	c9 01       	movw	r24, r18
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	09 2e       	mov	r0, r25
     994:	00 0c       	add	r0, r0
     996:	aa 0b       	sbc	r26, r26
     998:	bb 0b       	sbc	r27, r27
     99a:	dc 01       	movw	r26, r24
     99c:	99 27       	eor	r25, r25
     99e:	88 27       	eor	r24, r24
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	84 2b       	or	r24, r20
     9a6:	95 2b       	or	r25, r21
     9a8:	a6 2b       	or	r26, r22
     9aa:	b7 2b       	or	r27, r23
     9ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     9b0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     9b4:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     9b8:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     9bc:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <mtable+0x6>
     9c0:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <mtable+0x7>
     9c4:	30 97       	sbiw	r30, 0x00	; 0
     9c6:	39 f0       	breq	.+14     	; 0x9d6 <__vector_4+0xb2>
     9c8:	63 e0       	ldi	r22, 0x03	; 3
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <otable+0x6>
     9d0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <otable+0x7>
     9d4:	09 95       	icall
     9d6:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
     9da:	ff 91       	pop	r31
     9dc:	ef 91       	pop	r30
     9de:	bf 91       	pop	r27
     9e0:	af 91       	pop	r26
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	7f 91       	pop	r23
     9e8:	6f 91       	pop	r22
     9ea:	5f 91       	pop	r21
     9ec:	4f 91       	pop	r20
     9ee:	3f 91       	pop	r19
     9f0:	2f 91       	pop	r18
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <__vector_5>:
     9fc:	1f 92       	push	r1
     9fe:	0f 92       	push	r0
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	0f 92       	push	r0
     a04:	11 24       	eor	r1, r1
     a06:	2f 93       	push	r18
     a08:	3f 93       	push	r19
     a0a:	4f 93       	push	r20
     a0c:	5f 93       	push	r21
     a0e:	6f 93       	push	r22
     a10:	7f 93       	push	r23
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
     a1e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     a22:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     a26:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a2a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a2e:	c9 01       	movw	r24, r18
     a30:	03 2e       	mov	r0, r19
     a32:	00 0c       	add	r0, r0
     a34:	aa 0b       	sbc	r26, r26
     a36:	bb 0b       	sbc	r27, r27
     a38:	dc 01       	movw	r26, r24
     a3a:	99 27       	eor	r25, r25
     a3c:	88 27       	eor	r24, r24
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	84 2b       	or	r24, r20
     a44:	95 2b       	or	r25, r21
     a46:	a6 2b       	or	r26, r22
     a48:	b7 2b       	or	r27, r23
     a4a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     a4e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     a52:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     a56:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     a5a:	b0 9b       	sbis	0x16, 0	; 22
     a5c:	1b c0       	rjmp	.+54     	; 0xa94 <__vector_5+0x98>
     a5e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a62:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a66:	c9 01       	movw	r24, r18
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	09 2e       	mov	r0, r25
     a6c:	00 0c       	add	r0, r0
     a6e:	aa 0b       	sbc	r26, r26
     a70:	bb 0b       	sbc	r27, r27
     a72:	dc 01       	movw	r26, r24
     a74:	99 27       	eor	r25, r25
     a76:	88 27       	eor	r24, r24
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	84 2b       	or	r24, r20
     a7e:	95 2b       	or	r25, r21
     a80:	a6 2b       	or	r26, r22
     a82:	b7 2b       	or	r27, r23
     a84:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     a88:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     a8c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     a90:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     a94:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <mtable+0x8>
     a98:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <mtable+0x9>
     a9c:	30 97       	sbiw	r30, 0x00	; 0
     a9e:	39 f0       	breq	.+14     	; 0xaae <__vector_5+0xb2>
     aa0:	64 e0       	ldi	r22, 0x04	; 4
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <otable+0x8>
     aa8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <otable+0x9>
     aac:	09 95       	icall
     aae:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
     ab2:	ff 91       	pop	r31
     ab4:	ef 91       	pop	r30
     ab6:	bf 91       	pop	r27
     ab8:	af 91       	pop	r26
     aba:	9f 91       	pop	r25
     abc:	8f 91       	pop	r24
     abe:	7f 91       	pop	r23
     ac0:	6f 91       	pop	r22
     ac2:	5f 91       	pop	r21
     ac4:	4f 91       	pop	r20
     ac6:	3f 91       	pop	r19
     ac8:	2f 91       	pop	r18
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_10>:
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	2f 93       	push	r18
     ae0:	3f 93       	push	r19
     ae2:	4f 93       	push	r20
     ae4:	5f 93       	push	r21
     ae6:	6f 93       	push	r22
     ae8:	7f 93       	push	r23
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
     aee:	af 93       	push	r26
     af0:	bf 93       	push	r27
     af2:	ef 93       	push	r30
     af4:	ff 93       	push	r31
     af6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     afa:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     afe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b02:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b06:	c9 01       	movw	r24, r18
     b08:	03 2e       	mov	r0, r19
     b0a:	00 0c       	add	r0, r0
     b0c:	aa 0b       	sbc	r26, r26
     b0e:	bb 0b       	sbc	r27, r27
     b10:	dc 01       	movw	r26, r24
     b12:	99 27       	eor	r25, r25
     b14:	88 27       	eor	r24, r24
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	84 2b       	or	r24, r20
     b1c:	95 2b       	or	r25, r21
     b1e:	a6 2b       	or	r26, r22
     b20:	b7 2b       	or	r27, r23
     b22:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     b26:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     b2a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     b2e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     b32:	b0 9b       	sbis	0x16, 0	; 22
     b34:	1b c0       	rjmp	.+54     	; 0xb6c <__vector_10+0x98>
     b36:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b3a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b3e:	c9 01       	movw	r24, r18
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	09 2e       	mov	r0, r25
     b44:	00 0c       	add	r0, r0
     b46:	aa 0b       	sbc	r26, r26
     b48:	bb 0b       	sbc	r27, r27
     b4a:	dc 01       	movw	r26, r24
     b4c:	99 27       	eor	r25, r25
     b4e:	88 27       	eor	r24, r24
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	84 2b       	or	r24, r20
     b56:	95 2b       	or	r25, r21
     b58:	a6 2b       	or	r26, r22
     b5a:	b7 2b       	or	r27, r23
     b5c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     b60:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     b64:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     b68:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     b6c:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <mtable+0xa>
     b70:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <mtable+0xb>
     b74:	30 97       	sbiw	r30, 0x00	; 0
     b76:	39 f0       	breq	.+14     	; 0xb86 <__vector_10+0xb2>
     b78:	65 e0       	ldi	r22, 0x05	; 5
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <otable+0xa>
     b80:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <otable+0xb>
     b84:	09 95       	icall
     b86:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_11>:
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     bd2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     bd6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bda:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bde:	c9 01       	movw	r24, r18
     be0:	03 2e       	mov	r0, r19
     be2:	00 0c       	add	r0, r0
     be4:	aa 0b       	sbc	r26, r26
     be6:	bb 0b       	sbc	r27, r27
     be8:	dc 01       	movw	r26, r24
     bea:	99 27       	eor	r25, r25
     bec:	88 27       	eor	r24, r24
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	84 2b       	or	r24, r20
     bf4:	95 2b       	or	r25, r21
     bf6:	a6 2b       	or	r26, r22
     bf8:	b7 2b       	or	r27, r23
     bfa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     bfe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     c02:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     c06:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     c0a:	b0 9b       	sbis	0x16, 0	; 22
     c0c:	1b c0       	rjmp	.+54     	; 0xc44 <__vector_11+0x98>
     c0e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c12:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c16:	c9 01       	movw	r24, r18
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	09 2e       	mov	r0, r25
     c1c:	00 0c       	add	r0, r0
     c1e:	aa 0b       	sbc	r26, r26
     c20:	bb 0b       	sbc	r27, r27
     c22:	dc 01       	movw	r26, r24
     c24:	99 27       	eor	r25, r25
     c26:	88 27       	eor	r24, r24
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	84 2b       	or	r24, r20
     c2e:	95 2b       	or	r25, r21
     c30:	a6 2b       	or	r26, r22
     c32:	b7 2b       	or	r27, r23
     c34:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     c38:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     c3c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     c40:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     c44:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <mtable+0xc>
     c48:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <mtable+0xd>
     c4c:	30 97       	sbiw	r30, 0x00	; 0
     c4e:	39 f0       	breq	.+14     	; 0xc5e <__vector_11+0xb2>
     c50:	66 e0       	ldi	r22, 0x06	; 6
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <otable+0xc>
     c58:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <otable+0xd>
     c5c:	09 95       	icall
     c5e:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	bf 91       	pop	r27
     c68:	af 91       	pop	r26
     c6a:	9f 91       	pop	r25
     c6c:	8f 91       	pop	r24
     c6e:	7f 91       	pop	r23
     c70:	6f 91       	pop	r22
     c72:	5f 91       	pop	r21
     c74:	4f 91       	pop	r20
     c76:	3f 91       	pop	r19
     c78:	2f 91       	pop	r18
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <__vector_12>:
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1
     c8e:	2f 93       	push	r18
     c90:	3f 93       	push	r19
     c92:	4f 93       	push	r20
     c94:	5f 93       	push	r21
     c96:	6f 93       	push	r22
     c98:	7f 93       	push	r23
     c9a:	8f 93       	push	r24
     c9c:	9f 93       	push	r25
     c9e:	af 93       	push	r26
     ca0:	bf 93       	push	r27
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
     ca6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     caa:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     cae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cb2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cb6:	c9 01       	movw	r24, r18
     cb8:	03 2e       	mov	r0, r19
     cba:	00 0c       	add	r0, r0
     cbc:	aa 0b       	sbc	r26, r26
     cbe:	bb 0b       	sbc	r27, r27
     cc0:	dc 01       	movw	r26, r24
     cc2:	99 27       	eor	r25, r25
     cc4:	88 27       	eor	r24, r24
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	84 2b       	or	r24, r20
     ccc:	95 2b       	or	r25, r21
     cce:	a6 2b       	or	r26, r22
     cd0:	b7 2b       	or	r27, r23
     cd2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     cd6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     cda:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     cde:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     ce2:	b0 9b       	sbis	0x16, 0	; 22
     ce4:	1b c0       	rjmp	.+54     	; 0xd1c <__vector_12+0x98>
     ce6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cee:	c9 01       	movw	r24, r18
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	09 2e       	mov	r0, r25
     cf4:	00 0c       	add	r0, r0
     cf6:	aa 0b       	sbc	r26, r26
     cf8:	bb 0b       	sbc	r27, r27
     cfa:	dc 01       	movw	r26, r24
     cfc:	99 27       	eor	r25, r25
     cfe:	88 27       	eor	r24, r24
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	84 2b       	or	r24, r20
     d06:	95 2b       	or	r25, r21
     d08:	a6 2b       	or	r26, r22
     d0a:	b7 2b       	or	r27, r23
     d0c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     d10:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     d14:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     d18:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     d1c:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable+0xe>
     d20:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0xf>
     d24:	30 97       	sbiw	r30, 0x00	; 0
     d26:	39 f0       	breq	.+14     	; 0xd36 <__vector_12+0xb2>
     d28:	67 e0       	ldi	r22, 0x07	; 7
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable+0xe>
     d30:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0xf>
     d34:	09 95       	icall
     d36:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
     d3a:	ff 91       	pop	r31
     d3c:	ef 91       	pop	r30
     d3e:	bf 91       	pop	r27
     d40:	af 91       	pop	r26
     d42:	9f 91       	pop	r25
     d44:	8f 91       	pop	r24
     d46:	7f 91       	pop	r23
     d48:	6f 91       	pop	r22
     d4a:	5f 91       	pop	r21
     d4c:	4f 91       	pop	r20
     d4e:	3f 91       	pop	r19
     d50:	2f 91       	pop	r18
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	0f 90       	pop	r0
     d58:	1f 90       	pop	r1
     d5a:	18 95       	reti

00000d5c <__vector_13>:
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	5f 93       	push	r21
     d6e:	6f 93       	push	r22
     d70:	7f 93       	push	r23
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	af 93       	push	r26
     d78:	bf 93       	push	r27
     d7a:	ef 93       	push	r30
     d7c:	ff 93       	push	r31
     d7e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     d82:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     d86:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d8a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d8e:	c9 01       	movw	r24, r18
     d90:	03 2e       	mov	r0, r19
     d92:	00 0c       	add	r0, r0
     d94:	aa 0b       	sbc	r26, r26
     d96:	bb 0b       	sbc	r27, r27
     d98:	dc 01       	movw	r26, r24
     d9a:	99 27       	eor	r25, r25
     d9c:	88 27       	eor	r24, r24
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	84 2b       	or	r24, r20
     da4:	95 2b       	or	r25, r21
     da6:	a6 2b       	or	r26, r22
     da8:	b7 2b       	or	r27, r23
     daa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     dae:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     db2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     db6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     dba:	b0 9b       	sbis	0x16, 0	; 22
     dbc:	1b c0       	rjmp	.+54     	; 0xdf4 <__vector_13+0x98>
     dbe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dc2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dc6:	c9 01       	movw	r24, r18
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	09 2e       	mov	r0, r25
     dcc:	00 0c       	add	r0, r0
     dce:	aa 0b       	sbc	r26, r26
     dd0:	bb 0b       	sbc	r27, r27
     dd2:	dc 01       	movw	r26, r24
     dd4:	99 27       	eor	r25, r25
     dd6:	88 27       	eor	r24, r24
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	84 2b       	or	r24, r20
     dde:	95 2b       	or	r25, r21
     de0:	a6 2b       	or	r26, r22
     de2:	b7 2b       	or	r27, r23
     de4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     de8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     dec:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     df0:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     df4:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0x10>
     df8:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0x11>
     dfc:	30 97       	sbiw	r30, 0x00	; 0
     dfe:	39 f0       	breq	.+14     	; 0xe0e <__vector_13+0xb2>
     e00:	68 e0       	ldi	r22, 0x08	; 8
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0x10>
     e08:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0x11>
     e0c:	09 95       	icall
     e0e:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
     e12:	ff 91       	pop	r31
     e14:	ef 91       	pop	r30
     e16:	bf 91       	pop	r27
     e18:	af 91       	pop	r26
     e1a:	9f 91       	pop	r25
     e1c:	8f 91       	pop	r24
     e1e:	7f 91       	pop	r23
     e20:	6f 91       	pop	r22
     e22:	5f 91       	pop	r21
     e24:	4f 91       	pop	r20
     e26:	3f 91       	pop	r19
     e28:	2f 91       	pop	r18
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <__vector_14>:
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
     e56:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     e5a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     e5e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e62:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e66:	c9 01       	movw	r24, r18
     e68:	03 2e       	mov	r0, r19
     e6a:	00 0c       	add	r0, r0
     e6c:	aa 0b       	sbc	r26, r26
     e6e:	bb 0b       	sbc	r27, r27
     e70:	dc 01       	movw	r26, r24
     e72:	99 27       	eor	r25, r25
     e74:	88 27       	eor	r24, r24
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	84 2b       	or	r24, r20
     e7c:	95 2b       	or	r25, r21
     e7e:	a6 2b       	or	r26, r22
     e80:	b7 2b       	or	r27, r23
     e82:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     e86:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     e8a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     e8e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     e92:	b0 9b       	sbis	0x16, 0	; 22
     e94:	1b c0       	rjmp	.+54     	; 0xecc <__vector_14+0x98>
     e96:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e9a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e9e:	c9 01       	movw	r24, r18
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	09 2e       	mov	r0, r25
     ea4:	00 0c       	add	r0, r0
     ea6:	aa 0b       	sbc	r26, r26
     ea8:	bb 0b       	sbc	r27, r27
     eaa:	dc 01       	movw	r26, r24
     eac:	99 27       	eor	r25, r25
     eae:	88 27       	eor	r24, r24
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	84 2b       	or	r24, r20
     eb6:	95 2b       	or	r25, r21
     eb8:	a6 2b       	or	r26, r22
     eba:	b7 2b       	or	r27, r23
     ebc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     ec0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     ec4:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     ec8:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     ecc:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0x12>
     ed0:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0x13>
     ed4:	30 97       	sbiw	r30, 0x00	; 0
     ed6:	39 f0       	breq	.+14     	; 0xee6 <__vector_14+0xb2>
     ed8:	69 e0       	ldi	r22, 0x09	; 9
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0x12>
     ee0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0x13>
     ee4:	09 95       	icall
     ee6:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
     eea:	ff 91       	pop	r31
     eec:	ef 91       	pop	r30
     eee:	bf 91       	pop	r27
     ef0:	af 91       	pop	r26
     ef2:	9f 91       	pop	r25
     ef4:	8f 91       	pop	r24
     ef6:	7f 91       	pop	r23
     ef8:	6f 91       	pop	r22
     efa:	5f 91       	pop	r21
     efc:	4f 91       	pop	r20
     efe:	3f 91       	pop	r19
     f00:	2f 91       	pop	r18
     f02:	0f 90       	pop	r0
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	0f 90       	pop	r0
     f08:	1f 90       	pop	r1
     f0a:	18 95       	reti

00000f0c <__vector_15>:
     f0c:	1f 92       	push	r1
     f0e:	0f 92       	push	r0
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	0f 92       	push	r0
     f14:	11 24       	eor	r1, r1
     f16:	2f 93       	push	r18
     f18:	3f 93       	push	r19
     f1a:	4f 93       	push	r20
     f1c:	5f 93       	push	r21
     f1e:	6f 93       	push	r22
     f20:	7f 93       	push	r23
     f22:	8f 93       	push	r24
     f24:	9f 93       	push	r25
     f26:	af 93       	push	r26
     f28:	bf 93       	push	r27
     f2a:	ef 93       	push	r30
     f2c:	ff 93       	push	r31
     f2e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     f32:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     f36:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f3a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f3e:	c9 01       	movw	r24, r18
     f40:	03 2e       	mov	r0, r19
     f42:	00 0c       	add	r0, r0
     f44:	aa 0b       	sbc	r26, r26
     f46:	bb 0b       	sbc	r27, r27
     f48:	dc 01       	movw	r26, r24
     f4a:	99 27       	eor	r25, r25
     f4c:	88 27       	eor	r24, r24
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	84 2b       	or	r24, r20
     f54:	95 2b       	or	r25, r21
     f56:	a6 2b       	or	r26, r22
     f58:	b7 2b       	or	r27, r23
     f5a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     f5e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     f62:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     f66:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     f6a:	b0 9b       	sbis	0x16, 0	; 22
     f6c:	1b c0       	rjmp	.+54     	; 0xfa4 <__vector_15+0x98>
     f6e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f72:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f76:	c9 01       	movw	r24, r18
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	09 2e       	mov	r0, r25
     f7c:	00 0c       	add	r0, r0
     f7e:	aa 0b       	sbc	r26, r26
     f80:	bb 0b       	sbc	r27, r27
     f82:	dc 01       	movw	r26, r24
     f84:	99 27       	eor	r25, r25
     f86:	88 27       	eor	r24, r24
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	84 2b       	or	r24, r20
     f8e:	95 2b       	or	r25, r21
     f90:	a6 2b       	or	r26, r22
     f92:	b7 2b       	or	r27, r23
     f94:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     f98:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     f9c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     fa0:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     fa4:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0x14>
     fa8:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0x15>
     fac:	30 97       	sbiw	r30, 0x00	; 0
     fae:	39 f0       	breq	.+14     	; 0xfbe <__vector_15+0xb2>
     fb0:	6a e0       	ldi	r22, 0x0A	; 10
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0x14>
     fb8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0x15>
     fbc:	09 95       	icall
     fbe:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
     fc2:	ff 91       	pop	r31
     fc4:	ef 91       	pop	r30
     fc6:	bf 91       	pop	r27
     fc8:	af 91       	pop	r26
     fca:	9f 91       	pop	r25
     fcc:	8f 91       	pop	r24
     fce:	7f 91       	pop	r23
     fd0:	6f 91       	pop	r22
     fd2:	5f 91       	pop	r21
     fd4:	4f 91       	pop	r20
     fd6:	3f 91       	pop	r19
     fd8:	2f 91       	pop	r18
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	0f 90       	pop	r0
     fe0:	1f 90       	pop	r1
     fe2:	18 95       	reti

00000fe4 <__vector_16>:
     fe4:	1f 92       	push	r1
     fe6:	0f 92       	push	r0
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	0f 92       	push	r0
     fec:	11 24       	eor	r1, r1
     fee:	2f 93       	push	r18
     ff0:	3f 93       	push	r19
     ff2:	4f 93       	push	r20
     ff4:	5f 93       	push	r21
     ff6:	6f 93       	push	r22
     ff8:	7f 93       	push	r23
     ffa:	8f 93       	push	r24
     ffc:	9f 93       	push	r25
     ffe:	af 93       	push	r26
    1000:	bf 93       	push	r27
    1002:	ef 93       	push	r30
    1004:	ff 93       	push	r31
    1006:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    100a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    100e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1012:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1016:	c9 01       	movw	r24, r18
    1018:	03 2e       	mov	r0, r19
    101a:	00 0c       	add	r0, r0
    101c:	aa 0b       	sbc	r26, r26
    101e:	bb 0b       	sbc	r27, r27
    1020:	dc 01       	movw	r26, r24
    1022:	99 27       	eor	r25, r25
    1024:	88 27       	eor	r24, r24
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	84 2b       	or	r24, r20
    102c:	95 2b       	or	r25, r21
    102e:	a6 2b       	or	r26, r22
    1030:	b7 2b       	or	r27, r23
    1032:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1036:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    103a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    103e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1042:	b0 9b       	sbis	0x16, 0	; 22
    1044:	1b c0       	rjmp	.+54     	; 0x107c <__vector_16+0x98>
    1046:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    104a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    104e:	c9 01       	movw	r24, r18
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	09 2e       	mov	r0, r25
    1054:	00 0c       	add	r0, r0
    1056:	aa 0b       	sbc	r26, r26
    1058:	bb 0b       	sbc	r27, r27
    105a:	dc 01       	movw	r26, r24
    105c:	99 27       	eor	r25, r25
    105e:	88 27       	eor	r24, r24
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	84 2b       	or	r24, r20
    1066:	95 2b       	or	r25, r21
    1068:	a6 2b       	or	r26, r22
    106a:	b7 2b       	or	r27, r23
    106c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1070:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1074:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1078:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    107c:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable+0x16>
    1080:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x17>
    1084:	30 97       	sbiw	r30, 0x00	; 0
    1086:	39 f0       	breq	.+14     	; 0x1096 <__vector_16+0xb2>
    1088:	6b e0       	ldi	r22, 0x0B	; 11
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable+0x16>
    1090:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x17>
    1094:	09 95       	icall
    1096:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
    109a:	ff 91       	pop	r31
    109c:	ef 91       	pop	r30
    109e:	bf 91       	pop	r27
    10a0:	af 91       	pop	r26
    10a2:	9f 91       	pop	r25
    10a4:	8f 91       	pop	r24
    10a6:	7f 91       	pop	r23
    10a8:	6f 91       	pop	r22
    10aa:	5f 91       	pop	r21
    10ac:	4f 91       	pop	r20
    10ae:	3f 91       	pop	r19
    10b0:	2f 91       	pop	r18
    10b2:	0f 90       	pop	r0
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	0f 90       	pop	r0
    10b8:	1f 90       	pop	r1
    10ba:	18 95       	reti

000010bc <__vector_17>:
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	11 24       	eor	r1, r1
    10c6:	2f 93       	push	r18
    10c8:	3f 93       	push	r19
    10ca:	4f 93       	push	r20
    10cc:	5f 93       	push	r21
    10ce:	6f 93       	push	r22
    10d0:	7f 93       	push	r23
    10d2:	8f 93       	push	r24
    10d4:	9f 93       	push	r25
    10d6:	af 93       	push	r26
    10d8:	bf 93       	push	r27
    10da:	ef 93       	push	r30
    10dc:	ff 93       	push	r31
    10de:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    10e2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    10e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10ee:	c9 01       	movw	r24, r18
    10f0:	03 2e       	mov	r0, r19
    10f2:	00 0c       	add	r0, r0
    10f4:	aa 0b       	sbc	r26, r26
    10f6:	bb 0b       	sbc	r27, r27
    10f8:	dc 01       	movw	r26, r24
    10fa:	99 27       	eor	r25, r25
    10fc:	88 27       	eor	r24, r24
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	84 2b       	or	r24, r20
    1104:	95 2b       	or	r25, r21
    1106:	a6 2b       	or	r26, r22
    1108:	b7 2b       	or	r27, r23
    110a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    110e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1112:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1116:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    111a:	b0 9b       	sbis	0x16, 0	; 22
    111c:	1b c0       	rjmp	.+54     	; 0x1154 <__vector_17+0x98>
    111e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1122:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1126:	c9 01       	movw	r24, r18
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	09 2e       	mov	r0, r25
    112c:	00 0c       	add	r0, r0
    112e:	aa 0b       	sbc	r26, r26
    1130:	bb 0b       	sbc	r27, r27
    1132:	dc 01       	movw	r26, r24
    1134:	99 27       	eor	r25, r25
    1136:	88 27       	eor	r24, r24
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	84 2b       	or	r24, r20
    113e:	95 2b       	or	r25, r21
    1140:	a6 2b       	or	r26, r22
    1142:	b7 2b       	or	r27, r23
    1144:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1148:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    114c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1150:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1154:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x18>
    1158:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x19>
    115c:	30 97       	sbiw	r30, 0x00	; 0
    115e:	39 f0       	breq	.+14     	; 0x116e <__vector_17+0xb2>
    1160:	6c e0       	ldi	r22, 0x0C	; 12
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x18>
    1168:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x19>
    116c:	09 95       	icall
    116e:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
    1172:	ff 91       	pop	r31
    1174:	ef 91       	pop	r30
    1176:	bf 91       	pop	r27
    1178:	af 91       	pop	r26
    117a:	9f 91       	pop	r25
    117c:	8f 91       	pop	r24
    117e:	7f 91       	pop	r23
    1180:	6f 91       	pop	r22
    1182:	5f 91       	pop	r21
    1184:	4f 91       	pop	r20
    1186:	3f 91       	pop	r19
    1188:	2f 91       	pop	r18
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	0f 90       	pop	r0
    1190:	1f 90       	pop	r1
    1192:	18 95       	reti

00001194 <__vector_18>:
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	2f 93       	push	r18
    11a0:	3f 93       	push	r19
    11a2:	4f 93       	push	r20
    11a4:	5f 93       	push	r21
    11a6:	6f 93       	push	r22
    11a8:	7f 93       	push	r23
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	af 93       	push	r26
    11b0:	bf 93       	push	r27
    11b2:	ef 93       	push	r30
    11b4:	ff 93       	push	r31
    11b6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    11ba:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    11be:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11c2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11c6:	c9 01       	movw	r24, r18
    11c8:	03 2e       	mov	r0, r19
    11ca:	00 0c       	add	r0, r0
    11cc:	aa 0b       	sbc	r26, r26
    11ce:	bb 0b       	sbc	r27, r27
    11d0:	dc 01       	movw	r26, r24
    11d2:	99 27       	eor	r25, r25
    11d4:	88 27       	eor	r24, r24
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	84 2b       	or	r24, r20
    11dc:	95 2b       	or	r25, r21
    11de:	a6 2b       	or	r26, r22
    11e0:	b7 2b       	or	r27, r23
    11e2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    11e6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    11ea:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    11ee:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    11f2:	b0 9b       	sbis	0x16, 0	; 22
    11f4:	1b c0       	rjmp	.+54     	; 0x122c <__vector_18+0x98>
    11f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11fe:	c9 01       	movw	r24, r18
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	09 2e       	mov	r0, r25
    1204:	00 0c       	add	r0, r0
    1206:	aa 0b       	sbc	r26, r26
    1208:	bb 0b       	sbc	r27, r27
    120a:	dc 01       	movw	r26, r24
    120c:	99 27       	eor	r25, r25
    120e:	88 27       	eor	r24, r24
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	84 2b       	or	r24, r20
    1216:	95 2b       	or	r25, r21
    1218:	a6 2b       	or	r26, r22
    121a:	b7 2b       	or	r27, r23
    121c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1220:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1224:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1228:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    122c:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x1a>
    1230:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x1b>
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	39 f0       	breq	.+14     	; 0x1246 <__vector_18+0xb2>
    1238:	6d e0       	ldi	r22, 0x0D	; 13
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x1a>
    1240:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x1b>
    1244:	09 95       	icall
    1246:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
    124a:	ff 91       	pop	r31
    124c:	ef 91       	pop	r30
    124e:	bf 91       	pop	r27
    1250:	af 91       	pop	r26
    1252:	9f 91       	pop	r25
    1254:	8f 91       	pop	r24
    1256:	7f 91       	pop	r23
    1258:	6f 91       	pop	r22
    125a:	5f 91       	pop	r21
    125c:	4f 91       	pop	r20
    125e:	3f 91       	pop	r19
    1260:	2f 91       	pop	r18
    1262:	0f 90       	pop	r0
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	0f 90       	pop	r0
    1268:	1f 90       	pop	r1
    126a:	18 95       	reti

0000126c <__vector_19>:
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	2f 93       	push	r18
    1278:	3f 93       	push	r19
    127a:	4f 93       	push	r20
    127c:	5f 93       	push	r21
    127e:	6f 93       	push	r22
    1280:	7f 93       	push	r23
    1282:	8f 93       	push	r24
    1284:	9f 93       	push	r25
    1286:	af 93       	push	r26
    1288:	bf 93       	push	r27
    128a:	ef 93       	push	r30
    128c:	ff 93       	push	r31
    128e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    1292:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    1296:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    129a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    129e:	c9 01       	movw	r24, r18
    12a0:	03 2e       	mov	r0, r19
    12a2:	00 0c       	add	r0, r0
    12a4:	aa 0b       	sbc	r26, r26
    12a6:	bb 0b       	sbc	r27, r27
    12a8:	dc 01       	movw	r26, r24
    12aa:	99 27       	eor	r25, r25
    12ac:	88 27       	eor	r24, r24
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	84 2b       	or	r24, r20
    12b4:	95 2b       	or	r25, r21
    12b6:	a6 2b       	or	r26, r22
    12b8:	b7 2b       	or	r27, r23
    12ba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    12be:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    12c2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    12c6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    12ca:	b0 9b       	sbis	0x16, 0	; 22
    12cc:	1b c0       	rjmp	.+54     	; 0x1304 <__vector_19+0x98>
    12ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12d6:	c9 01       	movw	r24, r18
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	09 2e       	mov	r0, r25
    12dc:	00 0c       	add	r0, r0
    12de:	aa 0b       	sbc	r26, r26
    12e0:	bb 0b       	sbc	r27, r27
    12e2:	dc 01       	movw	r26, r24
    12e4:	99 27       	eor	r25, r25
    12e6:	88 27       	eor	r24, r24
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	84 2b       	or	r24, r20
    12ee:	95 2b       	or	r25, r21
    12f0:	a6 2b       	or	r26, r22
    12f2:	b7 2b       	or	r27, r23
    12f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    12f8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    12fc:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1300:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1304:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x1c>
    1308:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x1d>
    130c:	30 97       	sbiw	r30, 0x00	; 0
    130e:	39 f0       	breq	.+14     	; 0x131e <__vector_19+0xb2>
    1310:	6e e0       	ldi	r22, 0x0E	; 14
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x1c>
    1318:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x1d>
    131c:	09 95       	icall
    131e:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
    1322:	ff 91       	pop	r31
    1324:	ef 91       	pop	r30
    1326:	bf 91       	pop	r27
    1328:	af 91       	pop	r26
    132a:	9f 91       	pop	r25
    132c:	8f 91       	pop	r24
    132e:	7f 91       	pop	r23
    1330:	6f 91       	pop	r22
    1332:	5f 91       	pop	r21
    1334:	4f 91       	pop	r20
    1336:	3f 91       	pop	r19
    1338:	2f 91       	pop	r18
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <__vector_20>:
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	4f 93       	push	r20
    1354:	5f 93       	push	r21
    1356:	6f 93       	push	r22
    1358:	7f 93       	push	r23
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	ef 93       	push	r30
    1364:	ff 93       	push	r31
    1366:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    136a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    136e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1372:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1376:	c9 01       	movw	r24, r18
    1378:	03 2e       	mov	r0, r19
    137a:	00 0c       	add	r0, r0
    137c:	aa 0b       	sbc	r26, r26
    137e:	bb 0b       	sbc	r27, r27
    1380:	dc 01       	movw	r26, r24
    1382:	99 27       	eor	r25, r25
    1384:	88 27       	eor	r24, r24
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	84 2b       	or	r24, r20
    138c:	95 2b       	or	r25, r21
    138e:	a6 2b       	or	r26, r22
    1390:	b7 2b       	or	r27, r23
    1392:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1396:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    139a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    139e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    13a2:	b0 9b       	sbis	0x16, 0	; 22
    13a4:	1b c0       	rjmp	.+54     	; 0x13dc <__vector_20+0x98>
    13a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13ae:	c9 01       	movw	r24, r18
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	09 2e       	mov	r0, r25
    13b4:	00 0c       	add	r0, r0
    13b6:	aa 0b       	sbc	r26, r26
    13b8:	bb 0b       	sbc	r27, r27
    13ba:	dc 01       	movw	r26, r24
    13bc:	99 27       	eor	r25, r25
    13be:	88 27       	eor	r24, r24
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	84 2b       	or	r24, r20
    13c6:	95 2b       	or	r25, r21
    13c8:	a6 2b       	or	r26, r22
    13ca:	b7 2b       	or	r27, r23
    13cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    13d0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    13d4:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    13d8:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    13dc:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x1e>
    13e0:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x1f>
    13e4:	30 97       	sbiw	r30, 0x00	; 0
    13e6:	39 f0       	breq	.+14     	; 0x13f6 <__vector_20+0xb2>
    13e8:	6f e0       	ldi	r22, 0x0F	; 15
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x1e>
    13f0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x1f>
    13f4:	09 95       	icall
    13f6:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
    13fa:	ff 91       	pop	r31
    13fc:	ef 91       	pop	r30
    13fe:	bf 91       	pop	r27
    1400:	af 91       	pop	r26
    1402:	9f 91       	pop	r25
    1404:	8f 91       	pop	r24
    1406:	7f 91       	pop	r23
    1408:	6f 91       	pop	r22
    140a:	5f 91       	pop	r21
    140c:	4f 91       	pop	r20
    140e:	3f 91       	pop	r19
    1410:	2f 91       	pop	r18
    1412:	0f 90       	pop	r0
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	0f 90       	pop	r0
    1418:	1f 90       	pop	r1
    141a:	18 95       	reti

0000141c <__vector_21>:
    141c:	1f 92       	push	r1
    141e:	0f 92       	push	r0
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	0f 92       	push	r0
    1424:	11 24       	eor	r1, r1
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	4f 93       	push	r20
    142c:	5f 93       	push	r21
    142e:	6f 93       	push	r22
    1430:	7f 93       	push	r23
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	af 93       	push	r26
    1438:	bf 93       	push	r27
    143a:	ef 93       	push	r30
    143c:	ff 93       	push	r31
    143e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    1442:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    1446:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    144a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    144e:	c9 01       	movw	r24, r18
    1450:	03 2e       	mov	r0, r19
    1452:	00 0c       	add	r0, r0
    1454:	aa 0b       	sbc	r26, r26
    1456:	bb 0b       	sbc	r27, r27
    1458:	dc 01       	movw	r26, r24
    145a:	99 27       	eor	r25, r25
    145c:	88 27       	eor	r24, r24
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	84 2b       	or	r24, r20
    1464:	95 2b       	or	r25, r21
    1466:	a6 2b       	or	r26, r22
    1468:	b7 2b       	or	r27, r23
    146a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    146e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1472:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1476:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    147a:	b0 9b       	sbis	0x16, 0	; 22
    147c:	1b c0       	rjmp	.+54     	; 0x14b4 <__vector_21+0x98>
    147e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1482:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1486:	c9 01       	movw	r24, r18
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	09 2e       	mov	r0, r25
    148c:	00 0c       	add	r0, r0
    148e:	aa 0b       	sbc	r26, r26
    1490:	bb 0b       	sbc	r27, r27
    1492:	dc 01       	movw	r26, r24
    1494:	99 27       	eor	r25, r25
    1496:	88 27       	eor	r24, r24
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	84 2b       	or	r24, r20
    149e:	95 2b       	or	r25, r21
    14a0:	a6 2b       	or	r26, r22
    14a2:	b7 2b       	or	r27, r23
    14a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    14a8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    14ac:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    14b0:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    14b4:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x20>
    14b8:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x21>
    14bc:	30 97       	sbiw	r30, 0x00	; 0
    14be:	39 f0       	breq	.+14     	; 0x14ce <__vector_21+0xb2>
    14c0:	60 e1       	ldi	r22, 0x10	; 16
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x20>
    14c8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x21>
    14cc:	09 95       	icall
    14ce:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
    14d2:	ff 91       	pop	r31
    14d4:	ef 91       	pop	r30
    14d6:	bf 91       	pop	r27
    14d8:	af 91       	pop	r26
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	7f 91       	pop	r23
    14e0:	6f 91       	pop	r22
    14e2:	5f 91       	pop	r21
    14e4:	4f 91       	pop	r20
    14e6:	3f 91       	pop	r19
    14e8:	2f 91       	pop	r18
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	0f 90       	pop	r0
    14f0:	1f 90       	pop	r1
    14f2:	18 95       	reti

000014f4 <__vector_22>:
    14f4:	1f 92       	push	r1
    14f6:	0f 92       	push	r0
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	2f 93       	push	r18
    1500:	3f 93       	push	r19
    1502:	4f 93       	push	r20
    1504:	5f 93       	push	r21
    1506:	6f 93       	push	r22
    1508:	7f 93       	push	r23
    150a:	8f 93       	push	r24
    150c:	9f 93       	push	r25
    150e:	af 93       	push	r26
    1510:	bf 93       	push	r27
    1512:	ef 93       	push	r30
    1514:	ff 93       	push	r31
    1516:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    151a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    151e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1522:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1526:	c9 01       	movw	r24, r18
    1528:	03 2e       	mov	r0, r19
    152a:	00 0c       	add	r0, r0
    152c:	aa 0b       	sbc	r26, r26
    152e:	bb 0b       	sbc	r27, r27
    1530:	dc 01       	movw	r26, r24
    1532:	99 27       	eor	r25, r25
    1534:	88 27       	eor	r24, r24
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	84 2b       	or	r24, r20
    153c:	95 2b       	or	r25, r21
    153e:	a6 2b       	or	r26, r22
    1540:	b7 2b       	or	r27, r23
    1542:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1546:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    154a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    154e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1552:	b0 9b       	sbis	0x16, 0	; 22
    1554:	1b c0       	rjmp	.+54     	; 0x158c <__vector_22+0x98>
    1556:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    155a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    155e:	c9 01       	movw	r24, r18
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	09 2e       	mov	r0, r25
    1564:	00 0c       	add	r0, r0
    1566:	aa 0b       	sbc	r26, r26
    1568:	bb 0b       	sbc	r27, r27
    156a:	dc 01       	movw	r26, r24
    156c:	99 27       	eor	r25, r25
    156e:	88 27       	eor	r24, r24
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	84 2b       	or	r24, r20
    1576:	95 2b       	or	r25, r21
    1578:	a6 2b       	or	r26, r22
    157a:	b7 2b       	or	r27, r23
    157c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1580:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1584:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1588:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    158c:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x22>
    1590:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x23>
    1594:	30 97       	sbiw	r30, 0x00	; 0
    1596:	39 f0       	breq	.+14     	; 0x15a6 <__vector_22+0xb2>
    1598:	61 e1       	ldi	r22, 0x11	; 17
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x22>
    15a0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x23>
    15a4:	09 95       	icall
    15a6:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
    15aa:	ff 91       	pop	r31
    15ac:	ef 91       	pop	r30
    15ae:	bf 91       	pop	r27
    15b0:	af 91       	pop	r26
    15b2:	9f 91       	pop	r25
    15b4:	8f 91       	pop	r24
    15b6:	7f 91       	pop	r23
    15b8:	6f 91       	pop	r22
    15ba:	5f 91       	pop	r21
    15bc:	4f 91       	pop	r20
    15be:	3f 91       	pop	r19
    15c0:	2f 91       	pop	r18
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

000015cc <enqueueByDeadline>:
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	7b 01       	movw	r14, r22
    15da:	eb 01       	movw	r28, r22
    15dc:	a8 81       	ld	r26, Y
    15de:	b9 81       	ldd	r27, Y+1	; 0x01
    15e0:	10 97       	sbiw	r26, 0x00	; 0
    15e2:	61 f1       	breq	.+88     	; 0x163c <enqueueByDeadline+0x70>
    15e4:	fc 01       	movw	r30, r24
    15e6:	06 81       	ldd	r16, Z+6	; 0x06
    15e8:	17 81       	ldd	r17, Z+7	; 0x07
    15ea:	20 85       	ldd	r18, Z+8	; 0x08
    15ec:	31 85       	ldd	r19, Z+9	; 0x09
    15ee:	16 96       	adiw	r26, 0x06	; 6
    15f0:	4d 91       	ld	r20, X+
    15f2:	5d 91       	ld	r21, X+
    15f4:	6d 91       	ld	r22, X+
    15f6:	7c 91       	ld	r23, X
    15f8:	19 97       	sbiw	r26, 0x09	; 9
    15fa:	04 17       	cp	r16, r20
    15fc:	15 07       	cpc	r17, r21
    15fe:	26 07       	cpc	r18, r22
    1600:	37 07       	cpc	r19, r23
    1602:	14 f4       	brge	.+4      	; 0x1608 <enqueueByDeadline+0x3c>
    1604:	1b c0       	rjmp	.+54     	; 0x163c <enqueueByDeadline+0x70>
    1606:	df 01       	movw	r26, r30
    1608:	ed 91       	ld	r30, X+
    160a:	fc 91       	ld	r31, X
    160c:	11 97       	sbiw	r26, 0x01	; 1
    160e:	30 97       	sbiw	r30, 0x00	; 0
    1610:	49 f0       	breq	.+18     	; 0x1624 <enqueueByDeadline+0x58>
    1612:	46 81       	ldd	r20, Z+6	; 0x06
    1614:	57 81       	ldd	r21, Z+7	; 0x07
    1616:	60 85       	ldd	r22, Z+8	; 0x08
    1618:	71 85       	ldd	r23, Z+9	; 0x09
    161a:	04 17       	cp	r16, r20
    161c:	15 07       	cpc	r17, r21
    161e:	26 07       	cpc	r18, r22
    1620:	37 07       	cpc	r19, r23
    1622:	8c f7       	brge	.-30     	; 0x1606 <enqueueByDeadline+0x3a>
    1624:	ec 01       	movw	r28, r24
    1626:	f9 83       	std	Y+1, r31	; 0x01
    1628:	e8 83       	st	Y, r30
    162a:	10 97       	sbiw	r26, 0x00	; 0
    162c:	21 f4       	brne	.+8      	; 0x1636 <enqueueByDeadline+0x6a>
    162e:	f7 01       	movw	r30, r14
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	80 83       	st	Z, r24
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <enqueueByDeadline+0x78>
    1636:	8d 93       	st	X+, r24
    1638:	9c 93       	st	X, r25
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <enqueueByDeadline+0x78>
    163c:	ec 01       	movw	r28, r24
    163e:	b9 83       	std	Y+1, r27	; 0x01
    1640:	a8 83       	st	Y, r26
    1642:	f5 cf       	rjmp	.-22     	; 0x162e <enqueueByDeadline+0x62>
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	08 95       	ret

00001652 <dequeue>:
    1652:	dc 01       	movw	r26, r24
    1654:	ed 91       	ld	r30, X+
    1656:	fc 91       	ld	r31, X
    1658:	11 97       	sbiw	r26, 0x01	; 1
    165a:	30 97       	sbiw	r30, 0x00	; 0
    165c:	59 f4       	brne	.+22     	; 0x1674 <dequeue+0x22>
    165e:	8f ef       	ldi	r24, 0xFF	; 255
    1660:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1664:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1668:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	83 bf       	out	0x33, r24	; 51
    1670:	88 95       	sleep
    1672:	fd cf       	rjmp	.-6      	; 0x166e <dequeue+0x1c>
    1674:	20 81       	ld	r18, Z
    1676:	31 81       	ldd	r19, Z+1	; 0x01
    1678:	2d 93       	st	X+, r18
    167a:	3c 93       	st	X, r19
    167c:	cf 01       	movw	r24, r30
    167e:	08 95       	ret

00001680 <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
    1680:	1f 92       	push	r1
    1682:	0f 92       	push	r0
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	0f 92       	push	r0
    1688:	11 24       	eor	r1, r1
    168a:	2f 93       	push	r18
    168c:	3f 93       	push	r19
    168e:	4f 93       	push	r20
    1690:	5f 93       	push	r21
    1692:	6f 93       	push	r22
    1694:	7f 93       	push	r23
    1696:	8f 93       	push	r24
    1698:	9f 93       	push	r25
    169a:	ef 93       	push	r30
    169c:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
    169e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
    16a2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
    16ac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
    TIMERSET(timerQ);
    16b0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <timerQ>
    16b4:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <timerQ+0x1>
    16b8:	30 97       	sbiw	r30, 0x00	; 0
    16ba:	01 f1       	breq	.+64     	; 0x16fc <__vector_9+0x7c>
    16bc:	42 81       	ldd	r20, Z+2	; 0x02
    16be:	53 81       	ldd	r21, Z+3	; 0x03
    16c0:	64 81       	ldd	r22, Z+4	; 0x04
    16c2:	75 81       	ldd	r23, Z+5	; 0x05
    16c4:	86 17       	cp	r24, r22
    16c6:	97 07       	cpc	r25, r23
    16c8:	c9 f4       	brne	.+50     	; 0x16fc <__vector_9+0x7c>
    16ca:	ca 01       	movw	r24, r20
    16cc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16d0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16d4:	42 1b       	sub	r20, r18
    16d6:	53 0b       	sbc	r21, r19
    16d8:	41 30       	cpi	r20, 0x01	; 1
    16da:	51 05       	cpc	r21, r1
    16dc:	29 f4       	brne	.+10     	; 0x16e8 <__vector_9+0x68>
    16de:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16e2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    16ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    16f0:	ef e6       	ldi	r30, 0x6F	; 111
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	82 60       	ori	r24, 0x02	; 2
    16f8:	80 83       	st	Z, r24
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <__vector_9+0x86>
    16fc:	ef e6       	ldi	r30, 0x6F	; 111
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	8d 7f       	andi	r24, 0xFD	; 253
    1704:	80 83       	st	Z, r24
}
    1706:	ff 91       	pop	r31
    1708:	ef 91       	pop	r30
    170a:	9f 91       	pop	r25
    170c:	8f 91       	pop	r24
    170e:	7f 91       	pop	r23
    1710:	6f 91       	pop	r22
    1712:	5f 91       	pop	r21
    1714:	4f 91       	pop	r20
    1716:	3f 91       	pop	r19
    1718:	2f 91       	pop	r18
    171a:	0f 90       	pop	r0
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	0f 90       	pop	r0
    1720:	1f 90       	pop	r1
    1722:	18 95       	reti

00001724 <__vector_7>:

TIMER_COMPARE_INTERRUPT {
    1724:	1f 92       	push	r1
    1726:	0f 92       	push	r0
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	0f 92       	push	r0
    172c:	11 24       	eor	r1, r1
    172e:	cf 92       	push	r12
    1730:	df 92       	push	r13
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	2f 93       	push	r18
    1738:	3f 93       	push	r19
    173a:	4f 93       	push	r20
    173c:	5f 93       	push	r21
    173e:	6f 93       	push	r22
    1740:	7f 93       	push	r23
    1742:	8f 93       	push	r24
    1744:	9f 93       	push	r25
    1746:	af 93       	push	r26
    1748:	bf 93       	push	r27
    174a:	ef 93       	push	r30
    174c:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    174e:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <__data_end>
    1752:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <__data_end+0x1>
    1756:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    175a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    175e:	b0 99       	sbic	0x16, 0	; 22
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <__vector_7+0x5c>
    1762:	0d 2c       	mov	r0, r13
    1764:	00 0c       	add	r0, r0
    1766:	ee 08       	sbc	r14, r14
    1768:	ff 08       	sbc	r15, r15
    176a:	d6 01       	movw	r26, r12
    176c:	99 27       	eor	r25, r25
    176e:	88 27       	eor	r24, r24
    1770:	69 01       	movw	r12, r18
    1772:	e1 2c       	mov	r14, r1
    1774:	f1 2c       	mov	r15, r1
    1776:	c8 2a       	or	r12, r24
    1778:	d9 2a       	or	r13, r25
    177a:	ea 2a       	or	r14, r26
    177c:	fb 2a       	or	r15, r27
    177e:	15 c0       	rjmp	.+42     	; 0x17aa <__vector_7+0x86>
    1780:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1784:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	c8 1a       	sub	r12, r24
    178c:	d8 0a       	sbc	r13, r24
    178e:	0d 2c       	mov	r0, r13
    1790:	00 0c       	add	r0, r0
    1792:	ee 08       	sbc	r14, r14
    1794:	ff 08       	sbc	r15, r15
    1796:	d6 01       	movw	r26, r12
    1798:	99 27       	eor	r25, r25
    179a:	88 27       	eor	r24, r24
    179c:	69 01       	movw	r12, r18
    179e:	e1 2c       	mov	r14, r1
    17a0:	f1 2c       	mov	r15, r1
    17a2:	c8 2a       	or	r12, r24
    17a4:	d9 2a       	or	r13, r25
    17a6:	ea 2a       	or	r14, r26
    17a8:	fb 2a       	or	r15, r27
    while (timerQ && (timerQ->baseline - now <= 0))
    17aa:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <timerQ>
    17ae:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <timerQ+0x1>
    17b2:	30 97       	sbiw	r30, 0x00	; 0
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <__vector_7+0x94>
    17b6:	42 c0       	rjmp	.+132    	; 0x183c <__vector_7+0x118>
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	a4 81       	ldd	r26, Z+4	; 0x04
    17be:	b5 81       	ldd	r27, Z+5	; 0x05
    17c0:	8c 19       	sub	r24, r12
    17c2:	9d 09       	sbc	r25, r13
    17c4:	ae 09       	sbc	r26, r14
    17c6:	bf 09       	sbc	r27, r15
    17c8:	18 16       	cp	r1, r24
    17ca:	19 06       	cpc	r1, r25
    17cc:	1a 06       	cpc	r1, r26
    17ce:	1b 06       	cpc	r1, r27
    17d0:	ec f1       	brlt	.+122    	; 0x184c <__vector_7+0x128>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    17d2:	8c e0       	ldi	r24, 0x0C	; 12
    17d4:	91 e0       	ldi	r25, 0x01	; 1
    17d6:	0e 94 29 0b 	call	0x1652	; 0x1652 <dequeue>
    17da:	6e e0       	ldi	r22, 0x0E	; 14
    17dc:	71 e0       	ldi	r23, 0x01	; 1
    17de:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <enqueueByDeadline>

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
    17e2:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <timerQ>
    17e6:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <timerQ+0x1>
    17ea:	30 97       	sbiw	r30, 0x00	; 0
    17ec:	39 f1       	breq	.+78     	; 0x183c <__vector_7+0x118>
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	a4 81       	ldd	r26, Z+4	; 0x04
    17f4:	b5 81       	ldd	r27, Z+5	; 0x05
    17f6:	8c 19       	sub	r24, r12
    17f8:	9d 09       	sbc	r25, r13
    17fa:	ae 09       	sbc	r26, r14
    17fc:	bf 09       	sbc	r27, r15
    17fe:	18 16       	cp	r1, r24
    1800:	19 06       	cpc	r1, r25
    1802:	1a 06       	cpc	r1, r26
    1804:	1b 06       	cpc	r1, r27
    1806:	2c f7       	brge	.-54     	; 0x17d2 <__vector_7+0xae>
    1808:	21 c0       	rjmp	.+66     	; 0x184c <__vector_7+0x128>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    180a:	9c 01       	movw	r18, r24
    180c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1810:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1814:	84 1b       	sub	r24, r20
    1816:	95 0b       	sbc	r25, r21
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	31 f4       	brne	.+12     	; 0x1828 <__vector_7+0x104>
    181c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1820:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1824:	2f 5f       	subi	r18, 0xFF	; 255
    1826:	3f 4f       	sbci	r19, 0xFF	; 255
    1828:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    182c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1830:	ef e6       	ldi	r30, 0x6F	; 111
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	82 60       	ori	r24, 0x02	; 2
    1838:	80 83       	st	Z, r24
    183a:	05 c0       	rjmp	.+10     	; 0x1846 <__vector_7+0x122>
    183c:	ef e6       	ldi	r30, 0x6F	; 111
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8d 7f       	andi	r24, 0xFD	; 253
    1844:	80 83       	st	Z, r24
    schedule();
    1846:	0e 94 13 03 	call	0x626	; 0x626 <schedule>
}
    184a:	0c c0       	rjmp	.+24     	; 0x1864 <__vector_7+0x140>
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	a4 81       	ldd	r26, Z+4	; 0x04
    1852:	b5 81       	ldd	r27, Z+5	; 0x05
    1854:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    1858:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    185c:	2a 17       	cp	r18, r26
    185e:	3b 07       	cpc	r19, r27
    1860:	69 f7       	brne	.-38     	; 0x183c <__vector_7+0x118>
    1862:	d3 cf       	rjmp	.-90     	; 0x180a <__vector_7+0xe6>
    schedule();
}
    1864:	ff 91       	pop	r31
    1866:	ef 91       	pop	r30
    1868:	bf 91       	pop	r27
    186a:	af 91       	pop	r26
    186c:	9f 91       	pop	r25
    186e:	8f 91       	pop	r24
    1870:	7f 91       	pop	r23
    1872:	6f 91       	pop	r22
    1874:	5f 91       	pop	r21
    1876:	4f 91       	pop	r20
    1878:	3f 91       	pop	r19
    187a:	2f 91       	pop	r18
    187c:	ff 90       	pop	r15
    187e:	ef 90       	pop	r14
    1880:	df 90       	pop	r13
    1882:	cf 90       	pop	r12
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	0f 90       	pop	r0
    188a:	1f 90       	pop	r1
    188c:	18 95       	reti

0000188e <USART_Init>:
    return -1;
}
/* Filter the 9th bit, then return */
resh = (resh >> 1) & 0x01;
return ((resh << 8) | resl  ); 
}
    188e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
    1892:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
    1896:	88 ed       	ldi	r24, 0xD8	; 216
    1898:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
    189c:	8e e0       	ldi	r24, 0x0E	; 14
    189e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
    18a2:	08 95       	ret

000018a4 <USART_Transmit>:


void USART_Transmit( unsigned int data )
{
    18a4:	9c 01       	movw	r18, r24
/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0))) ;
    18a6:	e0 ec       	ldi	r30, 0xC0	; 192
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	90 81       	ld	r25, Z
    18ac:	95 ff       	sbrs	r25, 5
    18ae:	fd cf       	rjmp	.-6      	; 0x18aa <USART_Transmit+0x6>
/* Copy 9th bit to TXB8 */
UCSR0B &= ~(1<<TXB80);
    18b0:	e1 ec       	ldi	r30, 0xC1	; 193
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	90 81       	ld	r25, Z
    18b6:	9e 7f       	andi	r25, 0xFE	; 254
    18b8:	90 83       	st	Z, r25
if ( data & 0x0100 ){
    18ba:	30 ff       	sbrs	r19, 0
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <USART_Transmit+0x20>
    UCSR0B |= (1<<TXB80);
    18be:	80 81       	ld	r24, Z
    18c0:	81 60       	ori	r24, 0x01	; 1
    18c2:	80 83       	st	Z, r24
}
/* Put data into buffer, sends the data */
UDR0 = data;
    18c4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    18c8:	08 95       	ret

000018ca <__divmodsi4>:
    18ca:	05 2e       	mov	r0, r21
    18cc:	97 fb       	bst	r25, 7
    18ce:	1e f4       	brtc	.+6      	; 0x18d6 <__divmodsi4+0xc>
    18d0:	00 94       	com	r0
    18d2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__negsi2>
    18d6:	57 fd       	sbrc	r21, 7
    18d8:	07 d0       	rcall	.+14     	; 0x18e8 <__divmodsi4_neg2>
    18da:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__udivmodsi4>
    18de:	07 fc       	sbrc	r0, 7
    18e0:	03 d0       	rcall	.+6      	; 0x18e8 <__divmodsi4_neg2>
    18e2:	4e f4       	brtc	.+18     	; 0x18f6 <__divmodsi4_exit>
    18e4:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__negsi2>

000018e8 <__divmodsi4_neg2>:
    18e8:	50 95       	com	r21
    18ea:	40 95       	com	r20
    18ec:	30 95       	com	r19
    18ee:	21 95       	neg	r18
    18f0:	3f 4f       	sbci	r19, 0xFF	; 255
    18f2:	4f 4f       	sbci	r20, 0xFF	; 255
    18f4:	5f 4f       	sbci	r21, 0xFF	; 255

000018f6 <__divmodsi4_exit>:
    18f6:	08 95       	ret

000018f8 <__negsi2>:
    18f8:	90 95       	com	r25
    18fa:	80 95       	com	r24
    18fc:	70 95       	com	r23
    18fe:	61 95       	neg	r22
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	8f 4f       	sbci	r24, 0xFF	; 255
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	08 95       	ret

00001908 <__tablejump2__>:
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	05 90       	lpm	r0, Z+
    190e:	f4 91       	lpm	r31, Z
    1910:	e0 2d       	mov	r30, r0
    1912:	09 94       	ijmp

00001914 <__udivmodsi4>:
    1914:	a1 e2       	ldi	r26, 0x21	; 33
    1916:	1a 2e       	mov	r1, r26
    1918:	aa 1b       	sub	r26, r26
    191a:	bb 1b       	sub	r27, r27
    191c:	fd 01       	movw	r30, r26
    191e:	0d c0       	rjmp	.+26     	; 0x193a <__udivmodsi4_ep>

00001920 <__udivmodsi4_loop>:
    1920:	aa 1f       	adc	r26, r26
    1922:	bb 1f       	adc	r27, r27
    1924:	ee 1f       	adc	r30, r30
    1926:	ff 1f       	adc	r31, r31
    1928:	a2 17       	cp	r26, r18
    192a:	b3 07       	cpc	r27, r19
    192c:	e4 07       	cpc	r30, r20
    192e:	f5 07       	cpc	r31, r21
    1930:	20 f0       	brcs	.+8      	; 0x193a <__udivmodsi4_ep>
    1932:	a2 1b       	sub	r26, r18
    1934:	b3 0b       	sbc	r27, r19
    1936:	e4 0b       	sbc	r30, r20
    1938:	f5 0b       	sbc	r31, r21

0000193a <__udivmodsi4_ep>:
    193a:	66 1f       	adc	r22, r22
    193c:	77 1f       	adc	r23, r23
    193e:	88 1f       	adc	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	1a 94       	dec	r1
    1944:	69 f7       	brne	.-38     	; 0x1920 <__udivmodsi4_loop>
    1946:	60 95       	com	r22
    1948:	70 95       	com	r23
    194a:	80 95       	com	r24
    194c:	90 95       	com	r25
    194e:	9b 01       	movw	r18, r22
    1950:	ac 01       	movw	r20, r24
    1952:	bd 01       	movw	r22, r26
    1954:	cf 01       	movw	r24, r30
    1956:	08 95       	ret

00001958 <setjmp>:
    1958:	dc 01       	movw	r26, r24
    195a:	2d 92       	st	X+, r2
    195c:	3d 92       	st	X+, r3
    195e:	4d 92       	st	X+, r4
    1960:	5d 92       	st	X+, r5
    1962:	6d 92       	st	X+, r6
    1964:	7d 92       	st	X+, r7
    1966:	8d 92       	st	X+, r8
    1968:	9d 92       	st	X+, r9
    196a:	ad 92       	st	X+, r10
    196c:	bd 92       	st	X+, r11
    196e:	cd 92       	st	X+, r12
    1970:	dd 92       	st	X+, r13
    1972:	ed 92       	st	X+, r14
    1974:	fd 92       	st	X+, r15
    1976:	0d 93       	st	X+, r16
    1978:	1d 93       	st	X+, r17
    197a:	cd 93       	st	X+, r28
    197c:	dd 93       	st	X+, r29
    197e:	ff 91       	pop	r31
    1980:	ef 91       	pop	r30
    1982:	8d b7       	in	r24, 0x3d	; 61
    1984:	8d 93       	st	X+, r24
    1986:	8e b7       	in	r24, 0x3e	; 62
    1988:	8d 93       	st	X+, r24
    198a:	8f b7       	in	r24, 0x3f	; 63
    198c:	8d 93       	st	X+, r24
    198e:	ed 93       	st	X+, r30
    1990:	fd 93       	st	X+, r31
    1992:	88 27       	eor	r24, r24
    1994:	99 27       	eor	r25, r25
    1996:	09 94       	ijmp

00001998 <longjmp>:
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	91 05       	cpc	r25, r1
    19a0:	81 1d       	adc	r24, r1
    19a2:	2d 90       	ld	r2, X+
    19a4:	3d 90       	ld	r3, X+
    19a6:	4d 90       	ld	r4, X+
    19a8:	5d 90       	ld	r5, X+
    19aa:	6d 90       	ld	r6, X+
    19ac:	7d 90       	ld	r7, X+
    19ae:	8d 90       	ld	r8, X+
    19b0:	9d 90       	ld	r9, X+
    19b2:	ad 90       	ld	r10, X+
    19b4:	bd 90       	ld	r11, X+
    19b6:	cd 90       	ld	r12, X+
    19b8:	dd 90       	ld	r13, X+
    19ba:	ed 90       	ld	r14, X+
    19bc:	fd 90       	ld	r15, X+
    19be:	0d 91       	ld	r16, X+
    19c0:	1d 91       	ld	r17, X+
    19c2:	cd 91       	ld	r28, X+
    19c4:	dd 91       	ld	r29, X+
    19c6:	ed 91       	ld	r30, X+
    19c8:	fd 91       	ld	r31, X+
    19ca:	0d 90       	ld	r0, X+
    19cc:	f8 94       	cli
    19ce:	fe bf       	out	0x3e, r31	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	ed bf       	out	0x3d, r30	; 61
    19d4:	ed 91       	ld	r30, X+
    19d6:	fd 91       	ld	r31, X+
    19d8:	09 94       	ijmp

000019da <_exit>:
    19da:	f8 94       	cli

000019dc <__stop_program>:
    19dc:	ff cf       	rjmp	.-2      	; 0x19dc <__stop_program>
