
d0003e_labb5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000019fe  00001a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800106  00800106  00001a98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ac8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e2b  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d92  00000000  00000000  00003b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001284  00000000  00000000  000048a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a68  00000000  00000000  00005b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000869  00000000  00000000  00006594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023f7  00000000  00000000  00006dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_1>
       8:	0c 94 bc 03 	jmp	0x778	; 0x778 <__vector_2>
       c:	0c 94 28 04 	jmp	0x850	; 0x850 <__vector_3>
      10:	0c 94 94 04 	jmp	0x928	; 0x928 <__vector_4>
      14:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__vector_9>
      28:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__vector_10>
      2c:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_11>
      30:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__vector_12>
      34:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__vector_13>
      38:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__vector_14>
      3c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__vector_15>
      40:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__vector_16>
      44:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__vector_17>
      48:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_18>
      4c:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_19>
      50:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_20>
      54:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__vector_21>
      58:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__vector_22>
      5c:	8f 00       	.word	0x008f	; ????
      5e:	71 00       	.word	0x0071	; ????
      60:	74 00       	.word	0x0074	; ????
      62:	77 00       	.word	0x0077	; ????
      64:	7a 00       	.word	0x007a	; ????
      66:	7d 00       	.word	0x007d	; ????
      68:	80 00       	.word	0x0080	; ????
      6a:	83 00       	.word	0x0083	; ????
      6c:	86 00       	.word	0x0086	; ????
      6e:	89 00       	.word	0x0089	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee ef       	ldi	r30, 0xFE	; 254
      84:	f9 e1       	ldi	r31, 0x19	; 25
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a6 30       	cpi	r26, 0x06	; 6
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a6 e0       	ldi	r26, 0x06	; 6
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a9 35       	cpi	r26, 0x59	; 89
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <main>
      a6:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:
#include "lcd.h"



void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
      b6:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      b8:	87 eb       	ldi	r24, 0xB7	; 183
      ba:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
      be:	87 e0       	ldi	r24, 0x07	; 7
      c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
      c4:	8f e0       	ldi	r24, 0x0F	; 15
      c6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
      ca:	80 ec       	ldi	r24, 0xC0	; 192
      cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
      d0:	08 95       	ret

000000d2 <getValueArray>:
}

int getValueArray(int i){

    switch (i)
      d2:	8a 30       	cpi	r24, 0x0A	; 10
      d4:	91 05       	cpc	r25, r1
      d6:	00 f5       	brcc	.+64     	; 0x118 <getValueArray+0x46>
      d8:	fc 01       	movw	r30, r24
      da:	e2 5d       	subi	r30, 0xD2	; 210
      dc:	ff 4f       	sbci	r31, 0xFF	; 255
      de:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__tablejump2__>
    {
    case 0:
        return ZeroValue;

    case 1:
        return OneValue;
      e2:	80 e8       	ldi	r24, 0x80	; 128
      e4:	90 e2       	ldi	r25, 0x20	; 32
      e6:	08 95       	ret
    
    case 2:
        return TwoValue;
      e8:	81 e1       	ldi	r24, 0x11	; 17
      ea:	9e e1       	ldi	r25, 0x1E	; 30
      ec:	08 95       	ret

    case 3:
        return ThreeValue;
      ee:	81 e1       	ldi	r24, 0x11	; 17
      f0:	9b e1       	ldi	r25, 0x1B	; 27
      f2:	08 95       	ret
    
    case 4:
        return FourValue;
      f4:	80 e5       	ldi	r24, 0x50	; 80
      f6:	9b e0       	ldi	r25, 0x0B	; 11
      f8:	08 95       	ret

    case 5:
        return FiveValue;
      fa:	81 e4       	ldi	r24, 0x41	; 65
      fc:	9b e1       	ldi	r25, 0x1B	; 27
      fe:	08 95       	ret
    
    case 6:
        return SixValue;
     100:	81 e4       	ldi	r24, 0x41	; 65
     102:	9f e1       	ldi	r25, 0x1F	; 31
     104:	08 95       	ret
    
    case 7:
        return SevenValue;
     106:	81 e1       	ldi	r24, 0x11	; 17
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
        
    case 8:
        return EightValue;
     10c:	81 e5       	ldi	r24, 0x51	; 81
     10e:	9f e1       	ldi	r25, 0x1F	; 31
     110:	08 95       	ret
    
    case 9:
        return NineValue;
     112:	81 e5       	ldi	r24, 0x51	; 81
     114:	9b e0       	ldi	r25, 0x0B	; 11
     116:	08 95       	ret
    
    default: // 10
        return BlankValue;
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
int getValueArray(int i){

    switch (i)
    {
    case 0:
        return ZeroValue;
     11e:	81 e5       	ldi	r24, 0x51	; 81
     120:	95 e1       	ldi	r25, 0x15	; 21
        return NineValue;
    
    default: // 10
        return BlankValue;
    }
}
     122:	08 95       	ret

00000124 <writeChar>:


void writeChar(char ch, int pos) {
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <writeChar+0xc>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62

	volatile int i = 0;
     134:	1a 82       	std	Y+2, r1	; 0x02
     136:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
     138:	66 30       	cpi	r22, 0x06	; 6
     13a:	71 05       	cpc	r23, r1
     13c:	08 f0       	brcs	.+2      	; 0x140 <writeChar+0x1c>
     13e:	fe c1       	rjmp	.+1020   	; 0x53c <__stack+0x3d>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
     140:	90 ed       	ldi	r25, 0xD0	; 208
     142:	98 0f       	add	r25, r24
     144:	9a 30       	cpi	r25, 0x0A	; 10
     146:	28 f0       	brcs	.+10     	; 0x152 <writeChar+0x2e>
		i=10;
     148:	8a e0       	ldi	r24, 0x0A	; 10
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	9a 83       	std	Y+2, r25	; 0x02
     14e:	89 83       	std	Y+1, r24	; 0x01
     150:	04 c0       	rjmp	.+8      	; 0x15a <writeChar+0x36>
	}else{
        i = ch - 48;
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	c0 97       	sbiw	r24, 0x30	; 48
     156:	9a 83       	std	Y+2, r25	; 0x02
     158:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
     15a:	61 15       	cp	r22, r1
     15c:	71 05       	cpc	r23, r1
     15e:	09 f0       	breq	.+2      	; 0x162 <writeChar+0x3e>
     160:	4e c0       	rjmp	.+156    	; 0x1fe <writeChar+0xda>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&getValueArray(i))<<0;
     162:	0f 2e       	mov	r0, r31
     164:	fc ee       	ldi	r31, 0xEC	; 236
     166:	ef 2e       	mov	r14, r31
     168:	f1 2c       	mov	r15, r1
     16a:	f0 2d       	mov	r31, r0
     16c:	f7 01       	movw	r30, r14
     16e:	10 81       	ld	r17, Z
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	9a 81       	ldd	r25, Y+2	; 0x02
     174:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     178:	10 7f       	andi	r17, 0xF0	; 240
     17a:	8f 70       	andi	r24, 0x0F	; 15
     17c:	81 2b       	or	r24, r17
     17e:	f7 01       	movw	r30, r14
     180:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     182:	0f 2e       	mov	r0, r31
     184:	f1 ef       	ldi	r31, 0xF1	; 241
     186:	ef 2e       	mov	r14, r31
     188:	f1 2c       	mov	r15, r1
     18a:	f0 2d       	mov	r31, r0
     18c:	f7 01       	movw	r30, r14
     18e:	10 81       	ld	r17, Z
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     198:	80 7f       	andi	r24, 0xF0	; 240
     19a:	99 27       	eor	r25, r25
     19c:	95 95       	asr	r25
     19e:	87 95       	ror	r24
     1a0:	95 95       	asr	r25
     1a2:	87 95       	ror	r24
     1a4:	95 95       	asr	r25
     1a6:	87 95       	ror	r24
     1a8:	95 95       	asr	r25
     1aa:	87 95       	ror	r24
     1ac:	10 7f       	andi	r17, 0xF0	; 240
     1ae:	81 2b       	or	r24, r17
     1b0:	f7 01       	movw	r30, r14
     1b2:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     1b4:	0f 2e       	mov	r0, r31
     1b6:	f6 ef       	ldi	r31, 0xF6	; 246
     1b8:	ef 2e       	mov	r14, r31
     1ba:	f1 2c       	mov	r15, r1
     1bc:	f0 2d       	mov	r31, r0
     1be:	f7 01       	movw	r30, r14
     1c0:	10 81       	ld	r17, Z
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     1ca:	88 27       	eor	r24, r24
     1cc:	9f 70       	andi	r25, 0x0F	; 15
     1ce:	10 7f       	andi	r17, 0xF0	; 240
     1d0:	19 2b       	or	r17, r25
     1d2:	f7 01       	movw	r30, r14
     1d4:	10 83       	st	Z, r17
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     1d6:	0f 2e       	mov	r0, r31
     1d8:	fb ef       	ldi	r31, 0xFB	; 251
     1da:	ef 2e       	mov	r14, r31
     1dc:	f1 2c       	mov	r15, r1
     1de:	f0 2d       	mov	r31, r0
     1e0:	f7 01       	movw	r30, r14
     1e2:	10 81       	ld	r17, Z
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     1ec:	10 7f       	andi	r17, 0xF0	; 240
     1ee:	95 95       	asr	r25
     1f0:	95 95       	asr	r25
     1f2:	95 95       	asr	r25
     1f4:	95 95       	asr	r25
     1f6:	91 2b       	or	r25, r17
     1f8:	f7 01       	movw	r30, r14
     1fa:	90 83       	st	Z, r25
     1fc:	9f c1       	rjmp	.+830    	; 0x53c <__stack+0x3d>
		
	} else if(pos==1){
     1fe:	61 30       	cpi	r22, 0x01	; 1
     200:	71 05       	cpc	r23, r1
     202:	09 f0       	breq	.+2      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
     204:	50 c0       	rjmp	.+160    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&getValueArray(i))<<4);
     206:	0f 2e       	mov	r0, r31
     208:	fc ee       	ldi	r31, 0xEC	; 236
     20a:	ef 2e       	mov	r14, r31
     20c:	f1 2c       	mov	r15, r1
     20e:	f0 2d       	mov	r31, r0
     210:	f7 01       	movw	r30, r14
     212:	10 81       	ld	r17, Z
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	9a 81       	ldd	r25, Y+2	; 0x02
     218:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     21c:	1f 70       	andi	r17, 0x0F	; 15
     21e:	82 95       	swap	r24
     220:	92 95       	swap	r25
     222:	90 7f       	andi	r25, 0xF0	; 240
     224:	98 27       	eor	r25, r24
     226:	80 7f       	andi	r24, 0xF0	; 240
     228:	98 27       	eor	r25, r24
     22a:	81 2b       	or	r24, r17
     22c:	f7 01       	movw	r30, r14
     22e:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     230:	0f 2e       	mov	r0, r31
     232:	f1 ef       	ldi	r31, 0xF1	; 241
     234:	ef 2e       	mov	r14, r31
     236:	f1 2c       	mov	r15, r1
     238:	f0 2d       	mov	r31, r0
     23a:	f7 01       	movw	r30, r14
     23c:	10 81       	ld	r17, Z
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     246:	1f 70       	andi	r17, 0x0F	; 15
     248:	80 7f       	andi	r24, 0xF0	; 240
     24a:	81 2b       	or	r24, r17
     24c:	f7 01       	movw	r30, r14
     24e:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     250:	0f 2e       	mov	r0, r31
     252:	f6 ef       	ldi	r31, 0xF6	; 246
     254:	ef 2e       	mov	r14, r31
     256:	f1 2c       	mov	r15, r1
     258:	f0 2d       	mov	r31, r0
     25a:	f7 01       	movw	r30, r14
     25c:	10 81       	ld	r17, Z
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     266:	88 27       	eor	r24, r24
     268:	9f 70       	andi	r25, 0x0F	; 15
     26a:	95 95       	asr	r25
     26c:	87 95       	ror	r24
     26e:	95 95       	asr	r25
     270:	87 95       	ror	r24
     272:	95 95       	asr	r25
     274:	87 95       	ror	r24
     276:	95 95       	asr	r25
     278:	87 95       	ror	r24
     27a:	1f 70       	andi	r17, 0x0F	; 15
     27c:	81 2b       	or	r24, r17
     27e:	f7 01       	movw	r30, r14
     280:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     282:	0f 2e       	mov	r0, r31
     284:	fb ef       	ldi	r31, 0xFB	; 251
     286:	ef 2e       	mov	r14, r31
     288:	f1 2c       	mov	r15, r1
     28a:	f0 2d       	mov	r31, r0
     28c:	f7 01       	movw	r30, r14
     28e:	10 81       	ld	r17, Z
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     298:	88 27       	eor	r24, r24
     29a:	90 7f       	andi	r25, 0xF0	; 240
     29c:	1f 70       	andi	r17, 0x0F	; 15
     29e:	19 2b       	or	r17, r25
     2a0:	f7 01       	movw	r30, r14
     2a2:	10 83       	st	Z, r17
     2a4:	4b c1       	rjmp	.+662    	; 0x53c <__stack+0x3d>
	} else if(pos==2){
     2a6:	62 30       	cpi	r22, 0x02	; 2
     2a8:	71 05       	cpc	r23, r1
     2aa:	09 f0       	breq	.+2      	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
     2ac:	4e c0       	rjmp	.+156    	; 0x34a <__EEPROM_REGION_LENGTH__+0x14a>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&getValueArray(i))<<0;
     2ae:	0f 2e       	mov	r0, r31
     2b0:	fd ee       	ldi	r31, 0xED	; 237
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f1 2c       	mov	r15, r1
     2b6:	f0 2d       	mov	r31, r0
     2b8:	f7 01       	movw	r30, r14
     2ba:	10 81       	ld	r17, Z
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
     2c0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     2c4:	10 7f       	andi	r17, 0xF0	; 240
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	81 2b       	or	r24, r17
     2ca:	f7 01       	movw	r30, r14
     2cc:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     2ce:	0f 2e       	mov	r0, r31
     2d0:	f2 ef       	ldi	r31, 0xF2	; 242
     2d2:	ef 2e       	mov	r14, r31
     2d4:	f1 2c       	mov	r15, r1
     2d6:	f0 2d       	mov	r31, r0
     2d8:	f7 01       	movw	r30, r14
     2da:	10 81       	ld	r17, Z
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     2e4:	80 7f       	andi	r24, 0xF0	; 240
     2e6:	99 27       	eor	r25, r25
     2e8:	95 95       	asr	r25
     2ea:	87 95       	ror	r24
     2ec:	95 95       	asr	r25
     2ee:	87 95       	ror	r24
     2f0:	95 95       	asr	r25
     2f2:	87 95       	ror	r24
     2f4:	95 95       	asr	r25
     2f6:	87 95       	ror	r24
     2f8:	10 7f       	andi	r17, 0xF0	; 240
     2fa:	81 2b       	or	r24, r17
     2fc:	f7 01       	movw	r30, r14
     2fe:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     300:	0f 2e       	mov	r0, r31
     302:	f7 ef       	ldi	r31, 0xF7	; 247
     304:	ef 2e       	mov	r14, r31
     306:	f1 2c       	mov	r15, r1
     308:	f0 2d       	mov	r31, r0
     30a:	f7 01       	movw	r30, r14
     30c:	10 81       	ld	r17, Z
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     316:	88 27       	eor	r24, r24
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	10 7f       	andi	r17, 0xF0	; 240
     31c:	19 2b       	or	r17, r25
     31e:	f7 01       	movw	r30, r14
     320:	10 83       	st	Z, r17
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     322:	0f 2e       	mov	r0, r31
     324:	fc ef       	ldi	r31, 0xFC	; 252
     326:	ef 2e       	mov	r14, r31
     328:	f1 2c       	mov	r15, r1
     32a:	f0 2d       	mov	r31, r0
     32c:	f7 01       	movw	r30, r14
     32e:	10 81       	ld	r17, Z
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	9a 81       	ldd	r25, Y+2	; 0x02
     334:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     338:	10 7f       	andi	r17, 0xF0	; 240
     33a:	95 95       	asr	r25
     33c:	95 95       	asr	r25
     33e:	95 95       	asr	r25
     340:	95 95       	asr	r25
     342:	91 2b       	or	r25, r17
     344:	f7 01       	movw	r30, r14
     346:	90 83       	st	Z, r25
     348:	f9 c0       	rjmp	.+498    	; 0x53c <__stack+0x3d>
		
	} else if(pos==3){
     34a:	63 30       	cpi	r22, 0x03	; 3
     34c:	71 05       	cpc	r23, r1
     34e:	09 f0       	breq	.+2      	; 0x352 <__EEPROM_REGION_LENGTH__+0x152>
     350:	50 c0       	rjmp	.+160    	; 0x3f2 <__EEPROM_REGION_LENGTH__+0x1f2>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&getValueArray(i))<<4);
     352:	0f 2e       	mov	r0, r31
     354:	fd ee       	ldi	r31, 0xED	; 237
     356:	ef 2e       	mov	r14, r31
     358:	f1 2c       	mov	r15, r1
     35a:	f0 2d       	mov	r31, r0
     35c:	f7 01       	movw	r30, r14
     35e:	10 81       	ld	r17, Z
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	9a 81       	ldd	r25, Y+2	; 0x02
     364:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     368:	1f 70       	andi	r17, 0x0F	; 15
     36a:	82 95       	swap	r24
     36c:	92 95       	swap	r25
     36e:	90 7f       	andi	r25, 0xF0	; 240
     370:	98 27       	eor	r25, r24
     372:	80 7f       	andi	r24, 0xF0	; 240
     374:	98 27       	eor	r25, r24
     376:	81 2b       	or	r24, r17
     378:	f7 01       	movw	r30, r14
     37a:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     37c:	0f 2e       	mov	r0, r31
     37e:	f2 ef       	ldi	r31, 0xF2	; 242
     380:	ef 2e       	mov	r14, r31
     382:	f1 2c       	mov	r15, r1
     384:	f0 2d       	mov	r31, r0
     386:	f7 01       	movw	r30, r14
     388:	10 81       	ld	r17, Z
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     392:	1f 70       	andi	r17, 0x0F	; 15
     394:	80 7f       	andi	r24, 0xF0	; 240
     396:	81 2b       	or	r24, r17
     398:	f7 01       	movw	r30, r14
     39a:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     39c:	0f 2e       	mov	r0, r31
     39e:	f7 ef       	ldi	r31, 0xF7	; 247
     3a0:	ef 2e       	mov	r14, r31
     3a2:	f1 2c       	mov	r15, r1
     3a4:	f0 2d       	mov	r31, r0
     3a6:	f7 01       	movw	r30, r14
     3a8:	10 81       	ld	r17, Z
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     3b2:	88 27       	eor	r24, r24
     3b4:	9f 70       	andi	r25, 0x0F	; 15
     3b6:	95 95       	asr	r25
     3b8:	87 95       	ror	r24
     3ba:	95 95       	asr	r25
     3bc:	87 95       	ror	r24
     3be:	95 95       	asr	r25
     3c0:	87 95       	ror	r24
     3c2:	95 95       	asr	r25
     3c4:	87 95       	ror	r24
     3c6:	1f 70       	andi	r17, 0x0F	; 15
     3c8:	81 2b       	or	r24, r17
     3ca:	f7 01       	movw	r30, r14
     3cc:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     3ce:	0f 2e       	mov	r0, r31
     3d0:	fc ef       	ldi	r31, 0xFC	; 252
     3d2:	ef 2e       	mov	r14, r31
     3d4:	f1 2c       	mov	r15, r1
     3d6:	f0 2d       	mov	r31, r0
     3d8:	f7 01       	movw	r30, r14
     3da:	10 81       	ld	r17, Z
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     3e4:	88 27       	eor	r24, r24
     3e6:	90 7f       	andi	r25, 0xF0	; 240
     3e8:	1f 70       	andi	r17, 0x0F	; 15
     3ea:	19 2b       	or	r17, r25
     3ec:	f7 01       	movw	r30, r14
     3ee:	10 83       	st	Z, r17
     3f0:	a5 c0       	rjmp	.+330    	; 0x53c <__stack+0x3d>
		
	} else if(pos==4){
     3f2:	64 30       	cpi	r22, 0x04	; 4
     3f4:	71 05       	cpc	r23, r1
     3f6:	09 f0       	breq	.+2      	; 0x3fa <__EEPROM_REGION_LENGTH__+0x1fa>
     3f8:	4e c0       	rjmp	.+156    	; 0x496 <__DATA_REGION_LENGTH__+0x96>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&getValueArray(i))<<0;
     3fa:	0f 2e       	mov	r0, r31
     3fc:	fe ee       	ldi	r31, 0xEE	; 238
     3fe:	ef 2e       	mov	r14, r31
     400:	f1 2c       	mov	r15, r1
     402:	f0 2d       	mov	r31, r0
     404:	f7 01       	movw	r30, r14
     406:	10 81       	ld	r17, Z
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	9a 81       	ldd	r25, Y+2	; 0x02
     40c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     410:	10 7f       	andi	r17, 0xF0	; 240
     412:	8f 70       	andi	r24, 0x0F	; 15
     414:	81 2b       	or	r24, r17
     416:	f7 01       	movw	r30, r14
     418:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&getValueArray(i))>>4);
     41a:	0f 2e       	mov	r0, r31
     41c:	f3 ef       	ldi	r31, 0xF3	; 243
     41e:	ef 2e       	mov	r14, r31
     420:	f1 2c       	mov	r15, r1
     422:	f0 2d       	mov	r31, r0
     424:	f7 01       	movw	r30, r14
     426:	10 81       	ld	r17, Z
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     430:	80 7f       	andi	r24, 0xF0	; 240
     432:	99 27       	eor	r25, r25
     434:	95 95       	asr	r25
     436:	87 95       	ror	r24
     438:	95 95       	asr	r25
     43a:	87 95       	ror	r24
     43c:	95 95       	asr	r25
     43e:	87 95       	ror	r24
     440:	95 95       	asr	r25
     442:	87 95       	ror	r24
     444:	10 7f       	andi	r17, 0xF0	; 240
     446:	81 2b       	or	r24, r17
     448:	f7 01       	movw	r30, r14
     44a:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&getValueArray(i))>>8);
     44c:	0f 2e       	mov	r0, r31
     44e:	f8 ef       	ldi	r31, 0xF8	; 248
     450:	ef 2e       	mov	r14, r31
     452:	f1 2c       	mov	r15, r1
     454:	f0 2d       	mov	r31, r0
     456:	f7 01       	movw	r30, r14
     458:	10 81       	ld	r17, Z
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     462:	88 27       	eor	r24, r24
     464:	9f 70       	andi	r25, 0x0F	; 15
     466:	10 7f       	andi	r17, 0xF0	; 240
     468:	19 2b       	or	r17, r25
     46a:	f7 01       	movw	r30, r14
     46c:	10 83       	st	Z, r17
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&getValueArray(i))>>12);
     46e:	0f 2e       	mov	r0, r31
     470:	fd ef       	ldi	r31, 0xFD	; 253
     472:	ef 2e       	mov	r14, r31
     474:	f1 2c       	mov	r15, r1
     476:	f0 2d       	mov	r31, r0
     478:	f7 01       	movw	r30, r14
     47a:	10 81       	ld	r17, Z
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	9a 81       	ldd	r25, Y+2	; 0x02
     480:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     484:	10 7f       	andi	r17, 0xF0	; 240
     486:	95 95       	asr	r25
     488:	95 95       	asr	r25
     48a:	95 95       	asr	r25
     48c:	95 95       	asr	r25
     48e:	91 2b       	or	r25, r17
     490:	f7 01       	movw	r30, r14
     492:	90 83       	st	Z, r25
     494:	53 c0       	rjmp	.+166    	; 0x53c <__stack+0x3d>
		
	} else if(pos==5){
     496:	65 30       	cpi	r22, 0x05	; 5
     498:	71 05       	cpc	r23, r1
     49a:	09 f0       	breq	.+2      	; 0x49e <__DATA_REGION_LENGTH__+0x9e>
     49c:	4f c0       	rjmp	.+158    	; 0x53c <__stack+0x3d>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&getValueArray(i))<<4);
     49e:	0f 2e       	mov	r0, r31
     4a0:	fe ee       	ldi	r31, 0xEE	; 238
     4a2:	ef 2e       	mov	r14, r31
     4a4:	f1 2c       	mov	r15, r1
     4a6:	f0 2d       	mov	r31, r0
     4a8:	f7 01       	movw	r30, r14
     4aa:	10 81       	ld	r17, Z
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4b4:	1f 70       	andi	r17, 0x0F	; 15
     4b6:	82 95       	swap	r24
     4b8:	92 95       	swap	r25
     4ba:	90 7f       	andi	r25, 0xF0	; 240
     4bc:	98 27       	eor	r25, r24
     4be:	80 7f       	andi	r24, 0xF0	; 240
     4c0:	98 27       	eor	r25, r24
     4c2:	81 2b       	or	r24, r17
     4c4:	f7 01       	movw	r30, r14
     4c6:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&getValueArray(i))>>0);
     4c8:	0f 2e       	mov	r0, r31
     4ca:	f3 ef       	ldi	r31, 0xF3	; 243
     4cc:	ef 2e       	mov	r14, r31
     4ce:	f1 2c       	mov	r15, r1
     4d0:	f0 2d       	mov	r31, r0
     4d2:	f7 01       	movw	r30, r14
     4d4:	10 81       	ld	r17, Z
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4de:	1f 70       	andi	r17, 0x0F	; 15
     4e0:	80 7f       	andi	r24, 0xF0	; 240
     4e2:	81 2b       	or	r24, r17
     4e4:	f7 01       	movw	r30, r14
     4e6:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&getValueArray(i))>>4);
     4e8:	0f 2e       	mov	r0, r31
     4ea:	f8 ef       	ldi	r31, 0xF8	; 248
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f1 2c       	mov	r15, r1
     4f0:	f0 2d       	mov	r31, r0
     4f2:	f7 01       	movw	r30, r14
     4f4:	10 81       	ld	r17, Z
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     4fe:	88 27       	eor	r24, r24
     500:	9f 70       	andi	r25, 0x0F	; 15
     502:	95 95       	asr	r25
     504:	87 95       	ror	r24
     506:	95 95       	asr	r25
     508:	87 95       	ror	r24
     50a:	95 95       	asr	r25
     50c:	87 95       	ror	r24
     50e:	95 95       	asr	r25
     510:	87 95       	ror	r24
     512:	1f 70       	andi	r17, 0x0F	; 15
     514:	81 2b       	or	r24, r17
     516:	f7 01       	movw	r30, r14
     518:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&getValueArray(i))>>8);
     51a:	0f 2e       	mov	r0, r31
     51c:	fd ef       	ldi	r31, 0xFD	; 253
     51e:	ef 2e       	mov	r14, r31
     520:	f1 2c       	mov	r15, r1
     522:	f0 2d       	mov	r31, r0
     524:	f7 01       	movw	r30, r14
     526:	10 81       	ld	r17, Z
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	0e 94 69 00 	call	0xd2	; 0xd2 <getValueArray>
     530:	88 27       	eor	r24, r24
     532:	90 7f       	andi	r25, 0xF0	; 240
     534:	1f 70       	andi	r17, 0x0F	; 15
     536:	19 2b       	or	r17, r25
     538:	f7 01       	movw	r30, r14
     53a:	10 83       	st	Z, r17
		
	}
	

}
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	08 95       	ret

0000054c <printAt>:

void printAt(long num, int pos) {
     54c:	8f 92       	push	r8
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	4b 01       	movw	r8, r22
     562:	5c 01       	movw	r10, r24
     564:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     566:	24 e6       	ldi	r18, 0x64	; 100
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__divmodsi4>
     572:	0f 2e       	mov	r0, r31
     574:	fa e0       	ldi	r31, 0x0A	; 10
     576:	cf 2e       	mov	r12, r31
     578:	d1 2c       	mov	r13, r1
     57a:	e1 2c       	mov	r14, r1
     57c:	f1 2c       	mov	r15, r1
     57e:	f0 2d       	mov	r31, r0
     580:	a7 01       	movw	r20, r14
     582:	96 01       	movw	r18, r12
     584:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__divmodsi4>
     588:	be 01       	movw	r22, r28
     58a:	80 e3       	ldi	r24, 0x30	; 48
     58c:	82 0f       	add	r24, r18
     58e:	0e 94 92 00 	call	0x124	; 0x124 <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     592:	21 96       	adiw	r28, 0x01	; 1
     594:	c5 01       	movw	r24, r10
     596:	b4 01       	movw	r22, r8
     598:	a7 01       	movw	r20, r14
     59a:	96 01       	movw	r18, r12
     59c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__divmodsi4>
     5a0:	86 2f       	mov	r24, r22
     5a2:	be 01       	movw	r22, r28
     5a4:	80 5d       	subi	r24, 0xD0	; 208
     5a6:	0e 94 92 00 	call	0x124	; 0x124 <writeChar>
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	08 95       	ret

000005c0 <main>:


void main( void )
{

LCD_Init();
     5c0:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
USART_Init ( MYUBRR );
     5c4:	8b e0       	ldi	r24, 0x0B	; 11
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 49 0c 	call	0x1892	; 0x1892 <USART_Init>
int temp;
while (1)
{
    USART_Transmit(5);
     5cc:	85 e0       	ldi	r24, 0x05	; 5
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <USART_Transmit>
    temp =USART_Receive();
     5d4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <USART_Receive>
    printAt(temp,0);
     5d8:	bc 01       	movw	r22, r24
     5da:	99 0f       	add	r25, r25
     5dc:	88 0b       	sbc	r24, r24
     5de:	99 0b       	sbc	r25, r25
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	0e 94 a6 02 	call	0x54c	; 0x54c <printAt>
     5e8:	f1 cf       	rjmp	.-30     	; 0x5cc <main+0xc>

000005ea <dispatch>:

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    return t;
}
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <dispatch+0x6>
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	9a 83       	std	Y+2, r25	; 0x02
     5f6:	89 83       	std	Y+1, r24	; 0x01
     5f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     600:	06 96       	adiw	r24, 0x06	; 6
     602:	0e 94 bc 0c 	call	0x1978	; 0x1978 <setjmp>
     606:	89 2b       	or	r24, r25
     608:	59 f4       	brne	.+22     	; 0x620 <dispatch+0x36>
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	9a 81       	ldd	r25, Y+2	; 0x02
     60e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     612:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	06 96       	adiw	r24, 0x06	; 6
     61c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <longjmp>
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <schedule>:
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <msgQ>
     636:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <msgQ+0x1>
     63a:	30 97       	sbiw	r30, 0x00	; 0
     63c:	61 f1       	breq	.+88     	; 0x696 <schedule+0x6c>
     63e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     642:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     646:	00 97       	sbiw	r24, 0x00	; 0
     648:	31 f1       	breq	.+76     	; 0x696 <schedule+0x6c>
     64a:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     64e:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     652:	aa 81       	ldd	r26, Y+2	; 0x02
     654:	bb 81       	ldd	r27, Y+3	; 0x03
     656:	10 97       	sbiw	r26, 0x00	; 0
     658:	79 f0       	breq	.+30     	; 0x678 <schedule+0x4e>
     65a:	46 81       	ldd	r20, Z+6	; 0x06
     65c:	57 81       	ldd	r21, Z+7	; 0x07
     65e:	60 85       	ldd	r22, Z+8	; 0x08
     660:	71 85       	ldd	r23, Z+9	; 0x09
     662:	16 96       	adiw	r26, 0x06	; 6
     664:	0d 91       	ld	r16, X+
     666:	1d 91       	ld	r17, X+
     668:	2d 91       	ld	r18, X+
     66a:	3c 91       	ld	r19, X
     66c:	19 97       	sbiw	r26, 0x09	; 9
     66e:	40 1b       	sub	r20, r16
     670:	51 0b       	sbc	r21, r17
     672:	62 0b       	sbc	r22, r18
     674:	73 0b       	sbc	r23, r19
     676:	7a f4       	brpl	.+30     	; 0x696 <schedule+0x6c>
     678:	fc 01       	movw	r30, r24
     67a:	20 81       	ld	r18, Z
     67c:	31 81       	ldd	r19, Z+1	; 0x01
     67e:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     682:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     686:	d1 83       	std	Z+1, r29	; 0x01
     688:	c0 83       	st	Z, r28
     68a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     68e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     692:	0e 94 f5 02 	call	0x5ea	; 0x5ea <dispatch>
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	08 95       	ret

000006a0 <__vector_1>:
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	0f 92       	push	r0
     6a8:	11 24       	eor	r1, r1
     6aa:	2f 93       	push	r18
     6ac:	3f 93       	push	r19
     6ae:	4f 93       	push	r20
     6b0:	5f 93       	push	r21
     6b2:	6f 93       	push	r22
     6b4:	7f 93       	push	r23
     6b6:	8f 93       	push	r24
     6b8:	9f 93       	push	r25
     6ba:	af 93       	push	r26
     6bc:	bf 93       	push	r27
     6be:	ef 93       	push	r30
     6c0:	ff 93       	push	r31
     6c2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     6c6:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     6ca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     6ce:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     6d2:	c9 01       	movw	r24, r18
     6d4:	03 2e       	mov	r0, r19
     6d6:	00 0c       	add	r0, r0
     6d8:	aa 0b       	sbc	r26, r26
     6da:	bb 0b       	sbc	r27, r27
     6dc:	dc 01       	movw	r26, r24
     6de:	99 27       	eor	r25, r25
     6e0:	88 27       	eor	r24, r24
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	84 2b       	or	r24, r20
     6e8:	95 2b       	or	r25, r21
     6ea:	a6 2b       	or	r26, r22
     6ec:	b7 2b       	or	r27, r23
     6ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     6f2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     6f6:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     6fa:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     6fe:	b0 9b       	sbis	0x16, 0	; 22
     700:	1b c0       	rjmp	.+54     	; 0x738 <__vector_1+0x98>
     702:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     706:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     70a:	c9 01       	movw	r24, r18
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	09 2e       	mov	r0, r25
     710:	00 0c       	add	r0, r0
     712:	aa 0b       	sbc	r26, r26
     714:	bb 0b       	sbc	r27, r27
     716:	dc 01       	movw	r26, r24
     718:	99 27       	eor	r25, r25
     71a:	88 27       	eor	r24, r24
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	84 2b       	or	r24, r20
     722:	95 2b       	or	r25, r21
     724:	a6 2b       	or	r26, r22
     726:	b7 2b       	or	r27, r23
     728:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     72c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     730:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     734:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     738:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <mtable>
     73c:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <mtable+0x1>
     740:	30 97       	sbiw	r30, 0x00	; 0
     742:	39 f0       	breq	.+14     	; 0x752 <__vector_1+0xb2>
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <otable>
     74c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <otable+0x1>
     750:	09 95       	icall
     752:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
     756:	ff 91       	pop	r31
     758:	ef 91       	pop	r30
     75a:	bf 91       	pop	r27
     75c:	af 91       	pop	r26
     75e:	9f 91       	pop	r25
     760:	8f 91       	pop	r24
     762:	7f 91       	pop	r23
     764:	6f 91       	pop	r22
     766:	5f 91       	pop	r21
     768:	4f 91       	pop	r20
     76a:	3f 91       	pop	r19
     76c:	2f 91       	pop	r18
     76e:	0f 90       	pop	r0
     770:	0f be       	out	0x3f, r0	; 63
     772:	0f 90       	pop	r0
     774:	1f 90       	pop	r1
     776:	18 95       	reti

00000778 <__vector_2>:
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	2f 93       	push	r18
     784:	3f 93       	push	r19
     786:	4f 93       	push	r20
     788:	5f 93       	push	r21
     78a:	6f 93       	push	r22
     78c:	7f 93       	push	r23
     78e:	8f 93       	push	r24
     790:	9f 93       	push	r25
     792:	af 93       	push	r26
     794:	bf 93       	push	r27
     796:	ef 93       	push	r30
     798:	ff 93       	push	r31
     79a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     79e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     7a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     7a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     7aa:	c9 01       	movw	r24, r18
     7ac:	03 2e       	mov	r0, r19
     7ae:	00 0c       	add	r0, r0
     7b0:	aa 0b       	sbc	r26, r26
     7b2:	bb 0b       	sbc	r27, r27
     7b4:	dc 01       	movw	r26, r24
     7b6:	99 27       	eor	r25, r25
     7b8:	88 27       	eor	r24, r24
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	84 2b       	or	r24, r20
     7c0:	95 2b       	or	r25, r21
     7c2:	a6 2b       	or	r26, r22
     7c4:	b7 2b       	or	r27, r23
     7c6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     7ca:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     7ce:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     7d2:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     7d6:	b0 9b       	sbis	0x16, 0	; 22
     7d8:	1b c0       	rjmp	.+54     	; 0x810 <__vector_2+0x98>
     7da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     7de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     7e2:	c9 01       	movw	r24, r18
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	09 2e       	mov	r0, r25
     7e8:	00 0c       	add	r0, r0
     7ea:	aa 0b       	sbc	r26, r26
     7ec:	bb 0b       	sbc	r27, r27
     7ee:	dc 01       	movw	r26, r24
     7f0:	99 27       	eor	r25, r25
     7f2:	88 27       	eor	r24, r24
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	84 2b       	or	r24, r20
     7fa:	95 2b       	or	r25, r21
     7fc:	a6 2b       	or	r26, r22
     7fe:	b7 2b       	or	r27, r23
     800:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     804:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     808:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     80c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     810:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <mtable+0x2>
     814:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <mtable+0x3>
     818:	30 97       	sbiw	r30, 0x00	; 0
     81a:	39 f0       	breq	.+14     	; 0x82a <__vector_2+0xb2>
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <otable+0x2>
     824:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <otable+0x3>
     828:	09 95       	icall
     82a:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
     82e:	ff 91       	pop	r31
     830:	ef 91       	pop	r30
     832:	bf 91       	pop	r27
     834:	af 91       	pop	r26
     836:	9f 91       	pop	r25
     838:	8f 91       	pop	r24
     83a:	7f 91       	pop	r23
     83c:	6f 91       	pop	r22
     83e:	5f 91       	pop	r21
     840:	4f 91       	pop	r20
     842:	3f 91       	pop	r19
     844:	2f 91       	pop	r18
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <__vector_3>:
     850:	1f 92       	push	r1
     852:	0f 92       	push	r0
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	0f 92       	push	r0
     858:	11 24       	eor	r1, r1
     85a:	2f 93       	push	r18
     85c:	3f 93       	push	r19
     85e:	4f 93       	push	r20
     860:	5f 93       	push	r21
     862:	6f 93       	push	r22
     864:	7f 93       	push	r23
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
     86a:	af 93       	push	r26
     86c:	bf 93       	push	r27
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
     872:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     876:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     87a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     87e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     882:	c9 01       	movw	r24, r18
     884:	03 2e       	mov	r0, r19
     886:	00 0c       	add	r0, r0
     888:	aa 0b       	sbc	r26, r26
     88a:	bb 0b       	sbc	r27, r27
     88c:	dc 01       	movw	r26, r24
     88e:	99 27       	eor	r25, r25
     890:	88 27       	eor	r24, r24
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	84 2b       	or	r24, r20
     898:	95 2b       	or	r25, r21
     89a:	a6 2b       	or	r26, r22
     89c:	b7 2b       	or	r27, r23
     89e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     8a2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     8a6:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     8aa:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     8ae:	b0 9b       	sbis	0x16, 0	; 22
     8b0:	1b c0       	rjmp	.+54     	; 0x8e8 <__vector_3+0x98>
     8b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     8b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     8ba:	c9 01       	movw	r24, r18
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	09 2e       	mov	r0, r25
     8c0:	00 0c       	add	r0, r0
     8c2:	aa 0b       	sbc	r26, r26
     8c4:	bb 0b       	sbc	r27, r27
     8c6:	dc 01       	movw	r26, r24
     8c8:	99 27       	eor	r25, r25
     8ca:	88 27       	eor	r24, r24
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	84 2b       	or	r24, r20
     8d2:	95 2b       	or	r25, r21
     8d4:	a6 2b       	or	r26, r22
     8d6:	b7 2b       	or	r27, r23
     8d8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     8dc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     8e0:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     8e4:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     8e8:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <mtable+0x4>
     8ec:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <mtable+0x5>
     8f0:	30 97       	sbiw	r30, 0x00	; 0
     8f2:	39 f0       	breq	.+14     	; 0x902 <__vector_3+0xb2>
     8f4:	62 e0       	ldi	r22, 0x02	; 2
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <otable+0x4>
     8fc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <otable+0x5>
     900:	09 95       	icall
     902:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
     906:	ff 91       	pop	r31
     908:	ef 91       	pop	r30
     90a:	bf 91       	pop	r27
     90c:	af 91       	pop	r26
     90e:	9f 91       	pop	r25
     910:	8f 91       	pop	r24
     912:	7f 91       	pop	r23
     914:	6f 91       	pop	r22
     916:	5f 91       	pop	r21
     918:	4f 91       	pop	r20
     91a:	3f 91       	pop	r19
     91c:	2f 91       	pop	r18
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti

00000928 <__vector_4>:
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	2f 93       	push	r18
     934:	3f 93       	push	r19
     936:	4f 93       	push	r20
     938:	5f 93       	push	r21
     93a:	6f 93       	push	r22
     93c:	7f 93       	push	r23
     93e:	8f 93       	push	r24
     940:	9f 93       	push	r25
     942:	af 93       	push	r26
     944:	bf 93       	push	r27
     946:	ef 93       	push	r30
     948:	ff 93       	push	r31
     94a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     94e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     952:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     956:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     95a:	c9 01       	movw	r24, r18
     95c:	03 2e       	mov	r0, r19
     95e:	00 0c       	add	r0, r0
     960:	aa 0b       	sbc	r26, r26
     962:	bb 0b       	sbc	r27, r27
     964:	dc 01       	movw	r26, r24
     966:	99 27       	eor	r25, r25
     968:	88 27       	eor	r24, r24
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	84 2b       	or	r24, r20
     970:	95 2b       	or	r25, r21
     972:	a6 2b       	or	r26, r22
     974:	b7 2b       	or	r27, r23
     976:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     97a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     97e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     982:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     986:	b0 9b       	sbis	0x16, 0	; 22
     988:	1b c0       	rjmp	.+54     	; 0x9c0 <__vector_4+0x98>
     98a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     98e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     992:	c9 01       	movw	r24, r18
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	09 2e       	mov	r0, r25
     998:	00 0c       	add	r0, r0
     99a:	aa 0b       	sbc	r26, r26
     99c:	bb 0b       	sbc	r27, r27
     99e:	dc 01       	movw	r26, r24
     9a0:	99 27       	eor	r25, r25
     9a2:	88 27       	eor	r24, r24
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	84 2b       	or	r24, r20
     9aa:	95 2b       	or	r25, r21
     9ac:	a6 2b       	or	r26, r22
     9ae:	b7 2b       	or	r27, r23
     9b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     9b4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     9b8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     9bc:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     9c0:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <mtable+0x6>
     9c4:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <mtable+0x7>
     9c8:	30 97       	sbiw	r30, 0x00	; 0
     9ca:	39 f0       	breq	.+14     	; 0x9da <__vector_4+0xb2>
     9cc:	63 e0       	ldi	r22, 0x03	; 3
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <otable+0x6>
     9d4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <otable+0x7>
     9d8:	09 95       	icall
     9da:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	bf 91       	pop	r27
     9e4:	af 91       	pop	r26
     9e6:	9f 91       	pop	r25
     9e8:	8f 91       	pop	r24
     9ea:	7f 91       	pop	r23
     9ec:	6f 91       	pop	r22
     9ee:	5f 91       	pop	r21
     9f0:	4f 91       	pop	r20
     9f2:	3f 91       	pop	r19
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <__vector_5>:
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
     a0a:	2f 93       	push	r18
     a0c:	3f 93       	push	r19
     a0e:	4f 93       	push	r20
     a10:	5f 93       	push	r21
     a12:	6f 93       	push	r22
     a14:	7f 93       	push	r23
     a16:	8f 93       	push	r24
     a18:	9f 93       	push	r25
     a1a:	af 93       	push	r26
     a1c:	bf 93       	push	r27
     a1e:	ef 93       	push	r30
     a20:	ff 93       	push	r31
     a22:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     a26:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     a2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a32:	c9 01       	movw	r24, r18
     a34:	03 2e       	mov	r0, r19
     a36:	00 0c       	add	r0, r0
     a38:	aa 0b       	sbc	r26, r26
     a3a:	bb 0b       	sbc	r27, r27
     a3c:	dc 01       	movw	r26, r24
     a3e:	99 27       	eor	r25, r25
     a40:	88 27       	eor	r24, r24
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	84 2b       	or	r24, r20
     a48:	95 2b       	or	r25, r21
     a4a:	a6 2b       	or	r26, r22
     a4c:	b7 2b       	or	r27, r23
     a4e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     a52:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     a56:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     a5a:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     a5e:	b0 9b       	sbis	0x16, 0	; 22
     a60:	1b c0       	rjmp	.+54     	; 0xa98 <__vector_5+0x98>
     a62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a6a:	c9 01       	movw	r24, r18
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	09 2e       	mov	r0, r25
     a70:	00 0c       	add	r0, r0
     a72:	aa 0b       	sbc	r26, r26
     a74:	bb 0b       	sbc	r27, r27
     a76:	dc 01       	movw	r26, r24
     a78:	99 27       	eor	r25, r25
     a7a:	88 27       	eor	r24, r24
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	84 2b       	or	r24, r20
     a82:	95 2b       	or	r25, r21
     a84:	a6 2b       	or	r26, r22
     a86:	b7 2b       	or	r27, r23
     a88:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     a8c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     a90:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     a94:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     a98:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <mtable+0x8>
     a9c:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <mtable+0x9>
     aa0:	30 97       	sbiw	r30, 0x00	; 0
     aa2:	39 f0       	breq	.+14     	; 0xab2 <__vector_5+0xb2>
     aa4:	64 e0       	ldi	r22, 0x04	; 4
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <otable+0x8>
     aac:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <otable+0x9>
     ab0:	09 95       	icall
     ab2:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
     ab6:	ff 91       	pop	r31
     ab8:	ef 91       	pop	r30
     aba:	bf 91       	pop	r27
     abc:	af 91       	pop	r26
     abe:	9f 91       	pop	r25
     ac0:	8f 91       	pop	r24
     ac2:	7f 91       	pop	r23
     ac4:	6f 91       	pop	r22
     ac6:	5f 91       	pop	r21
     ac8:	4f 91       	pop	r20
     aca:	3f 91       	pop	r19
     acc:	2f 91       	pop	r18
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <__vector_10>:
     ad8:	1f 92       	push	r1
     ada:	0f 92       	push	r0
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	0f 92       	push	r0
     ae0:	11 24       	eor	r1, r1
     ae2:	2f 93       	push	r18
     ae4:	3f 93       	push	r19
     ae6:	4f 93       	push	r20
     ae8:	5f 93       	push	r21
     aea:	6f 93       	push	r22
     aec:	7f 93       	push	r23
     aee:	8f 93       	push	r24
     af0:	9f 93       	push	r25
     af2:	af 93       	push	r26
     af4:	bf 93       	push	r27
     af6:	ef 93       	push	r30
     af8:	ff 93       	push	r31
     afa:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     afe:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     b02:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b06:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b0a:	c9 01       	movw	r24, r18
     b0c:	03 2e       	mov	r0, r19
     b0e:	00 0c       	add	r0, r0
     b10:	aa 0b       	sbc	r26, r26
     b12:	bb 0b       	sbc	r27, r27
     b14:	dc 01       	movw	r26, r24
     b16:	99 27       	eor	r25, r25
     b18:	88 27       	eor	r24, r24
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	84 2b       	or	r24, r20
     b20:	95 2b       	or	r25, r21
     b22:	a6 2b       	or	r26, r22
     b24:	b7 2b       	or	r27, r23
     b26:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     b2a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     b2e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     b32:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     b36:	b0 9b       	sbis	0x16, 0	; 22
     b38:	1b c0       	rjmp	.+54     	; 0xb70 <__vector_10+0x98>
     b3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b42:	c9 01       	movw	r24, r18
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	09 2e       	mov	r0, r25
     b48:	00 0c       	add	r0, r0
     b4a:	aa 0b       	sbc	r26, r26
     b4c:	bb 0b       	sbc	r27, r27
     b4e:	dc 01       	movw	r26, r24
     b50:	99 27       	eor	r25, r25
     b52:	88 27       	eor	r24, r24
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	84 2b       	or	r24, r20
     b5a:	95 2b       	or	r25, r21
     b5c:	a6 2b       	or	r26, r22
     b5e:	b7 2b       	or	r27, r23
     b60:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     b64:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     b68:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     b6c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     b70:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <mtable+0xa>
     b74:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <mtable+0xb>
     b78:	30 97       	sbiw	r30, 0x00	; 0
     b7a:	39 f0       	breq	.+14     	; 0xb8a <__vector_10+0xb2>
     b7c:	65 e0       	ldi	r22, 0x05	; 5
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <otable+0xa>
     b84:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <otable+0xb>
     b88:	09 95       	icall
     b8a:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
     b8e:	ff 91       	pop	r31
     b90:	ef 91       	pop	r30
     b92:	bf 91       	pop	r27
     b94:	af 91       	pop	r26
     b96:	9f 91       	pop	r25
     b98:	8f 91       	pop	r24
     b9a:	7f 91       	pop	r23
     b9c:	6f 91       	pop	r22
     b9e:	5f 91       	pop	r21
     ba0:	4f 91       	pop	r20
     ba2:	3f 91       	pop	r19
     ba4:	2f 91       	pop	r18
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <__vector_11>:
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
     bd2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     bd6:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     bda:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bde:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     be2:	c9 01       	movw	r24, r18
     be4:	03 2e       	mov	r0, r19
     be6:	00 0c       	add	r0, r0
     be8:	aa 0b       	sbc	r26, r26
     bea:	bb 0b       	sbc	r27, r27
     bec:	dc 01       	movw	r26, r24
     bee:	99 27       	eor	r25, r25
     bf0:	88 27       	eor	r24, r24
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	84 2b       	or	r24, r20
     bf8:	95 2b       	or	r25, r21
     bfa:	a6 2b       	or	r26, r22
     bfc:	b7 2b       	or	r27, r23
     bfe:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     c02:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     c06:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     c0a:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     c0e:	b0 9b       	sbis	0x16, 0	; 22
     c10:	1b c0       	rjmp	.+54     	; 0xc48 <__vector_11+0x98>
     c12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c1a:	c9 01       	movw	r24, r18
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	09 2e       	mov	r0, r25
     c20:	00 0c       	add	r0, r0
     c22:	aa 0b       	sbc	r26, r26
     c24:	bb 0b       	sbc	r27, r27
     c26:	dc 01       	movw	r26, r24
     c28:	99 27       	eor	r25, r25
     c2a:	88 27       	eor	r24, r24
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	84 2b       	or	r24, r20
     c32:	95 2b       	or	r25, r21
     c34:	a6 2b       	or	r26, r22
     c36:	b7 2b       	or	r27, r23
     c38:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     c3c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     c40:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     c44:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     c48:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <mtable+0xc>
     c4c:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <mtable+0xd>
     c50:	30 97       	sbiw	r30, 0x00	; 0
     c52:	39 f0       	breq	.+14     	; 0xc62 <__vector_11+0xb2>
     c54:	66 e0       	ldi	r22, 0x06	; 6
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <otable+0xc>
     c5c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <otable+0xd>
     c60:	09 95       	icall
     c62:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
     c66:	ff 91       	pop	r31
     c68:	ef 91       	pop	r30
     c6a:	bf 91       	pop	r27
     c6c:	af 91       	pop	r26
     c6e:	9f 91       	pop	r25
     c70:	8f 91       	pop	r24
     c72:	7f 91       	pop	r23
     c74:	6f 91       	pop	r22
     c76:	5f 91       	pop	r21
     c78:	4f 91       	pop	r20
     c7a:	3f 91       	pop	r19
     c7c:	2f 91       	pop	r18
     c7e:	0f 90       	pop	r0
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	0f 90       	pop	r0
     c84:	1f 90       	pop	r1
     c86:	18 95       	reti

00000c88 <__vector_12>:
     c88:	1f 92       	push	r1
     c8a:	0f 92       	push	r0
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	0f 92       	push	r0
     c90:	11 24       	eor	r1, r1
     c92:	2f 93       	push	r18
     c94:	3f 93       	push	r19
     c96:	4f 93       	push	r20
     c98:	5f 93       	push	r21
     c9a:	6f 93       	push	r22
     c9c:	7f 93       	push	r23
     c9e:	8f 93       	push	r24
     ca0:	9f 93       	push	r25
     ca2:	af 93       	push	r26
     ca4:	bf 93       	push	r27
     ca6:	ef 93       	push	r30
     ca8:	ff 93       	push	r31
     caa:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     cae:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     cb2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cb6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cba:	c9 01       	movw	r24, r18
     cbc:	03 2e       	mov	r0, r19
     cbe:	00 0c       	add	r0, r0
     cc0:	aa 0b       	sbc	r26, r26
     cc2:	bb 0b       	sbc	r27, r27
     cc4:	dc 01       	movw	r26, r24
     cc6:	99 27       	eor	r25, r25
     cc8:	88 27       	eor	r24, r24
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	84 2b       	or	r24, r20
     cd0:	95 2b       	or	r25, r21
     cd2:	a6 2b       	or	r26, r22
     cd4:	b7 2b       	or	r27, r23
     cd6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     cda:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     cde:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     ce2:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     ce6:	b0 9b       	sbis	0x16, 0	; 22
     ce8:	1b c0       	rjmp	.+54     	; 0xd20 <__vector_12+0x98>
     cea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cf2:	c9 01       	movw	r24, r18
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	09 2e       	mov	r0, r25
     cf8:	00 0c       	add	r0, r0
     cfa:	aa 0b       	sbc	r26, r26
     cfc:	bb 0b       	sbc	r27, r27
     cfe:	dc 01       	movw	r26, r24
     d00:	99 27       	eor	r25, r25
     d02:	88 27       	eor	r24, r24
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	84 2b       	or	r24, r20
     d0a:	95 2b       	or	r25, r21
     d0c:	a6 2b       	or	r26, r22
     d0e:	b7 2b       	or	r27, r23
     d10:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     d14:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     d18:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     d1c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     d20:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable+0xe>
     d24:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0xf>
     d28:	30 97       	sbiw	r30, 0x00	; 0
     d2a:	39 f0       	breq	.+14     	; 0xd3a <__vector_12+0xb2>
     d2c:	67 e0       	ldi	r22, 0x07	; 7
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable+0xe>
     d34:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0xf>
     d38:	09 95       	icall
     d3a:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
     d3e:	ff 91       	pop	r31
     d40:	ef 91       	pop	r30
     d42:	bf 91       	pop	r27
     d44:	af 91       	pop	r26
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	7f 91       	pop	r23
     d4c:	6f 91       	pop	r22
     d4e:	5f 91       	pop	r21
     d50:	4f 91       	pop	r20
     d52:	3f 91       	pop	r19
     d54:	2f 91       	pop	r18
     d56:	0f 90       	pop	r0
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	0f 90       	pop	r0
     d5c:	1f 90       	pop	r1
     d5e:	18 95       	reti

00000d60 <__vector_13>:
     d60:	1f 92       	push	r1
     d62:	0f 92       	push	r0
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	0f 92       	push	r0
     d68:	11 24       	eor	r1, r1
     d6a:	2f 93       	push	r18
     d6c:	3f 93       	push	r19
     d6e:	4f 93       	push	r20
     d70:	5f 93       	push	r21
     d72:	6f 93       	push	r22
     d74:	7f 93       	push	r23
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
     d82:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     d86:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     d8a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d8e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d92:	c9 01       	movw	r24, r18
     d94:	03 2e       	mov	r0, r19
     d96:	00 0c       	add	r0, r0
     d98:	aa 0b       	sbc	r26, r26
     d9a:	bb 0b       	sbc	r27, r27
     d9c:	dc 01       	movw	r26, r24
     d9e:	99 27       	eor	r25, r25
     da0:	88 27       	eor	r24, r24
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	84 2b       	or	r24, r20
     da8:	95 2b       	or	r25, r21
     daa:	a6 2b       	or	r26, r22
     dac:	b7 2b       	or	r27, r23
     dae:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     db2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     db6:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     dba:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     dbe:	b0 9b       	sbis	0x16, 0	; 22
     dc0:	1b c0       	rjmp	.+54     	; 0xdf8 <__vector_13+0x98>
     dc2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dc6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dca:	c9 01       	movw	r24, r18
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	09 2e       	mov	r0, r25
     dd0:	00 0c       	add	r0, r0
     dd2:	aa 0b       	sbc	r26, r26
     dd4:	bb 0b       	sbc	r27, r27
     dd6:	dc 01       	movw	r26, r24
     dd8:	99 27       	eor	r25, r25
     dda:	88 27       	eor	r24, r24
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	84 2b       	or	r24, r20
     de2:	95 2b       	or	r25, r21
     de4:	a6 2b       	or	r26, r22
     de6:	b7 2b       	or	r27, r23
     de8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     dec:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     df0:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     df4:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     df8:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0x10>
     dfc:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0x11>
     e00:	30 97       	sbiw	r30, 0x00	; 0
     e02:	39 f0       	breq	.+14     	; 0xe12 <__vector_13+0xb2>
     e04:	68 e0       	ldi	r22, 0x08	; 8
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0x10>
     e0c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0x11>
     e10:	09 95       	icall
     e12:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <__vector_14>:
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
     e5a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     e5e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     e62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e6a:	c9 01       	movw	r24, r18
     e6c:	03 2e       	mov	r0, r19
     e6e:	00 0c       	add	r0, r0
     e70:	aa 0b       	sbc	r26, r26
     e72:	bb 0b       	sbc	r27, r27
     e74:	dc 01       	movw	r26, r24
     e76:	99 27       	eor	r25, r25
     e78:	88 27       	eor	r24, r24
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	84 2b       	or	r24, r20
     e80:	95 2b       	or	r25, r21
     e82:	a6 2b       	or	r26, r22
     e84:	b7 2b       	or	r27, r23
     e86:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     e8a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     e8e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     e92:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     e96:	b0 9b       	sbis	0x16, 0	; 22
     e98:	1b c0       	rjmp	.+54     	; 0xed0 <__vector_14+0x98>
     e9a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e9e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ea2:	c9 01       	movw	r24, r18
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	09 2e       	mov	r0, r25
     ea8:	00 0c       	add	r0, r0
     eaa:	aa 0b       	sbc	r26, r26
     eac:	bb 0b       	sbc	r27, r27
     eae:	dc 01       	movw	r26, r24
     eb0:	99 27       	eor	r25, r25
     eb2:	88 27       	eor	r24, r24
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	84 2b       	or	r24, r20
     eba:	95 2b       	or	r25, r21
     ebc:	a6 2b       	or	r26, r22
     ebe:	b7 2b       	or	r27, r23
     ec0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     ec4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     ec8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     ecc:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     ed0:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0x12>
     ed4:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0x13>
     ed8:	30 97       	sbiw	r30, 0x00	; 0
     eda:	39 f0       	breq	.+14     	; 0xeea <__vector_14+0xb2>
     edc:	69 e0       	ldi	r22, 0x09	; 9
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0x12>
     ee4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0x13>
     ee8:	09 95       	icall
     eea:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
     eee:	ff 91       	pop	r31
     ef0:	ef 91       	pop	r30
     ef2:	bf 91       	pop	r27
     ef4:	af 91       	pop	r26
     ef6:	9f 91       	pop	r25
     ef8:	8f 91       	pop	r24
     efa:	7f 91       	pop	r23
     efc:	6f 91       	pop	r22
     efe:	5f 91       	pop	r21
     f00:	4f 91       	pop	r20
     f02:	3f 91       	pop	r19
     f04:	2f 91       	pop	r18
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <__vector_15>:
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	2f 93       	push	r18
     f1c:	3f 93       	push	r19
     f1e:	4f 93       	push	r20
     f20:	5f 93       	push	r21
     f22:	6f 93       	push	r22
     f24:	7f 93       	push	r23
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	af 93       	push	r26
     f2c:	bf 93       	push	r27
     f2e:	ef 93       	push	r30
     f30:	ff 93       	push	r31
     f32:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     f36:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     f3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f42:	c9 01       	movw	r24, r18
     f44:	03 2e       	mov	r0, r19
     f46:	00 0c       	add	r0, r0
     f48:	aa 0b       	sbc	r26, r26
     f4a:	bb 0b       	sbc	r27, r27
     f4c:	dc 01       	movw	r26, r24
     f4e:	99 27       	eor	r25, r25
     f50:	88 27       	eor	r24, r24
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	84 2b       	or	r24, r20
     f58:	95 2b       	or	r25, r21
     f5a:	a6 2b       	or	r26, r22
     f5c:	b7 2b       	or	r27, r23
     f5e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     f62:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     f66:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     f6a:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     f6e:	b0 9b       	sbis	0x16, 0	; 22
     f70:	1b c0       	rjmp	.+54     	; 0xfa8 <__vector_15+0x98>
     f72:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f76:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f7a:	c9 01       	movw	r24, r18
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	09 2e       	mov	r0, r25
     f80:	00 0c       	add	r0, r0
     f82:	aa 0b       	sbc	r26, r26
     f84:	bb 0b       	sbc	r27, r27
     f86:	dc 01       	movw	r26, r24
     f88:	99 27       	eor	r25, r25
     f8a:	88 27       	eor	r24, r24
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	84 2b       	or	r24, r20
     f92:	95 2b       	or	r25, r21
     f94:	a6 2b       	or	r26, r22
     f96:	b7 2b       	or	r27, r23
     f98:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     f9c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     fa0:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     fa4:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     fa8:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0x14>
     fac:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0x15>
     fb0:	30 97       	sbiw	r30, 0x00	; 0
     fb2:	39 f0       	breq	.+14     	; 0xfc2 <__vector_15+0xb2>
     fb4:	6a e0       	ldi	r22, 0x0A	; 10
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0x14>
     fbc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0x15>
     fc0:	09 95       	icall
     fc2:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <__vector_16>:
     fe8:	1f 92       	push	r1
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	0f 92       	push	r0
     ff0:	11 24       	eor	r1, r1
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
    100a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    100e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    1012:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1016:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    101a:	c9 01       	movw	r24, r18
    101c:	03 2e       	mov	r0, r19
    101e:	00 0c       	add	r0, r0
    1020:	aa 0b       	sbc	r26, r26
    1022:	bb 0b       	sbc	r27, r27
    1024:	dc 01       	movw	r26, r24
    1026:	99 27       	eor	r25, r25
    1028:	88 27       	eor	r24, r24
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	84 2b       	or	r24, r20
    1030:	95 2b       	or	r25, r21
    1032:	a6 2b       	or	r26, r22
    1034:	b7 2b       	or	r27, r23
    1036:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    103a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    103e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1042:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1046:	b0 9b       	sbis	0x16, 0	; 22
    1048:	1b c0       	rjmp	.+54     	; 0x1080 <__vector_16+0x98>
    104a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    104e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1052:	c9 01       	movw	r24, r18
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	09 2e       	mov	r0, r25
    1058:	00 0c       	add	r0, r0
    105a:	aa 0b       	sbc	r26, r26
    105c:	bb 0b       	sbc	r27, r27
    105e:	dc 01       	movw	r26, r24
    1060:	99 27       	eor	r25, r25
    1062:	88 27       	eor	r24, r24
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	84 2b       	or	r24, r20
    106a:	95 2b       	or	r25, r21
    106c:	a6 2b       	or	r26, r22
    106e:	b7 2b       	or	r27, r23
    1070:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1074:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1078:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    107c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1080:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable+0x16>
    1084:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x17>
    1088:	30 97       	sbiw	r30, 0x00	; 0
    108a:	39 f0       	breq	.+14     	; 0x109a <__vector_16+0xb2>
    108c:	6b e0       	ldi	r22, 0x0B	; 11
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable+0x16>
    1094:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x17>
    1098:	09 95       	icall
    109a:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti

000010c0 <__vector_17>:
    10c0:	1f 92       	push	r1
    10c2:	0f 92       	push	r0
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	0f 92       	push	r0
    10c8:	11 24       	eor	r1, r1
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31
    10e2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    10e6:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    10ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10f2:	c9 01       	movw	r24, r18
    10f4:	03 2e       	mov	r0, r19
    10f6:	00 0c       	add	r0, r0
    10f8:	aa 0b       	sbc	r26, r26
    10fa:	bb 0b       	sbc	r27, r27
    10fc:	dc 01       	movw	r26, r24
    10fe:	99 27       	eor	r25, r25
    1100:	88 27       	eor	r24, r24
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	84 2b       	or	r24, r20
    1108:	95 2b       	or	r25, r21
    110a:	a6 2b       	or	r26, r22
    110c:	b7 2b       	or	r27, r23
    110e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1112:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1116:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    111a:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    111e:	b0 9b       	sbis	0x16, 0	; 22
    1120:	1b c0       	rjmp	.+54     	; 0x1158 <__vector_17+0x98>
    1122:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1126:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    112a:	c9 01       	movw	r24, r18
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	09 2e       	mov	r0, r25
    1130:	00 0c       	add	r0, r0
    1132:	aa 0b       	sbc	r26, r26
    1134:	bb 0b       	sbc	r27, r27
    1136:	dc 01       	movw	r26, r24
    1138:	99 27       	eor	r25, r25
    113a:	88 27       	eor	r24, r24
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	84 2b       	or	r24, r20
    1142:	95 2b       	or	r25, r21
    1144:	a6 2b       	or	r26, r22
    1146:	b7 2b       	or	r27, r23
    1148:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    114c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1150:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1154:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1158:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x18>
    115c:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x19>
    1160:	30 97       	sbiw	r30, 0x00	; 0
    1162:	39 f0       	breq	.+14     	; 0x1172 <__vector_17+0xb2>
    1164:	6c e0       	ldi	r22, 0x0C	; 12
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x18>
    116c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x19>
    1170:	09 95       	icall
    1172:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_18>:
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	4f 93       	push	r20
    11a8:	5f 93       	push	r21
    11aa:	6f 93       	push	r22
    11ac:	7f 93       	push	r23
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	af 93       	push	r26
    11b4:	bf 93       	push	r27
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
    11ba:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    11be:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    11c2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11c6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ca:	c9 01       	movw	r24, r18
    11cc:	03 2e       	mov	r0, r19
    11ce:	00 0c       	add	r0, r0
    11d0:	aa 0b       	sbc	r26, r26
    11d2:	bb 0b       	sbc	r27, r27
    11d4:	dc 01       	movw	r26, r24
    11d6:	99 27       	eor	r25, r25
    11d8:	88 27       	eor	r24, r24
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	84 2b       	or	r24, r20
    11e0:	95 2b       	or	r25, r21
    11e2:	a6 2b       	or	r26, r22
    11e4:	b7 2b       	or	r27, r23
    11e6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    11ea:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    11ee:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    11f2:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    11f6:	b0 9b       	sbis	0x16, 0	; 22
    11f8:	1b c0       	rjmp	.+54     	; 0x1230 <__vector_18+0x98>
    11fa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11fe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1202:	c9 01       	movw	r24, r18
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	09 2e       	mov	r0, r25
    1208:	00 0c       	add	r0, r0
    120a:	aa 0b       	sbc	r26, r26
    120c:	bb 0b       	sbc	r27, r27
    120e:	dc 01       	movw	r26, r24
    1210:	99 27       	eor	r25, r25
    1212:	88 27       	eor	r24, r24
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	84 2b       	or	r24, r20
    121a:	95 2b       	or	r25, r21
    121c:	a6 2b       	or	r26, r22
    121e:	b7 2b       	or	r27, r23
    1220:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1224:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1228:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    122c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1230:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x1a>
    1234:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x1b>
    1238:	30 97       	sbiw	r30, 0x00	; 0
    123a:	39 f0       	breq	.+14     	; 0x124a <__vector_18+0xb2>
    123c:	6d e0       	ldi	r22, 0x0D	; 13
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x1a>
    1244:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x1b>
    1248:	09 95       	icall
    124a:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
    124e:	ff 91       	pop	r31
    1250:	ef 91       	pop	r30
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	18 95       	reti

00001270 <__vector_19>:
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	2f 93       	push	r18
    127c:	3f 93       	push	r19
    127e:	4f 93       	push	r20
    1280:	5f 93       	push	r21
    1282:	6f 93       	push	r22
    1284:	7f 93       	push	r23
    1286:	8f 93       	push	r24
    1288:	9f 93       	push	r25
    128a:	af 93       	push	r26
    128c:	bf 93       	push	r27
    128e:	ef 93       	push	r30
    1290:	ff 93       	push	r31
    1292:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    1296:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    129a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    129e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12a2:	c9 01       	movw	r24, r18
    12a4:	03 2e       	mov	r0, r19
    12a6:	00 0c       	add	r0, r0
    12a8:	aa 0b       	sbc	r26, r26
    12aa:	bb 0b       	sbc	r27, r27
    12ac:	dc 01       	movw	r26, r24
    12ae:	99 27       	eor	r25, r25
    12b0:	88 27       	eor	r24, r24
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	84 2b       	or	r24, r20
    12b8:	95 2b       	or	r25, r21
    12ba:	a6 2b       	or	r26, r22
    12bc:	b7 2b       	or	r27, r23
    12be:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    12c2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    12c6:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    12ca:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    12ce:	b0 9b       	sbis	0x16, 0	; 22
    12d0:	1b c0       	rjmp	.+54     	; 0x1308 <__vector_19+0x98>
    12d2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12d6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12da:	c9 01       	movw	r24, r18
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	09 2e       	mov	r0, r25
    12e0:	00 0c       	add	r0, r0
    12e2:	aa 0b       	sbc	r26, r26
    12e4:	bb 0b       	sbc	r27, r27
    12e6:	dc 01       	movw	r26, r24
    12e8:	99 27       	eor	r25, r25
    12ea:	88 27       	eor	r24, r24
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	84 2b       	or	r24, r20
    12f2:	95 2b       	or	r25, r21
    12f4:	a6 2b       	or	r26, r22
    12f6:	b7 2b       	or	r27, r23
    12f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    12fc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1300:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1304:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1308:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x1c>
    130c:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x1d>
    1310:	30 97       	sbiw	r30, 0x00	; 0
    1312:	39 f0       	breq	.+14     	; 0x1322 <__vector_19+0xb2>
    1314:	6e e0       	ldi	r22, 0x0E	; 14
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x1c>
    131c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x1d>
    1320:	09 95       	icall
    1322:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
    1326:	ff 91       	pop	r31
    1328:	ef 91       	pop	r30
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	7f 91       	pop	r23
    1334:	6f 91       	pop	r22
    1336:	5f 91       	pop	r21
    1338:	4f 91       	pop	r20
    133a:	3f 91       	pop	r19
    133c:	2f 91       	pop	r18
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	0f 90       	pop	r0
    1344:	1f 90       	pop	r1
    1346:	18 95       	reti

00001348 <__vector_20>:
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
    136a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    136e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    1372:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1376:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    137a:	c9 01       	movw	r24, r18
    137c:	03 2e       	mov	r0, r19
    137e:	00 0c       	add	r0, r0
    1380:	aa 0b       	sbc	r26, r26
    1382:	bb 0b       	sbc	r27, r27
    1384:	dc 01       	movw	r26, r24
    1386:	99 27       	eor	r25, r25
    1388:	88 27       	eor	r24, r24
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	84 2b       	or	r24, r20
    1390:	95 2b       	or	r25, r21
    1392:	a6 2b       	or	r26, r22
    1394:	b7 2b       	or	r27, r23
    1396:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    139a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    139e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    13a2:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    13a6:	b0 9b       	sbis	0x16, 0	; 22
    13a8:	1b c0       	rjmp	.+54     	; 0x13e0 <__vector_20+0x98>
    13aa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13ae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13b2:	c9 01       	movw	r24, r18
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	09 2e       	mov	r0, r25
    13b8:	00 0c       	add	r0, r0
    13ba:	aa 0b       	sbc	r26, r26
    13bc:	bb 0b       	sbc	r27, r27
    13be:	dc 01       	movw	r26, r24
    13c0:	99 27       	eor	r25, r25
    13c2:	88 27       	eor	r24, r24
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	84 2b       	or	r24, r20
    13ca:	95 2b       	or	r25, r21
    13cc:	a6 2b       	or	r26, r22
    13ce:	b7 2b       	or	r27, r23
    13d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    13d4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    13d8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    13dc:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    13e0:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x1e>
    13e4:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x1f>
    13e8:	30 97       	sbiw	r30, 0x00	; 0
    13ea:	39 f0       	breq	.+14     	; 0x13fa <__vector_20+0xb2>
    13ec:	6f e0       	ldi	r22, 0x0F	; 15
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x1e>
    13f4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x1f>
    13f8:	09 95       	icall
    13fa:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
    13fe:	ff 91       	pop	r31
    1400:	ef 91       	pop	r30
    1402:	bf 91       	pop	r27
    1404:	af 91       	pop	r26
    1406:	9f 91       	pop	r25
    1408:	8f 91       	pop	r24
    140a:	7f 91       	pop	r23
    140c:	6f 91       	pop	r22
    140e:	5f 91       	pop	r21
    1410:	4f 91       	pop	r20
    1412:	3f 91       	pop	r19
    1414:	2f 91       	pop	r18
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	0f 90       	pop	r0
    141c:	1f 90       	pop	r1
    141e:	18 95       	reti

00001420 <__vector_21>:
    1420:	1f 92       	push	r1
    1422:	0f 92       	push	r0
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	0f 92       	push	r0
    1428:	11 24       	eor	r1, r1
    142a:	2f 93       	push	r18
    142c:	3f 93       	push	r19
    142e:	4f 93       	push	r20
    1430:	5f 93       	push	r21
    1432:	6f 93       	push	r22
    1434:	7f 93       	push	r23
    1436:	8f 93       	push	r24
    1438:	9f 93       	push	r25
    143a:	af 93       	push	r26
    143c:	bf 93       	push	r27
    143e:	ef 93       	push	r30
    1440:	ff 93       	push	r31
    1442:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    1446:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    144a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    144e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1452:	c9 01       	movw	r24, r18
    1454:	03 2e       	mov	r0, r19
    1456:	00 0c       	add	r0, r0
    1458:	aa 0b       	sbc	r26, r26
    145a:	bb 0b       	sbc	r27, r27
    145c:	dc 01       	movw	r26, r24
    145e:	99 27       	eor	r25, r25
    1460:	88 27       	eor	r24, r24
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	84 2b       	or	r24, r20
    1468:	95 2b       	or	r25, r21
    146a:	a6 2b       	or	r26, r22
    146c:	b7 2b       	or	r27, r23
    146e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1472:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1476:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    147a:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    147e:	b0 9b       	sbis	0x16, 0	; 22
    1480:	1b c0       	rjmp	.+54     	; 0x14b8 <__vector_21+0x98>
    1482:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1486:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    148a:	c9 01       	movw	r24, r18
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	09 2e       	mov	r0, r25
    1490:	00 0c       	add	r0, r0
    1492:	aa 0b       	sbc	r26, r26
    1494:	bb 0b       	sbc	r27, r27
    1496:	dc 01       	movw	r26, r24
    1498:	99 27       	eor	r25, r25
    149a:	88 27       	eor	r24, r24
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	84 2b       	or	r24, r20
    14a2:	95 2b       	or	r25, r21
    14a4:	a6 2b       	or	r26, r22
    14a6:	b7 2b       	or	r27, r23
    14a8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    14ac:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    14b0:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    14b4:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    14b8:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x20>
    14bc:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x21>
    14c0:	30 97       	sbiw	r30, 0x00	; 0
    14c2:	39 f0       	breq	.+14     	; 0x14d2 <__vector_21+0xb2>
    14c4:	60 e1       	ldi	r22, 0x10	; 16
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x20>
    14cc:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x21>
    14d0:	09 95       	icall
    14d2:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	0f 90       	pop	r0
    14f4:	1f 90       	pop	r1
    14f6:	18 95       	reti

000014f8 <__vector_22>:
    14f8:	1f 92       	push	r1
    14fa:	0f 92       	push	r0
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	0f 92       	push	r0
    1500:	11 24       	eor	r1, r1
    1502:	2f 93       	push	r18
    1504:	3f 93       	push	r19
    1506:	4f 93       	push	r20
    1508:	5f 93       	push	r21
    150a:	6f 93       	push	r22
    150c:	7f 93       	push	r23
    150e:	8f 93       	push	r24
    1510:	9f 93       	push	r25
    1512:	af 93       	push	r26
    1514:	bf 93       	push	r27
    1516:	ef 93       	push	r30
    1518:	ff 93       	push	r31
    151a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    151e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    1522:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1526:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    152a:	c9 01       	movw	r24, r18
    152c:	03 2e       	mov	r0, r19
    152e:	00 0c       	add	r0, r0
    1530:	aa 0b       	sbc	r26, r26
    1532:	bb 0b       	sbc	r27, r27
    1534:	dc 01       	movw	r26, r24
    1536:	99 27       	eor	r25, r25
    1538:	88 27       	eor	r24, r24
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	84 2b       	or	r24, r20
    1540:	95 2b       	or	r25, r21
    1542:	a6 2b       	or	r26, r22
    1544:	b7 2b       	or	r27, r23
    1546:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    154a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    154e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1552:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1556:	b0 9b       	sbis	0x16, 0	; 22
    1558:	1b c0       	rjmp	.+54     	; 0x1590 <__vector_22+0x98>
    155a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    155e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1562:	c9 01       	movw	r24, r18
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	09 2e       	mov	r0, r25
    1568:	00 0c       	add	r0, r0
    156a:	aa 0b       	sbc	r26, r26
    156c:	bb 0b       	sbc	r27, r27
    156e:	dc 01       	movw	r26, r24
    1570:	99 27       	eor	r25, r25
    1572:	88 27       	eor	r24, r24
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	84 2b       	or	r24, r20
    157a:	95 2b       	or	r25, r21
    157c:	a6 2b       	or	r26, r22
    157e:	b7 2b       	or	r27, r23
    1580:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1584:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1588:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    158c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1590:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x22>
    1594:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x23>
    1598:	30 97       	sbiw	r30, 0x00	; 0
    159a:	39 f0       	breq	.+14     	; 0x15aa <__vector_22+0xb2>
    159c:	61 e1       	ldi	r22, 0x11	; 17
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x22>
    15a4:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x23>
    15a8:	09 95       	icall
    15aa:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
    15ae:	ff 91       	pop	r31
    15b0:	ef 91       	pop	r30
    15b2:	bf 91       	pop	r27
    15b4:	af 91       	pop	r26
    15b6:	9f 91       	pop	r25
    15b8:	8f 91       	pop	r24
    15ba:	7f 91       	pop	r23
    15bc:	6f 91       	pop	r22
    15be:	5f 91       	pop	r21
    15c0:	4f 91       	pop	r20
    15c2:	3f 91       	pop	r19
    15c4:	2f 91       	pop	r18
    15c6:	0f 90       	pop	r0
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	0f 90       	pop	r0
    15cc:	1f 90       	pop	r1
    15ce:	18 95       	reti

000015d0 <enqueueByDeadline>:
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	7b 01       	movw	r14, r22
    15de:	eb 01       	movw	r28, r22
    15e0:	a8 81       	ld	r26, Y
    15e2:	b9 81       	ldd	r27, Y+1	; 0x01
    15e4:	10 97       	sbiw	r26, 0x00	; 0
    15e6:	61 f1       	breq	.+88     	; 0x1640 <enqueueByDeadline+0x70>
    15e8:	fc 01       	movw	r30, r24
    15ea:	06 81       	ldd	r16, Z+6	; 0x06
    15ec:	17 81       	ldd	r17, Z+7	; 0x07
    15ee:	20 85       	ldd	r18, Z+8	; 0x08
    15f0:	31 85       	ldd	r19, Z+9	; 0x09
    15f2:	16 96       	adiw	r26, 0x06	; 6
    15f4:	4d 91       	ld	r20, X+
    15f6:	5d 91       	ld	r21, X+
    15f8:	6d 91       	ld	r22, X+
    15fa:	7c 91       	ld	r23, X
    15fc:	19 97       	sbiw	r26, 0x09	; 9
    15fe:	04 17       	cp	r16, r20
    1600:	15 07       	cpc	r17, r21
    1602:	26 07       	cpc	r18, r22
    1604:	37 07       	cpc	r19, r23
    1606:	14 f4       	brge	.+4      	; 0x160c <enqueueByDeadline+0x3c>
    1608:	1b c0       	rjmp	.+54     	; 0x1640 <enqueueByDeadline+0x70>
    160a:	df 01       	movw	r26, r30
    160c:	ed 91       	ld	r30, X+
    160e:	fc 91       	ld	r31, X
    1610:	11 97       	sbiw	r26, 0x01	; 1
    1612:	30 97       	sbiw	r30, 0x00	; 0
    1614:	49 f0       	breq	.+18     	; 0x1628 <enqueueByDeadline+0x58>
    1616:	46 81       	ldd	r20, Z+6	; 0x06
    1618:	57 81       	ldd	r21, Z+7	; 0x07
    161a:	60 85       	ldd	r22, Z+8	; 0x08
    161c:	71 85       	ldd	r23, Z+9	; 0x09
    161e:	04 17       	cp	r16, r20
    1620:	15 07       	cpc	r17, r21
    1622:	26 07       	cpc	r18, r22
    1624:	37 07       	cpc	r19, r23
    1626:	8c f7       	brge	.-30     	; 0x160a <enqueueByDeadline+0x3a>
    1628:	ec 01       	movw	r28, r24
    162a:	f9 83       	std	Y+1, r31	; 0x01
    162c:	e8 83       	st	Y, r30
    162e:	10 97       	sbiw	r26, 0x00	; 0
    1630:	21 f4       	brne	.+8      	; 0x163a <enqueueByDeadline+0x6a>
    1632:	f7 01       	movw	r30, r14
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
    1638:	07 c0       	rjmp	.+14     	; 0x1648 <enqueueByDeadline+0x78>
    163a:	8d 93       	st	X+, r24
    163c:	9c 93       	st	X, r25
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <enqueueByDeadline+0x78>
    1640:	ec 01       	movw	r28, r24
    1642:	b9 83       	std	Y+1, r27	; 0x01
    1644:	a8 83       	st	Y, r26
    1646:	f5 cf       	rjmp	.-22     	; 0x1632 <enqueueByDeadline+0x62>
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	08 95       	ret

00001656 <dequeue>:
    1656:	dc 01       	movw	r26, r24
    1658:	ed 91       	ld	r30, X+
    165a:	fc 91       	ld	r31, X
    165c:	11 97       	sbiw	r26, 0x01	; 1
    165e:	30 97       	sbiw	r30, 0x00	; 0
    1660:	59 f4       	brne	.+22     	; 0x1678 <dequeue+0x22>
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1668:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    166c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	83 bf       	out	0x33, r24	; 51
    1674:	88 95       	sleep
    1676:	fd cf       	rjmp	.-6      	; 0x1672 <dequeue+0x1c>
    1678:	20 81       	ld	r18, Z
    167a:	31 81       	ldd	r19, Z+1	; 0x01
    167c:	2d 93       	st	X+, r18
    167e:	3c 93       	st	X, r19
    1680:	cf 01       	movw	r24, r30
    1682:	08 95       	ret

00001684 <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
    1684:	1f 92       	push	r1
    1686:	0f 92       	push	r0
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	2f 93       	push	r18
    1690:	3f 93       	push	r19
    1692:	4f 93       	push	r20
    1694:	5f 93       	push	r21
    1696:	6f 93       	push	r22
    1698:	7f 93       	push	r23
    169a:	8f 93       	push	r24
    169c:	9f 93       	push	r25
    169e:	ef 93       	push	r30
    16a0:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
    16a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
    16a6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
    16b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
    TIMERSET(timerQ);
    16b4:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <timerQ>
    16b8:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <timerQ+0x1>
    16bc:	30 97       	sbiw	r30, 0x00	; 0
    16be:	01 f1       	breq	.+64     	; 0x1700 <__vector_9+0x7c>
    16c0:	42 81       	ldd	r20, Z+2	; 0x02
    16c2:	53 81       	ldd	r21, Z+3	; 0x03
    16c4:	64 81       	ldd	r22, Z+4	; 0x04
    16c6:	75 81       	ldd	r23, Z+5	; 0x05
    16c8:	86 17       	cp	r24, r22
    16ca:	97 07       	cpc	r25, r23
    16cc:	c9 f4       	brne	.+50     	; 0x1700 <__vector_9+0x7c>
    16ce:	ca 01       	movw	r24, r20
    16d0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16d4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16d8:	42 1b       	sub	r20, r18
    16da:	53 0b       	sbc	r21, r19
    16dc:	41 30       	cpi	r20, 0x01	; 1
    16de:	51 05       	cpc	r21, r1
    16e0:	29 f4       	brne	.+10     	; 0x16ec <__vector_9+0x68>
    16e2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16e6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    16f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    16f4:	ef e6       	ldi	r30, 0x6F	; 111
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	82 60       	ori	r24, 0x02	; 2
    16fc:	80 83       	st	Z, r24
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <__vector_9+0x86>
    1700:	ef e6       	ldi	r30, 0x6F	; 111
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	8d 7f       	andi	r24, 0xFD	; 253
    1708:	80 83       	st	Z, r24
}
    170a:	ff 91       	pop	r31
    170c:	ef 91       	pop	r30
    170e:	9f 91       	pop	r25
    1710:	8f 91       	pop	r24
    1712:	7f 91       	pop	r23
    1714:	6f 91       	pop	r22
    1716:	5f 91       	pop	r21
    1718:	4f 91       	pop	r20
    171a:	3f 91       	pop	r19
    171c:	2f 91       	pop	r18
    171e:	0f 90       	pop	r0
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	0f 90       	pop	r0
    1724:	1f 90       	pop	r1
    1726:	18 95       	reti

00001728 <__vector_7>:

TIMER_COMPARE_INTERRUPT {
    1728:	1f 92       	push	r1
    172a:	0f 92       	push	r0
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	0f 92       	push	r0
    1730:	11 24       	eor	r1, r1
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	2f 93       	push	r18
    173c:	3f 93       	push	r19
    173e:	4f 93       	push	r20
    1740:	5f 93       	push	r21
    1742:	6f 93       	push	r22
    1744:	7f 93       	push	r23
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	ef 93       	push	r30
    1750:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    1752:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <__data_end>
    1756:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <__data_end+0x1>
    175a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    175e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1762:	b0 99       	sbic	0x16, 0	; 22
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <__vector_7+0x5c>
    1766:	0d 2c       	mov	r0, r13
    1768:	00 0c       	add	r0, r0
    176a:	ee 08       	sbc	r14, r14
    176c:	ff 08       	sbc	r15, r15
    176e:	d6 01       	movw	r26, r12
    1770:	99 27       	eor	r25, r25
    1772:	88 27       	eor	r24, r24
    1774:	69 01       	movw	r12, r18
    1776:	e1 2c       	mov	r14, r1
    1778:	f1 2c       	mov	r15, r1
    177a:	c8 2a       	or	r12, r24
    177c:	d9 2a       	or	r13, r25
    177e:	ea 2a       	or	r14, r26
    1780:	fb 2a       	or	r15, r27
    1782:	15 c0       	rjmp	.+42     	; 0x17ae <__vector_7+0x86>
    1784:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1788:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    178c:	8f ef       	ldi	r24, 0xFF	; 255
    178e:	c8 1a       	sub	r12, r24
    1790:	d8 0a       	sbc	r13, r24
    1792:	0d 2c       	mov	r0, r13
    1794:	00 0c       	add	r0, r0
    1796:	ee 08       	sbc	r14, r14
    1798:	ff 08       	sbc	r15, r15
    179a:	d6 01       	movw	r26, r12
    179c:	99 27       	eor	r25, r25
    179e:	88 27       	eor	r24, r24
    17a0:	69 01       	movw	r12, r18
    17a2:	e1 2c       	mov	r14, r1
    17a4:	f1 2c       	mov	r15, r1
    17a6:	c8 2a       	or	r12, r24
    17a8:	d9 2a       	or	r13, r25
    17aa:	ea 2a       	or	r14, r26
    17ac:	fb 2a       	or	r15, r27
    while (timerQ && (timerQ->baseline - now <= 0))
    17ae:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <timerQ>
    17b2:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <timerQ+0x1>
    17b6:	30 97       	sbiw	r30, 0x00	; 0
    17b8:	09 f4       	brne	.+2      	; 0x17bc <__vector_7+0x94>
    17ba:	42 c0       	rjmp	.+132    	; 0x1840 <__vector_7+0x118>
    17bc:	82 81       	ldd	r24, Z+2	; 0x02
    17be:	93 81       	ldd	r25, Z+3	; 0x03
    17c0:	a4 81       	ldd	r26, Z+4	; 0x04
    17c2:	b5 81       	ldd	r27, Z+5	; 0x05
    17c4:	8c 19       	sub	r24, r12
    17c6:	9d 09       	sbc	r25, r13
    17c8:	ae 09       	sbc	r26, r14
    17ca:	bf 09       	sbc	r27, r15
    17cc:	18 16       	cp	r1, r24
    17ce:	19 06       	cpc	r1, r25
    17d0:	1a 06       	cpc	r1, r26
    17d2:	1b 06       	cpc	r1, r27
    17d4:	ec f1       	brlt	.+122    	; 0x1850 <__vector_7+0x128>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    17d6:	8c e0       	ldi	r24, 0x0C	; 12
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	0e 94 2b 0b 	call	0x1656	; 0x1656 <dequeue>
    17de:	6e e0       	ldi	r22, 0x0E	; 14
    17e0:	71 e0       	ldi	r23, 0x01	; 1
    17e2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <enqueueByDeadline>

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
    17e6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <timerQ>
    17ea:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <timerQ+0x1>
    17ee:	30 97       	sbiw	r30, 0x00	; 0
    17f0:	39 f1       	breq	.+78     	; 0x1840 <__vector_7+0x118>
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	a4 81       	ldd	r26, Z+4	; 0x04
    17f8:	b5 81       	ldd	r27, Z+5	; 0x05
    17fa:	8c 19       	sub	r24, r12
    17fc:	9d 09       	sbc	r25, r13
    17fe:	ae 09       	sbc	r26, r14
    1800:	bf 09       	sbc	r27, r15
    1802:	18 16       	cp	r1, r24
    1804:	19 06       	cpc	r1, r25
    1806:	1a 06       	cpc	r1, r26
    1808:	1b 06       	cpc	r1, r27
    180a:	2c f7       	brge	.-54     	; 0x17d6 <__vector_7+0xae>
    180c:	21 c0       	rjmp	.+66     	; 0x1850 <__vector_7+0x128>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    180e:	9c 01       	movw	r18, r24
    1810:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1814:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1818:	84 1b       	sub	r24, r20
    181a:	95 0b       	sbc	r25, r21
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	31 f4       	brne	.+12     	; 0x182c <__vector_7+0x104>
    1820:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1824:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1828:	2f 5f       	subi	r18, 0xFF	; 255
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1830:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1834:	ef e6       	ldi	r30, 0x6F	; 111
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	82 60       	ori	r24, 0x02	; 2
    183c:	80 83       	st	Z, r24
    183e:	05 c0       	rjmp	.+10     	; 0x184a <__vector_7+0x122>
    1840:	ef e6       	ldi	r30, 0x6F	; 111
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8d 7f       	andi	r24, 0xFD	; 253
    1848:	80 83       	st	Z, r24
    schedule();
    184a:	0e 94 15 03 	call	0x62a	; 0x62a <schedule>
}
    184e:	0c c0       	rjmp	.+24     	; 0x1868 <__vector_7+0x140>
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	a4 81       	ldd	r26, Z+4	; 0x04
    1856:	b5 81       	ldd	r27, Z+5	; 0x05
    1858:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    185c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    1860:	2a 17       	cp	r18, r26
    1862:	3b 07       	cpc	r19, r27
    1864:	69 f7       	brne	.-38     	; 0x1840 <__vector_7+0x118>
    1866:	d3 cf       	rjmp	.-90     	; 0x180e <__vector_7+0xe6>
    schedule();
}
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	7f 91       	pop	r23
    1876:	6f 91       	pop	r22
    1878:	5f 91       	pop	r21
    187a:	4f 91       	pop	r20
    187c:	3f 91       	pop	r19
    187e:	2f 91       	pop	r18
    1880:	ff 90       	pop	r15
    1882:	ef 90       	pop	r14
    1884:	df 90       	pop	r13
    1886:	cf 90       	pop	r12
    1888:	0f 90       	pop	r0
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	0f 90       	pop	r0
    188e:	1f 90       	pop	r1
    1890:	18 95       	reti

00001892 <USART_Init>:


void USART_Init( unsigned int ubrr)
{
/* Set baud rate */
UBRR0H = (unsigned char)(ubrr>>8);
    1892:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
UBRR0L = (unsigned char)ubrr;
    1896:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
/* Enable receiver and transmitter  and enables interupts*/
UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1 << RXCIE0) | (1 << TXCIE0);;
    189a:	88 ed       	ldi	r24, 0xD8	; 216
    189c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
/* Set frame format: 8data, 2stop bit */
UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    18a0:	8e e0       	ldi	r24, 0x0E	; 14
    18a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
    18a6:	08 95       	ret

000018a8 <USART_Receive>:

unsigned int USART_Receive( void )
{
unsigned char status, resh, resl;
/* Wait for data to be received */
while ( !(UCSR0A & (1<<RXC0)) )
    18a8:	e0 ec       	ldi	r30, 0xC0	; 192
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	88 23       	and	r24, r24
    18b0:	ec f7       	brge	.-6      	; 0x18ac <USART_Receive+0x4>
;
/* Get status and 9th bit, then data */
/* from buffer */
status = UCSR0A;
    18b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
resh = UCSR0B;
    18b6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
resl = UDR0;
    18ba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    return -1;
}
/* Filter the 9th bit, then return */
resh = (resh >> 1) & 0x01;
return ((resh << 8) | resl  ); 
}
    18be:	8f ef       	ldi	r24, 0xFF	; 255
    18c0:	9f ef       	ldi	r25, 0xFF	; 255
    18c2:	08 95       	ret

000018c4 <USART_Transmit>:


void USART_Transmit( unsigned int data )
{
    18c4:	9c 01       	movw	r18, r24
/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0))) ;
    18c6:	e0 ec       	ldi	r30, 0xC0	; 192
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	90 81       	ld	r25, Z
    18cc:	95 ff       	sbrs	r25, 5
    18ce:	fd cf       	rjmp	.-6      	; 0x18ca <USART_Transmit+0x6>
/* Copy 9th bit to TXB8 */
UCSR0B &= ~(1<<TXB80);
    18d0:	e1 ec       	ldi	r30, 0xC1	; 193
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	90 81       	ld	r25, Z
    18d6:	9e 7f       	andi	r25, 0xFE	; 254
    18d8:	90 83       	st	Z, r25
if ( data & 0x0100 ){
    18da:	30 ff       	sbrs	r19, 0
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <USART_Transmit+0x20>
    UCSR0B |= (1<<TXB80);
    18de:	80 81       	ld	r24, Z
    18e0:	81 60       	ori	r24, 0x01	; 1
    18e2:	80 83       	st	Z, r24
}
/* Put data into buffer, sends the data */
UDR0 = data;
    18e4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    18e8:	08 95       	ret

000018ea <__divmodsi4>:
    18ea:	05 2e       	mov	r0, r21
    18ec:	97 fb       	bst	r25, 7
    18ee:	1e f4       	brtc	.+6      	; 0x18f6 <__divmodsi4+0xc>
    18f0:	00 94       	com	r0
    18f2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__negsi2>
    18f6:	57 fd       	sbrc	r21, 7
    18f8:	07 d0       	rcall	.+14     	; 0x1908 <__divmodsi4_neg2>
    18fa:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__udivmodsi4>
    18fe:	07 fc       	sbrc	r0, 7
    1900:	03 d0       	rcall	.+6      	; 0x1908 <__divmodsi4_neg2>
    1902:	4e f4       	brtc	.+18     	; 0x1916 <__divmodsi4_exit>
    1904:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__negsi2>

00001908 <__divmodsi4_neg2>:
    1908:	50 95       	com	r21
    190a:	40 95       	com	r20
    190c:	30 95       	com	r19
    190e:	21 95       	neg	r18
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	4f 4f       	sbci	r20, 0xFF	; 255
    1914:	5f 4f       	sbci	r21, 0xFF	; 255

00001916 <__divmodsi4_exit>:
    1916:	08 95       	ret

00001918 <__negsi2>:
    1918:	90 95       	com	r25
    191a:	80 95       	com	r24
    191c:	70 95       	com	r23
    191e:	61 95       	neg	r22
    1920:	7f 4f       	sbci	r23, 0xFF	; 255
    1922:	8f 4f       	sbci	r24, 0xFF	; 255
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	08 95       	ret

00001928 <__tablejump2__>:
    1928:	ee 0f       	add	r30, r30
    192a:	ff 1f       	adc	r31, r31
    192c:	05 90       	lpm	r0, Z+
    192e:	f4 91       	lpm	r31, Z
    1930:	e0 2d       	mov	r30, r0
    1932:	09 94       	ijmp

00001934 <__udivmodsi4>:
    1934:	a1 e2       	ldi	r26, 0x21	; 33
    1936:	1a 2e       	mov	r1, r26
    1938:	aa 1b       	sub	r26, r26
    193a:	bb 1b       	sub	r27, r27
    193c:	fd 01       	movw	r30, r26
    193e:	0d c0       	rjmp	.+26     	; 0x195a <__udivmodsi4_ep>

00001940 <__udivmodsi4_loop>:
    1940:	aa 1f       	adc	r26, r26
    1942:	bb 1f       	adc	r27, r27
    1944:	ee 1f       	adc	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	a2 17       	cp	r26, r18
    194a:	b3 07       	cpc	r27, r19
    194c:	e4 07       	cpc	r30, r20
    194e:	f5 07       	cpc	r31, r21
    1950:	20 f0       	brcs	.+8      	; 0x195a <__udivmodsi4_ep>
    1952:	a2 1b       	sub	r26, r18
    1954:	b3 0b       	sbc	r27, r19
    1956:	e4 0b       	sbc	r30, r20
    1958:	f5 0b       	sbc	r31, r21

0000195a <__udivmodsi4_ep>:
    195a:	66 1f       	adc	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	88 1f       	adc	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	1a 94       	dec	r1
    1964:	69 f7       	brne	.-38     	; 0x1940 <__udivmodsi4_loop>
    1966:	60 95       	com	r22
    1968:	70 95       	com	r23
    196a:	80 95       	com	r24
    196c:	90 95       	com	r25
    196e:	9b 01       	movw	r18, r22
    1970:	ac 01       	movw	r20, r24
    1972:	bd 01       	movw	r22, r26
    1974:	cf 01       	movw	r24, r30
    1976:	08 95       	ret

00001978 <setjmp>:
    1978:	dc 01       	movw	r26, r24
    197a:	2d 92       	st	X+, r2
    197c:	3d 92       	st	X+, r3
    197e:	4d 92       	st	X+, r4
    1980:	5d 92       	st	X+, r5
    1982:	6d 92       	st	X+, r6
    1984:	7d 92       	st	X+, r7
    1986:	8d 92       	st	X+, r8
    1988:	9d 92       	st	X+, r9
    198a:	ad 92       	st	X+, r10
    198c:	bd 92       	st	X+, r11
    198e:	cd 92       	st	X+, r12
    1990:	dd 92       	st	X+, r13
    1992:	ed 92       	st	X+, r14
    1994:	fd 92       	st	X+, r15
    1996:	0d 93       	st	X+, r16
    1998:	1d 93       	st	X+, r17
    199a:	cd 93       	st	X+, r28
    199c:	dd 93       	st	X+, r29
    199e:	ff 91       	pop	r31
    19a0:	ef 91       	pop	r30
    19a2:	8d b7       	in	r24, 0x3d	; 61
    19a4:	8d 93       	st	X+, r24
    19a6:	8e b7       	in	r24, 0x3e	; 62
    19a8:	8d 93       	st	X+, r24
    19aa:	8f b7       	in	r24, 0x3f	; 63
    19ac:	8d 93       	st	X+, r24
    19ae:	ed 93       	st	X+, r30
    19b0:	fd 93       	st	X+, r31
    19b2:	88 27       	eor	r24, r24
    19b4:	99 27       	eor	r25, r25
    19b6:	09 94       	ijmp

000019b8 <longjmp>:
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	91 05       	cpc	r25, r1
    19c0:	81 1d       	adc	r24, r1
    19c2:	2d 90       	ld	r2, X+
    19c4:	3d 90       	ld	r3, X+
    19c6:	4d 90       	ld	r4, X+
    19c8:	5d 90       	ld	r5, X+
    19ca:	6d 90       	ld	r6, X+
    19cc:	7d 90       	ld	r7, X+
    19ce:	8d 90       	ld	r8, X+
    19d0:	9d 90       	ld	r9, X+
    19d2:	ad 90       	ld	r10, X+
    19d4:	bd 90       	ld	r11, X+
    19d6:	cd 90       	ld	r12, X+
    19d8:	dd 90       	ld	r13, X+
    19da:	ed 90       	ld	r14, X+
    19dc:	fd 90       	ld	r15, X+
    19de:	0d 91       	ld	r16, X+
    19e0:	1d 91       	ld	r17, X+
    19e2:	cd 91       	ld	r28, X+
    19e4:	dd 91       	ld	r29, X+
    19e6:	ed 91       	ld	r30, X+
    19e8:	fd 91       	ld	r31, X+
    19ea:	0d 90       	ld	r0, X+
    19ec:	f8 94       	cli
    19ee:	fe bf       	out	0x3e, r31	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	ed bf       	out	0x3d, r30	; 61
    19f4:	ed 91       	ld	r30, X+
    19f6:	fd 91       	ld	r31, X+
    19f8:	09 94       	ijmp

000019fa <_exit>:
    19fa:	f8 94       	cli

000019fc <__stop_program>:
    19fc:	ff cf       	rjmp	.-2      	; 0x19fc <__stop_program>
